# Project Documentation: ui_components

Generated by llmifier on: 2025-09-19T21:55:56
Extraction Mode: full
Project Type: dart

---

<!-- BEGIN FILE: README.md -->
# UI Components Monorepo

This repository contains multiple UI component packages for [Jaspr](https://jaspr.site), built with Dart.

Each package is designed to be modular and reusable in your Jaspr web projects.

---

## Repository Structure

```bash
ui-components/
├── packages/
│   ├── deepyr/
│   └── elevyr/
├── examples/
│   ├── deepyr_example/
│   └── elevyr_example/
└── README.md
```

---

## Packages

| Package  | Description                                  |
| -------- | -------------------------------------------- |
| `deepyr` | Shared core utilities and base functionality |
| `elevyr` | Reusable UI components for Jaspr             |

Deepyr components are one-to-one realisation of the DaisyUI components with all
the advantages of Dart.

Extended components for easier handling and with practical combinations will be implemented
later in the Elevyr package

---

## Examples

| Example          | Description             |
| ---------------- | ----------------------- |
| `deepyr_example` | Example usage of deepyr |
| `elevyr_example` | Example usage of elevyr |

---

## Getting Started

### TailwindCSS and DaisyUI

```bash
npm init -y
npm install -D tailwindcss@latest daisyui@latest
````

```bash
npm list tailwindcss daisyui
npm update tailwindcss daisyui
npm install -D tailwindcss@latest daisyui@latest
```

## Run Tailwind

```bash
npx @tailwindcss/cli -i ./web/styles.tw.css -o ./web/styles.css --watch
```

### Prerequisites

- [Dart SDK](https://dart.dev/get-dart) (>=3.x)
- [Jaspr CLI](https://jaspr.dev/docs/get-started/)

Install Jaspr CLI:

```bash
dart pub global activate jaspr_cli
```

Install Tailwind CSS

```bash
# see https://tailwindcss.com/blog/standalone-cli

```

---

### Install Dependencies

Run in each package or example folder:

```bash
dart pub get
```

---

### Run Example

For example, to run `example_components`:

```bash
cd examples/deepyr_example
jaspr serve
```

---

## Using the Packages

Add to your `pubspec.yaml`:

---

## Greatest Advantages of the deepyr Package

### Core Implementation Strategy

The library abstracts DaisyUI's class-based system into a robust, type-safe collection of Dart components and styling objects.

Styling is managed through a clever system of Dart classes that represent CSS utilities. Component-specific styles (e.g., `Button.primary`) and general-purpose utilities (e.g., `Spacing.p(4)`, `TextUtil.center`) are unified under a common `Styling` interface. This allows developers to apply both types of styles together in a component's `style` list, offering a high degree of flexibility and code clarity.

`deepyr`  is a foundational library that provides a 1:1, type-safe mapping of DaisyUI components and their modifiers.

### Greatest Advantages of the `deepyr` Package

The `deepyr` package's architecture provides several key benefits for developers building web applications with Jaspr:

- **Type Safety and Autocomplete:** By replacing raw CSS strings like `'btn-primary'` with Dart objects like `Button.primary`, the library eliminates a common source of typos and errors. This approach leverages Dart's strong type system, allowing the compiler to catch mistakes at build time. Furthermore, it provides an excellent developer experience with full IDE autocomplete for discovering available components and their modifiers.

- **Fluent API for Responsive and State-based Design:** A standout feature is the fluent API for applying responsive and state-based variations. Instead of manually concatenating prefixes, developers can use intuitive methods like `.at(Breakpoint.md)` and `.on(Is.hover)`. This makes the code for complex, adaptive user interfaces significantly more readable and maintainable.

- **High-Level Abstraction and Maintainability:** The package provides high-level abstractions for DaisyUI components. Developers can work with familiar components like `Card`, `Modal`, and `Drawer` without needing to memorize the specific underlying HTML structure and class names that DaisyUI requires. This abstraction also means that if DaisyUI were to update its class names, the changes could be handled within the `deepyr` library, insulating developers from breaking changes.

- **Focus on Accessibility:** The base `UiComponent` class includes a dedicated `configureAttributes` method, encouraging the proper setup of ARIA roles and other accessibility attributes from the component level. This built-in consideration for accessibility is a crucial aspect of modern web development.

In summary, the `deepyr` package architecture prioritizes type safety, developer experience, and maintainability, providing a solid and scalable foundation for building sophisticated user interfaces with Jaspr and DaisyUI.

## License

MIT License — see [LICENSE](LICENSE)

<!-- END FILE: README.md -->

<!-- BEGIN FILE: pubspec.yaml -->
name: ui_components
description: UI Components Jaspr libraries.
publish_to: none

environment:
  sdk: ">=3.8.0 <4.0.0"

workspace:
  - packages/deepyr
  - packages/elevyr
  - examples/deepyr_example
  - examples/elevyr_example

dependencies:
  jaspr: ^0.21.1

# Spezifiziere lint und test in den dev_dependencies damit diese sich alle Projekte teilen können.
dev_dependencies:
  jaspr_builder: ^0.21.1
  test: ^1.26.0
  very_good_analysis: ^10.0.0

<!-- END FILE: pubspec.yaml -->

<!-- BEGIN FILE: packages/deepyr/README.md -->
# Deepyr

[![pub version](https://img.shields.io/pub/v/deepyr.svg)](https://pub.dev/packages/deepyr)

Jaspr + DaisyUI => Deepyr

A type-safe Dart implementation of DaisyUI components for Jaspr, providing a fluent API for building beautiful web apps with Tailwind CSS.

## Proof of concept

This package currently serves as a proof-of-concept for integrating DaisyUI with Jaspr using a type-safe Dart API.

## Documentation and Examples

https://deepyr-doc.web.app/

## **Design Principles**

- 🎯 **Type Safety** - Catch styling errors at compile time
- 🔧 **Fluent API** - Chain modifiers intuitively
- 📱 **Responsive** - Built-in breakpoint support
- 🎨 **DaisyUI Faithful** - 1:1 component mapping
- ⚡ **Performance** - Minimal runtime overhead

## Getting Started

1. **Add Dependency**

    Add `deepyr` to your `pubspec.yaml`:

    ```yaml
    dependencies:
      deepyr: ^0.1.0
    ```

2. **Setup Tailwind CSS**

    `deepyr` is a component library, not a CSS framework. You must have **Tailwind CSS v4** and **DaisyUI v5** installed and configured in your Jaspr project for the components to be styled correctly.

## Usage Example

```dart
import 'package:jaspr/jaspr.dart';
import 'package:deepyr/deepyr.dart';

class MyComponent extends StatelessComponent {
  @override
  Iterable<Component> build(BuildContext context) sync* {
    yield Button(
      [
        Icon('favorite'),
        text('Click Me'),
      ],
      // Apply styles in a type-safe list
      style: [
        Button.primary, // Apply the primary color
        Button.lg.at(Breakpoint.md), // Becomes large on medium screens and up
      ],
      onClick: (_) => print('Button clicked!'),
    );
  }
}
```

## Deepyr Component Roadmap

### **Phase 1: Core Foundation**

Essential building blocks - No dependencies required

- ✅ **Button**
- ✅ **Input**
- ✅ **Badge**
- ✅ **Loading**
- ✅ **Alert**
- ✅ **Card**
- ✅ **Divider**

---

### **Phase 2: Form Components**

Essential form inputs and controls

- ✅ **Checkbox** - Boolean selection with custom styling
- ✅ **Radio** - Single choice selection from multiple options
- ✅ **Toggle** - Modern switch-style boolean input
- ✅ **Textarea** - Multi-line text input with resize options
- ✅ **Select** - Dropdown selection with custom styling
- ✅ **Progress** - Task completion and loading progress bars
- ✅ **Link** - Enhanced hyperlinks with hover states

---

### **Phase 3: Layout & Navigation**

Page structure and user navigation

- ✅ **Navbar** - Header navigation bars
- ✅ **Footer** - Page footers with links and branding
- ✅ **Breadcrumbs** - Navigation hierarchy display
- ✅ **Hero** - Landing page headers and call-to-action sections
- ✅ **Skeleton** - Loading state placeholders
- ✅ **Avatar** - User profile images and placeholders

---

### **Phase 4: Data Display**

Presenting information and data

- 🔲 **Table** - Structured data presentation
- 🔲 **Stats** - Metrics and statistics display
- 🔲 **List** - Structured content organization
- 🔲 **Timeline** - Chronological data visualization
- ✅ **Kbd** - Keyboard shortcut display
- 🔲 **Mask** - Image and content shape transformations

---

### **Phase 5: Advanced Feedback**

Enhanced user notifications and status

- 🔲 **Toast** - Floating notification messages
- 🔲 **Radial Progress** - Circular progress indicators
- 🔲 **Status** - Small online/offline indicators
- ✅ **Indicator** - Corner notification badges
- 🔲 **Steps** - Multi-step process visualization
- 🔲 **Countdown** - Timer and countdown displays

---

### **Phase 6: Container Components**

Component organization and grouping

- ✅ **Join** - Group related components together
- 🔲 **Stack** - Layer elements on top of each other
- ✅ **Collapse** - Expandable content sections
- ✅ **Swap** - Toggle between two content states
- ✅ **Fieldset** - Form section grouping
- ✅ **Label** - Enhanced form field labeling

---

### **Phase 7: Interactive Components**

Complex user interactions

- ✅ **Modal** - Dialog boxes and overlays
- ✅ **Dropdown** - Context menus and action lists
- 🔲 **Drawer** - Sliding side navigation
- ✅ **Menu** - Navigation and context menus
- ✅ **Tabs** - Tabbed content interfaces
- 🔲 **Carousel** - Content sliders and galleries

---

### **Phase 8: Advanced Components**

Specialized inputs and complex patterns

- ✅ **File Input** - File upload interfaces
- 🔲 **Range** - Slider value selection
- 🔲 **Rating** - Star ratings and feedback
- 🔲 **Filter** - Content filtering controls
- ✅ **Pagination** - Page navigation controls
- 🔲 **Theme Controller** - Dynamic theme switching
- ✅ **Validator** - Form validation with visual feedback
- ✅ **Diff** - Side-by-side content comparison

---

### **Phase 9: Display & Demo**

Presentation and demonstration components

- 🔲 **Mockup Browser** - Browser window frames
- 🔲 **Mockup Phone** - Mobile device frames
- 🔲 **Mockup Window** - Desktop window frames
- 🔲 **Mockup Code** - Code block presentation
- 🔲 **Chat** - Messaging interface components
- 🔲 **Calendar** - Date selection integration

<!-- END FILE: packages/deepyr/README.md -->

<!-- BEGIN FILE: packages/deepyr/example/README.md -->
# Deepyr Example

A new Jaspr project

## Setup

Install tailwindcss and daisyui

```bash
npm init -y
npm install -D tailwindcss@latest daisyui@latest
```

## Run Tailwind

```bash
npx @tailwindcss/cli -i ./web/styles.tw.css -o ./web/styles.css --watch
```

## Running the project

Run your project using `jaspr serve`.

The development server will be available on `http://localhost:8080`.

## Building the project

Build your project using `jaspr build`.

The output will be located inside the `build/jaspr/` directory.

<!-- END FILE: packages/deepyr/example/README.md -->

<!-- BEGIN FILE: packages/deepyr/CHANGELOG.md -->
# Changelog

## 0.0.5

### Added

- **`Join`** - A smart container to seamlessly group related components like buttons or inputs.
- **`Tooltip`** - A pop-up that displays information on hover, supporting both simple text and rich content.
- **`Indicator`** - A container to place a badge or item on the corner of another element.
- **`Modal`** - A dialog/overlay component for displaying important messages or interactive content.
- **`Tabs`** - A component for creating tabbed content views, allowing users to switch between different sections.
- **`Dropdown`** - A key interactive component for creating context menus and action lists, refactored for a more declarative and type-safe API.

## 0.0.4

### Added

- **`Checkbox`** - Boolean selection with custom styling
- **`Radio`** - Single choice selection from multiple options
- **`Toggle`** - Modern switch-style boolean input
- **`Textarea`** - Multi-line text input with resize options
- **`Select`** - Dropdown selection with custom styling
- **`Progress`** - Task completion and loading progress bars
- **`Link`** - Enhanced hyperlinks with hover states

## 0.0.3

### Added

- **`Loading`** - to show animations for loading states.
- **`Divider`** - to separate content.

## 0.0.2

### Added

- **`Input`** - Text input field with full styling support
- **`Badge`** - Status indicators and labels
- **`Alert`** - User notification messages
- **`Card`** - Content containers and layout blocks

## 0.0.1

- Initial project setup and foundation for the `deepyr` package.
- Proof of Concept (PoC) release with the first component: `Button`.
- Basic API structure for creating and styling DaisyUI components in Jaspr.

<!-- END FILE: packages/deepyr/CHANGELOG.md -->

<!-- BEGIN FILE: packages/deepyr/example/pubspec.yaml -->
name: example
description: A new Jaspr project, Deepyr example
version: 0.0.4
publish_to: none

environment:
  sdk: ">=3.8.0 <4.0.0"

dependencies:
  jaspr: ^0.21.1
  deepyr: ^0.1.0

dev_dependencies:
  build_runner: ^2.4.0
  build_web_compilers: ^4.2.2
  jaspr_builder: ^0.21.1
  jaspr_lints: ^0.5.1
  lints: ^6.0.0

jaspr:
  mode: static

<!-- END FILE: packages/deepyr/example/pubspec.yaml -->

<!-- BEGIN FILE: packages/deepyr/pubspec.yaml -->
name: deepyr
description: A type-safe Dart implementation of DaisyUI components for Jaspr, providing a fluent API for building beautiful web apps (PoC)
version: 0.1.0
homepage: https://deepyr-doc.web.app/
repository: https://github.com/PhilippHGerber/ui_components
issue_tracker: https://github.com/PhilippHGerber/ui_components/issues

environment:
  sdk: ">=3.8.0 <4.0.0"

resolution: workspace

# Add regular dependencies here.
dependencies:
  jaspr: ^0.21.1
  universal_web: ^1.1.0

dev_dependencies:
  build_runner: ^2.4.15
  jaspr_builder: ^0.21.1
  jaspr_lints: ^0.5.1
  jaspr_web_compilers: ^4.1.1
  test: ^1.26.0
  very_good_analysis: ^10.0.0

topics:
  - jaspr
  - daisyui
  - ui-components
  - web
<!-- END FILE: packages/deepyr/pubspec.yaml -->

<!-- BEGIN FILE: packages/deepyr/LICENSE -->
MIT License

Copyright (c) 2025 Philipp H. Gerber

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

<!-- END FILE: packages/deepyr/LICENSE -->

<!-- BEGIN FILE: packages/deepyr/example/lib/example.dart -->
import 'package:deepyr/deepyr.dart';
import 'package:jaspr/server.dart';

// Generated by Jaspr
import 'jaspr_options.dart';

void main() {
  Jaspr.initializeApp(options: defaultJasprOptions);

  runApp(
    Document(
      title: 'Deepyr Example - Component Showcase',
      head: <Component>[
        link(href: 'styles.css', rel: 'stylesheet'),
        meta(name: 'viewport', content: 'width=device-width, initial-scale=1'),
      ],
      body: const DeepyrShowcase(),
    ),
  );
}

class DeepyrShowcase extends StatelessComponent {
  const DeepyrShowcase({super.key});

  @override
  Component build(BuildContext context) {
    return div(classes: 'min-h-screen bg-base-100 p-8', [
      // Header
      div(classes: 'max-w-6xl mx-auto', [
        h1(classes: 'text-4xl font-bold text-center mb-2', [text('🎨 Deepyr Component Showcase')]),
        p(classes: 'text-center text-base-content/70 mb-12', [
          text('Type-safe DaisyUI components for Jaspr'),
        ]),

        // Alert Examples
        _buildSection('Alert Components', 'User notifications and feedback messages', [
          Alert([text('🎉 Welcome to Deepyr! This is a success message.')], style: [Alert.success]),

          Alert([text('⚠️ Please check your input. This is a warning.')], style: [Alert.warning]),

          Alert([text('❌ Something went wrong. This is an error message.')], style: [Alert.error]),

          Alert([text('ℹ️ Here\'s some helpful information for you.')], style: [Alert.info]),

          // Outlined style
          Alert(
            [text('🔄 Processing your request... (outlined style)')],
            style: [Alert.info, Alert.outline],
          ),
        ]),

        // Card Examples
        _buildSection('Card Components', 'Content containers and layout blocks', [
          div(classes: 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4', [
            // Basic card
            Card(
              style: [BgUtil.base300, Effects.shadowLg],
              [
                CardBody([
                  CardTitle([text('Basic Card')]),
                  p([text('This is a simple card with some content inside.')]),
                  CardActions([
                    Button([text('Action')], style: [Button.primary, Button.sm]),
                  ]),
                ]),
              ],
            ),

            // Card with image
            Card(
              style: [BgUtil.base300, Effects.shadowLg],
              [
                Figure([img(src: 'https://picsum.photos/400/200?random=1', alt: 'Random image')]),
                CardBody([
                  CardTitle([
                    text('Image Card'),
                    Badge([text('NEW')], style: [Badge.secondary]),
                  ]),
                  p([text('Card with a beautiful image and badge.')]),
                  CardActions([
                    Button([text('View')], style: [Button.ghost]),
                    Button([text('Buy Now')], style: [Button.primary]),
                  ]),
                ]),
              ],
            ),

            // Compact card
            Card(
              style: [Card.border, Effects.shadowLg, Card.xs],
              [
                CardBody([
                  CardTitle([text('Compact Card')]),
                  p([text('Smaller card perfect for dashboards.')]),
                ]),
              ],
            ),
          ]),
        ]),

        // Button Examples
        _buildSection('Button Components', 'Interactive elements with various styles and states', [
          // Color variants
          div(classes: 'flex flex-wrap gap-2 mb-4', [
            Button([text('Neutral')], style: [Button.neutral]),
            Button([text('Primary')], style: [Button.primary]),
            Button([text('Secondary')], style: [Button.secondary]),
            Button([text('Accent')], style: [Button.accent]),
            Button([text('Info')], style: [Button.info]),
            Button([text('Success')], style: [Button.success]),
            Button([text('Warning')], style: [Button.warning]),
            Button([text('Error')], style: [Button.error]),
          ]),

          // Style variants
          div(classes: 'flex flex-wrap gap-2 mb-4', [
            Button([text('Outline')], style: [Button.outline]),
            Button([text('Ghost')], style: [Button.ghost]),
            Button([text('Link')], style: [Button.link]),
            Button([text('Soft')], style: [Button.soft]),
            Button([text('Dash')], style: [Button.dash]),
          ]),

          // Size variants
          div(classes: 'flex flex-wrap items-center gap-2 mb-4', [
            Button([text('XS')], style: [Button.xs]),
            Button([text('SM')], style: [Button.sm]),
            Button([text('MD')], style: [Button.md]),
            Button([text('LG')], style: [Button.lg]),
            Button([text('XL')], style: [Button.xl]),
          ]),

          // Shape variants
          div(classes: 'flex flex-wrap items-center gap-2', [
            Button([text('Wide Button')], style: [Button.wide]),
            Button([text('⭐')], style: [Button.square]),
            Button([text('💝')], style: [Button.circle]),
            Button([text('Block Button')], style: [Button.block]),
          ]),
        ]),

        // Input Examples
        _buildSection('Input Components', 'Form inputs with validation and styling', [
          div(classes: 'grid grid-cols-1 md:grid-cols-2 gap-4', [
            // Basic inputs
            div([
              label(classes: 'block text-sm font-medium mb-2', [text('Email Address')]),
              Input(type: 'email', placeholder: 'Enter your email', style: [Input.primary]),
            ]),

            div([
              label(classes: 'block text-sm font-medium mb-2', [text('Password')]),
              Input(type: 'password', placeholder: 'Enter password', style: [Input.secondary]),
            ]),

            // Different sizes
            div([
              label(classes: 'block text-sm font-medium mb-2', [text('Small Input')]),
              Input(placeholder: 'Small size', style: [Input.sm]),
            ]),

            div([
              label(classes: 'block text-sm font-medium mb-2', [text('Large Input')]),
              Input(placeholder: 'Large size', style: [Input.lg]),
            ]),

            // Validation states
            div([
              label(classes: 'block text-sm font-medium mb-2', [text('Success State')]),
              Input(placeholder: 'Valid input', style: [Input.success]),
            ]),

            div([
              label(classes: 'block text-sm font-medium mb-2', [text('Error State')]),
              Input(placeholder: 'Invalid input', style: [Input.error]),
            ]),
          ]),

          // Ghost style
          div(classes: 'mt-4', [
            label(classes: 'block text-sm font-medium mb-2', [text('Ghost Style Input')]),
            Input(placeholder: 'Transparent background', style: [Input.ghost, Input.lg]),
          ]),
        ]),

        // Badge Examples
        _buildSection('Badge Components', 'Status indicators, labels, and counters', [
          // Color variants
          div(classes: 'flex flex-wrap gap-2 mb-4', [
            Badge([text('Neutral')], style: [Badge.neutral]),
            Badge([text('Primary')], style: [Badge.primary]),
            Badge([text('Secondary')], style: [Badge.secondary]),
            Badge([text('Accent')], style: [Badge.accent]),
            Badge([text('Info')], style: [Badge.info]),
            Badge([text('Success')], style: [Badge.success]),
            Badge([text('Warning')], style: [Badge.warning]),
            Badge([text('Error')], style: [Badge.error]),
          ]),

          // Style variants
          div(classes: 'flex flex-wrap gap-2 mb-4', [
            Badge([text('Outline')], style: [Badge.outline]),
            Badge([text('Ghost')], style: [Badge.ghost]),
            Badge([text('Soft')], style: [Badge.soft]),
            Badge([text('Dash')], style: [Badge.dash]),
          ]),

          // Size variants
          div(classes: 'flex flex-wrap items-center gap-2 mb-4', [
            Badge([text('XS')], style: [Badge.xs]),
            Badge([text('SM')], style: [Badge.sm]),
            Badge([text('MD')], style: [Badge.md]),
            Badge([text('LG')], style: [Badge.lg]),
            Badge([text('XL')], style: [Badge.xl]),
          ]),

          // Practical examples
          div(classes: 'space-y-2', [
            p([
              text('Status: '),
              Badge([text('Online')], style: [Badge.success, Badge.sm]),
            ]),
            p([
              text('Notifications '),
              Badge([text('3')], style: [Badge.error, Badge.xs]),
            ]),
            p([
              text('Version '),
              Badge([text('v1.2.0')], style: [Badge.ghost]),
            ]),
          ]),
        ]),

        // Integration Examples
        _buildSection('Component Integration', 'Examples showing components working together', [
          // Login card example
          div(classes: 'max-w-md mx-auto', [
            Card(
              style: [Card.border, Card.lg],
              [
                CardBody([
                  div(classes: 'text-center mb-4', [
                    CardTitle([
                      text('Login'),
                      Badge([text('Secure')], style: [Badge.success, Badge.sm]),
                    ]),
                  ]),
                  Alert(
                    [text('Please enter your credentials to continue.')],
                    style: [Alert.info, Alert.soft],
                  ),
                  div(classes: 'space-y-4 mt-4', [
                    Input(type: 'email', placeholder: 'Email address', style: [Input.primary]),
                    Input(type: 'password', placeholder: 'Password', style: [Input.primary]),
                  ]),
                  CardActions([
                    Button([text('Cancel')], style: [Button.ghost]),
                    Button([text('Sign In')], style: [Button.primary]),
                  ]),
                ]),
              ],
            ),
          ]),
        ]),

        // Footer
        div(classes: 'text-center mt-16 pt-8 border-t border-base-300', [
          p(classes: 'text-base-content/60', [
            text('Built with ❤️ using Deepyr • '),
            a(
              href: 'https://github.com/PhilippHGerber/ui_components',
              classes: 'link link-primary',
              [text('View on GitHub')],
            ),
          ]),
        ]),
      ]),
    ]);
  }

  Component _buildSection(String title, String description, List<Component> content) {
    return div(classes: 'mb-16', [
      div(classes: 'mb-8', [
        h2(classes: 'text-2xl font-bold mb-2', [text(title)]),
        p(classes: 'text-base-content/70', [text(description)]),
      ]),
      div(classes: 'space-y-6', content),
    ]);
  }
}

<!-- END FILE: packages/deepyr/example/lib/example.dart -->

<!-- BEGIN FILE: packages/deepyr/example/lib/jaspr_options.dart -->
// dart format off
// ignore_for_file: type=lint

// GENERATED FILE, DO NOT MODIFY
// Generated with jaspr_builder

import 'package:jaspr/jaspr.dart';
import 'package:deepyr/src/components/label/label.dart' as prefix0;

/// Default [JasprOptions] for use with your jaspr project.
///
/// Use this to initialize jaspr **before** calling [runApp].
///
/// Example:
/// ```dart
/// import 'jaspr_options.dart';
///
/// void main() {
///   Jaspr.initializeApp(
///     options: defaultJasprOptions,
///   );
///
///   runApp(...);
/// }
/// ```
JasprOptions get defaultJasprOptions =>
    JasprOptions(styles: () => [...prefix0.Label.styles]);

<!-- END FILE: packages/deepyr/example/lib/jaspr_options.dart -->

<!-- BEGIN FILE: packages/deepyr/example/lib/main.dart -->
import 'package:deepyr/deepyr.dart';
import 'package:jaspr/server.dart';

// Generated by Jaspr
import 'jaspr_options.dart';

void main() {
  Jaspr.initializeApp(options: defaultJasprOptions);

  runApp(
    Document(
      title: 'Deepyr Example',
      head: <Component>[link(href: 'styles.css', rel: 'stylesheet')],
      body: const Example(),
    ),
  );
}

class Example extends StatelessComponent {
  const Example({super.key});

  @override
  Component build(BuildContext context) {
    return div([
      Button([text('Neutral')], style: [Button.neutral]),
      Button([text('Primary')], style: [Button.primary]),
      Button([text('Secondary')], style: [Button.secondary]),
      Button([text('Accent')], style: [Button.accent]),
      Button([text('Info')], style: [Button.info]),
      Button([text('Success')], style: [Button.success]),
      Button([text('Warning')], style: [Button.warning]),
      Button([text('Error')], style: [Button.error]),
    ]);
  }
}

<!-- END FILE: packages/deepyr/example/lib/main.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/deepyr.dart -->
// --- BASE ---
// Core concepts, interfaces, and base classes for the library.
export 'src/base/base_style.dart';
export 'src/base/common_style.dart';
export 'src/base/styling.dart';
export 'src/base/styling_extensions.dart';
export 'src/base/ui_component.dart';
export 'src/base/ui_component_attributes.dart';
export 'src/base/ui_events.dart';
export 'src/base/ui_prefix_modifier.dart';
// --- UTILITIES ---
// General-purpose styling classes for layout, spacing, typography, etc.
export 'src/base/utilities/alignment.dart';
export 'src/base/utilities/bg_util.dart';
export 'src/base/utilities/border_util.dart';
export 'src/base/utilities/effects.dart';
export 'src/base/utilities/flex.dart';
export 'src/base/utilities/font_util.dart';
export 'src/base/utilities/grid.dart';
export 'src/base/utilities/layout.dart';
export 'src/base/utilities/position.dart';
export 'src/base/utilities/size.dart';
export 'src/base/utilities/spacing.dart';
export 'src/base/utilities/text_util.dart';
// --- COMPONENTS ---
// All DaisyUI components with their respective styling interfaces.

// Accordion
export 'src/components/accordion/accordion.dart';
export 'src/components/accordion/accordion_style.dart' show AccordionStyling;
// Alert
export 'src/components/alert/alert.dart';
export 'src/components/alert/alert_style.dart' show AlertStyling;
// Avatar
export 'src/components/avatar/avatar.dart';
export 'src/components/avatar/avatar_style.dart' show AvatarStyling;
// Badge
export 'src/components/badge/badge.dart';
export 'src/components/badge/badge_style.dart' show BadgeStyling;
// Breadcrumbs
export 'src/components/breadcrumbs/breadcrumbs.dart';
export 'src/components/breadcrumbs/breadcrumbs_style.dart' show BreadcrumbsStyling;
// Button
export 'src/components/button/button.dart';
export 'src/components/button/button_style.dart' show ButtonStyling;
// Card
export 'src/components/card/card.dart';
export 'src/components/card/card_style.dart' show CardStyling;
// Checkbox
export 'src/components/checkbox/checkbox.dart';
export 'src/components/checkbox/checkbox_style.dart' show CheckboxStyling;
// Collapse
export 'src/components/collapse/collapse.dart';
export 'src/components/collapse/collapse_style.dart' show CollapseStyling;
// Datalist
export 'src/components/datalist/datalist.dart';
// Diff
export 'src/components/diff/diff.dart';
export 'src/components/diff/diff_style.dart' show DiffStyling;
// Divider
export 'src/components/divider/divider.dart';
export 'src/components/divider/divider_style.dart' show DividerStyling;
// Drawer
export 'src/components/drawer/drawer.dart';
export 'src/components/drawer/drawer_style.dart' show DrawerStyling;
// Dropdown
export 'src/components/dropdown/dropdown.dart';
export 'src/components/dropdown/dropdown_content_style.dart' show DropdownContentStyling;
export 'src/components/dropdown/dropdown_style.dart' show DropdownStyling;
// Fieldset
export 'src/components/fieldset/fieldset.dart';
export 'src/components/fieldset/fieldset_style.dart' show FieldsetStyling, LegendStyling;
// FileInput
export 'src/components/file_input/file_input.dart';
export 'src/components/file_input/file_input_style.dart' show FileInputStyling;
// Footer
export 'src/components/footer/footer.dart';
export 'src/components/footer/footer_style.dart' show FooterStyling;
// FormLabel
export 'src/components/form_label/form_label.dart';
export 'src/components/form_label/form_label_style.dart' show FormLabelStyling;
// Hero
export 'src/components/hero/hero.dart';
export 'src/components/hero/hero_style.dart' show HeroStyling;
// Icon
export 'src/components/icon/icon.dart';
export 'src/components/icon/icon_style.dart' show IconStyling;
// Indicator
export 'src/components/indicator/indicator.dart';
export 'src/components/indicator/indicator_style.dart' show IndicatorItemStyling, IndicatorStyling;
// Input
export 'src/components/input/input.dart';
export 'src/components/input/input_style.dart' show InputStyling;
// Join
export 'src/components/join/join.dart';
export 'src/components/join/join_style.dart' show JoinStyling;
// Kbd
export 'src/components/kbd/kbd.dart';
export 'src/components/kbd/kbd_style.dart' show KbdStyling;
// Label
export 'src/components/label/label.dart';
export 'src/components/label/label_style.dart' show LabelStyling;
// Link
export 'src/components/link/link.dart';
export 'src/components/link/link_style.dart' show LinkStyling;
// Loading
export 'src/components/loading/loading.dart';
export 'src/components/loading/loading_style.dart' show LoadingStyling;
// Menu
export 'src/components/menu/menu.dart';
export 'src/components/menu/menu_item_style.dart' show MenuItemStyling;
export 'src/components/menu/menu_style.dart' show MenuStyling;
// Modal
export 'src/components/modal/modal.dart';
export 'src/components/modal/modal_style.dart' show ModalStyling;
// Navbar
export 'src/components/navbar/navbar.dart';
export 'src/components/navbar/navbar_style.dart' show NavbarStyling;
// Progress
export 'src/components/progress/progress.dart';
export 'src/components/progress/progress_style.dart' show ProgressStyling;
// Radio
export 'src/components/radio/radio.dart';
export 'src/components/radio/radio_style.dart' show RadioStyling;
// Range
export 'src/components/range/range.dart';
export 'src/components/range/range_style.dart' show RangeStyling;
// Select
export 'src/components/select/select.dart';
export 'src/components/select/select_style.dart' show SelectStyling;
// Skeleton
export 'src/components/skeleton/skeleton.dart';
export 'src/components/skeleton/skeleton_style.dart' show SkeletonStyling;
// Swap
export 'src/components/swap/swap.dart';
export 'src/components/swap/swap_style.dart' show SwapStyling;
export 'src/components/tabs/tab_style.dart' show TabStyling;
// Tabs
export 'src/components/tabs/tabs.dart';
export 'src/components/tabs/tabs_style.dart' show TabsStyling;
// Textarea
export 'src/components/textarea/textarea.dart';
export 'src/components/textarea/textarea_style.dart' show TextareaStyling;
// ThemeController
export 'src/components/theme_controller/theme_controller.dart';
export 'src/components/theme_controller/theme_controller_style_modifier.dart'
    show ThemeControllerStyling;
export 'src/components/theme_controller/theme_service.dart';
// Toggle
export 'src/components/toggle/toggle.dart';
export 'src/components/toggle/toggle_style.dart' show ToggleStyling;
// Tooltip
export 'src/components/tooltip/tooltip.dart';
export 'src/components/tooltip/tooltip_style.dart' show TooltipStyling;
// ValidatorHint
export 'src/components/validator_hint/validator_hint.dart';
export 'src/components/validator_hint/validator_hint_style.dart' show ValidatorHintStyling;
// --- ELEMENTS ---
// Generic HTML element wrappers like Container and Figure.
export 'src/elements/container.dart';
export 'src/elements/figure.dart';

<!-- END FILE: packages/deepyr/lib/deepyr.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/base/base_style.dart -->
import 'style_type.dart';
import 'styling.dart';
import 'ui_prefix_modifier.dart';

/// An abstract generic class representing a UI utility class (modifier).
///
/// This class provides a foundation for creating type-safe utility classes
/// that can be combined with [PrefixModifier]s (e.g., for responsive or state-based styling).
/// It implements [Styling] to be usable in heterogeneous lists of modifiers
/// and [Comparable] to allow sorting of utilities of the same specific type `T`.
///
/// Type parameter:
///   `T`: The concrete type of the utility class itself, enabling fluent chaining
///        methods like `on()` and `at()` to return the correct specific type.
abstract class BaseStyle<T extends BaseStyle<T>>
    implements Styling, Comparable<T> {
  /// Constructs a [BaseStyle].
  ///
  /// [cssClass]: The core CSS class string (e.g., "text-center").
  /// [type]: The [StyleType] categorizing this utility.
  /// [modifiers]: An optional list of [PrefixModifier]s already applied.
  const BaseStyle(this.cssClass, {required this.type, this.modifiers});

  @override
  final String cssClass;

  @override
  final StyleType type;

  @override
  final List<PrefixModifier>? modifiers;

  /// Abstract factory method to create a new instance of this utility class (`T`)
  /// with a given list of [PrefixModifier]s.
  ///
  /// This method must be implemented by concrete subclasses to ensure that
  /// methods like `on()` and `at()` can return the correct specific type `T`.
  T create(List<PrefixModifier> modifiers);

  /// Applies a list of [PrefixModifier]s to this utility class.
  ///
  /// Returns a new instance of `T` with the combined prefixes.
  /// If this utility already has prefixes, the new ones are appended.
  T on(List<PrefixModifier> prefixModifiers) {
    // Ensure existing modifiers are preserved and new ones are added.
    // Handle null or empty existing modifiers.
    final existingModifiers = this.modifiers ?? [];
    return create([...existingModifiers, ...prefixModifiers]);
  }

  /// Applies a single responsive breakpoint [PrefixModifier] to this utility class.
  ///
  /// If the provided [breakpoint] is not of type [PrefixModifierType.breakpoint],
  /// `this` instance is returned unchanged. Otherwise, a new instance of `T`
  /// with the breakpoint prefix applied is returned.
  T at(PrefixModifier breakpoint) {
    if (breakpoint.type == PrefixModifierType.breakpoint) {
      final existingModifiers = this.modifiers ?? [];
      return create([...existingModifiers, breakpoint]);
    }
    // It might be more robust to throw an error or log a warning if a non-breakpoint
    // modifier is passed to `at()`, but returning `this` is also an option.
    // For now, let's assume `at` is strictly for breakpoints.
    return this as T;
  }

  /// Returns the string representation of this utility class, including all applied prefixes.
  /// For example, `hover:md:text-lg`.
  @override
  String toString() {
    if (modifiers == null || modifiers!.isEmpty) {
      return cssClass;
    }
    final prefixesString = modifiers!.map((m) => m.prefix).join();
    return '$prefixesString$cssClass';
  }

  /// Compares this utility class to another of the same type `T`.
  ///
  /// Comparison is based on:
  /// 1. [StyleType] (enum index).
  /// 2. [cssClass] (lexicographically).
  /// 3. Applied [PrefixModifier]s (lexicographically by prefix string, then by count).
  @override
  int compareTo(T other) {
    final typeComparison = type.index.compareTo(other.type.index);
    if (typeComparison != 0) return typeComparison;

    final cssComparison = cssClass.compareTo(other.cssClass);
    if (cssComparison != 0) return cssComparison;

    return _compareModifiers(modifiers, other.modifiers);
  }

  // TODO: PERFORMANCE CRITICAL - Optimize modifier comparison logic
  //
  // Current Issues:
  // 1. O(n) complexity for each comparison iteration, becomes O(n²) when sorting lists
  // 2. Multiple null checks and defensive copying create overhead
  // 3. String-based prefix comparison is expensive for large modifier lists
  // 4. No early termination optimization for obviously different lists
  //
  // Optimization Opportunities:
  // - Cache computed comparison keys (hash-based)
  // - Implement fast-path for common cases (empty lists, length differences)
  // - Consider using Comparable<PrefixModifier> directly instead of string comparison
  // - Pre-sort modifiers at creation time to avoid repeated sorting
  //
  // Performance Impact: High for components with many responsive/state modifiers
  // Priority: Medium (optimize after core functionality is stable)
  //
  // Example hot path: Button with 5+ breakpoint modifiers = 25+ comparisons per render
  /// Helper method to compare lists of [PrefixModifier]s.
  int _compareModifiers(
      List<PrefixModifier>? list1, List<PrefixModifier>? list2) {
    final l1 = list1 ?? [];
    final l2 = list2 ?? [];

    if (l1.isEmpty && l2.isEmpty) return 0;
    if (l1.isEmpty) return -1; // Empty list comes before non-empty
    if (l2.isEmpty) return 1; // Non-empty list comes after empty

    for (var i = 0; i < l1.length && i < l2.length; i++) {
      final comparison = l1[i].prefix.compareTo(l2[i].prefix);
      if (comparison != 0) return comparison;
    }
    return l1.length
        .compareTo(l2.length); // Shorter list comes first if prefixes match
  }
}

<!-- END FILE: packages/deepyr/lib/src/base/base_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/base/common_style.dart -->
import 'base_style.dart';
import 'component_stylings.dart';
import 'style_type.dart';
import 'ui_prefix_modifier.dart';

/// Base class for groups of general utility classes (e.g., `Typography`, `Spacing`, `Effects`).
///
/// These utilities represent common styling patterns applicable across various components.
/// They extend [BaseStyle] to inherit its fluent API for applying [PrefixModifier]s
/// and implement multiple component-specific modifier interfaces.
/// This allows instances of `UtilityGroup` subclasses to be
/// passed to the `modifiers` list of any component that expects its corresponding
/// modifier interface, enabling a flexible and type-safe styling mechanism.
///
/// Type parameter:
///   `T`: The concrete type of the utility group itself (e.g., `Typography` for
///        typography utilities), ensuring methods like `on()` and `at()` return
///        the correct specific type.
abstract class CommonStyle<T extends CommonStyle<T>> extends BaseStyle<T>
    implements AllComponentStylings {
  /// Constructs a [CommonStyle].
  ///
  /// [cssClass]: The core CSS class string (e.g., "text-lg", "mt-4").
  /// [type]: The [StyleType] categorizing this utility (e.g., typography, spacing).
  /// [modifiers]: An optional list of [PrefixModifier]s already applied.
  const CommonStyle(super.cssClass, {required super.type, super.modifiers});

  // The `create(List<PrefixModifier> modifiers)` method must still be
  // implemented by concrete subclasses of UtilityGroup (e.g., Typography, Spacing).
  // Example in a subclass like `Spacing`:
  // @override
  // Spacing create(List<PrefixModifier> modifiers) {
  //   return Spacing(cssClass, modifiers: modifiers);
  // }
}

// Typografie-Gruppe für alle text-bezogenen Stile

// Layout-Gruppe für Positionierung und Anordnung

// Farben und Hintergründe
class Colors extends CommonStyle<Colors> {
  const Colors(super.cssClass, {super.modifiers}) : super(type: StyleType.style);

  static const bgPrimary = Colors('bg-primary');
  static const textPrimary = Colors('text-primary');
  static const borderPrimary = Colors('border-primary');

  @override
  Colors create(List<PrefixModifier> modifiers) {
    // Create a new instance with the original cssClass and new modifiers
    return Colors(cssClass, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/base/common_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/base/component_style.dart -->
import 'base_style.dart';
import 'style_type.dart';
import 'styling.dart';
import 'ui_prefix_modifier.dart';

/// Base class for component-specific utility classes (e.g., `ButtonModifier`).
///
/// These utilities are typically defined within a specific component's file and
/// provide strongly-typed modifiers unique to that component. They extend
/// [BaseStyle] to inherit its fluent API for applying [PrefixModifier]s
/// and to be compatible with systems expecting a [Styling].
///
/// Type parameter:
///   `T`: The concrete type of the component-specific utility itself,
///        ensuring methods like `on()` and `at()` return the correct specific type.
abstract class ComponentStyle<T extends ComponentStyle<T>>
    extends BaseStyle<T> {
  /// Constructs a [ComponentStyle].
  ///
  /// [cssClass]: The core CSS class string (e.g., "btn-primary").
  /// [type]: The [StyleType] categorizing this utility.
  /// [modifiers]: An optional list of [PrefixModifier]s already applied.
  const ComponentStyle(super.cssClass, {required super.type, super.modifiers});

  // The `create` method must still be implemented by concrete subclasses like ButtonModifier,
  // e.g.,
  // @override
  // ButtonModifier create(List<PrefixModifier> modifiers) {
  //   return ButtonModifier(cssClass, type: type, modifiers: modifiers);
  // }
}

<!-- END FILE: packages/deepyr/lib/src/base/component_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/base/component_stylings.dart -->
import '../../deepyr.dart';

mixin AllComponentStylings
    implements
        AccordionStyling,
        AlertStyling,
        AvatarStyling,
        BadgeStyling,
        ButtonStyling,
        BreadcrumbsStyling,
        CardStyling,
        CheckboxStyling,
        CollapseStyling,
        DiffStyling,
        DividerStyling,
        DrawerStyling,
        DropdownStyling,
        DropdownContentStyling,
        FieldsetStyling,
        FileInputStyling,
        FooterStyling,
        FormLabelStyling,
        HeroStyling,
        IconStyling,
        IndicatorStyling,
        IndicatorItemStyling,
        InputStyling,
        JoinStyling,
        KbdStyling,
        LabelStyling,
        LegendStyling,
        LinkStyling,
        LoadingStyling,
        MenuStyling,
        MenuItemStyling,
        ModalStyling,
        NavbarStyling,
        ProgressStyling,
        RadioStyling,
        RangeStyling,
        SelectStyling,
        SkeletonStyling,
        SwapStyling,
        TabsStyling,
        TabStyling,
        TextareaStyling,
        ThemeControllerStyling,
        ToggleStyling,
        TooltipStyling,
        ValidatorHintStyling {
  // Empty mixin - only Interface
}

<!-- END FILE: packages/deepyr/lib/src/base/component_stylings.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/base/style_type.dart -->
/// Enum representing the various types of utility classes available in Ui.
enum StyleType {
  // Core Layout
  layout, // Flexbox, Grid, positioning, display, float
  spacing, // Margin, padding, gap, space-between
  sizing, // Width, height, min/max dimensions
  // Visual Styling
  style, // Colors, background, opacity
  typography, // Font, text properties, whitespace
  border, // Border, outline, divider
  effect, // Shadows, blur, filters
  transform, // Transform, rotate, scale
  animation, // Transitions, animations
  // Behavioral
  state, // Active, hover, focus states
  interactive, // Cursor, pointer-events, scroll
  accessibility, // Screen readers, visibility, focus
  // Special Cases
  form, // Form-specific styles
  table, // Table-specific layouts
  utility, // Miscellaneous utilities

  additional,
}

<!-- END FILE: packages/deepyr/lib/src/base/style_type.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/base/styling.dart -->
import 'style_type.dart';
import 'ui_component.dart';
import 'ui_prefix_modifier.dart';

/// A base interface for all UI utility classes (modifiers).
///
/// This class defines the common contract for utility classes, allowing them to be
/// used polymorphically, for example, in a list of modifiers for a [UiComponent].
/// It ensures that every utility class can provide its CSS class string, its type,
/// and any applied prefix modifiers.
abstract interface class Styling {
  /// The core CSS class name of this utility (e.g., "btn-primary", "text-lg").
  /// This does not include any [PrefixModifier]s.
  String get cssClass;

  /// The category or type of this utility class (e.g., sizing, layout, style).
  StyleType get type;

  /// An optional list of [PrefixModifier]s (like 'hover:', 'md:') applied to this utility.
  /// Returns `null` or an empty list if no prefixes are applied.
  List<PrefixModifier>? get modifiers;

  /// Returns the string representation of this utility class, including any
  /// applied [PrefixModifier]s.
  /// For example, if `cssClass` is "text-blue-500" and `modifiers` contains
  /// a `hover` prefix, this might return "hover:text-blue-500".
  @override
  String toString();
}

<!-- END FILE: packages/deepyr/lib/src/base/styling.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/base/styling_extensions.dart -->
import 'styling.dart';

/// Extension methods for working with Deepyr UI utility groups.
extension DeepyrUtilityGroupIterableExtensions on Iterable<Styling> {
  /// Converts an iterable of [Styling] instances (general utilities like
  /// Spacing, Layout, TextUtil) into a single, space-separated string of CSS
  /// class names.
  ///
  /// This is useful for applying general Deepyr utility modifiers to standard Jaspr
  /// DOM components that accept a `classes` string.
  ///
  /// Example:
  /// ```dart
  /// import 'package:deepyr/deepyr.dart';
  ///
  /// final utilities = [Spacing.mt(4), TextUtil.center];
  /// div(classes: utilities.toClasses(), [text('Hello')]);
  /// ```
  ///
  /// **Note:** This extension is intended for general utilities (`UtilityGroup`)
  /// and not for component-specific modifiers (like `Button.primary`).
  /// Component-specific modifiers should be passed to the `modifiers` property
  /// of Deepyr components.
  String toClasses() {
    // .toString() auf UtilityGroup gibt den korrekten Klassennamen zurück.
    return map(
      (utility) => utility.toString(),
    ).where((s) => s.isNotEmpty).join(' ');
  }
}

// Extension for a nullable iterable
extension DeepyrNullableUtilityGroupIterableExtensions on Iterable<Styling>? {
  /// Converts an iterable of [Styling] instances into a single,
  /// space-separated string of CSS class names.
  /// Returns an empty string if the iterable is null or empty.
  String toClasses() {
    if (this == null) return '';
    return this!
        .map((utility) => utility.toString())
        .where((s) => s.isNotEmpty)
        .join(' ');
  }
}

/// Extension methods for a single Deepyr UI utility class.
extension DeepyrStylingExtensions on Styling {
  /// Converts a single [Styling] instance into its CSS class string.
  ///
  /// While `toString()` already does this, this extension provides a more
  /// explicit method name if preferred for clarity in certain contexts,
  /// especially when dealing with potentially nullable utilities.
  ///
  /// Example:
  /// ```dart
  /// final utility = Spacing.mt(4);
  /// div(classes: utility.asClass(), [text('Hello')]);
  /// ```
  String asClass() {
    return toString();
  }
}

<!-- END FILE: packages/deepyr/lib/src/base/styling_extensions.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/base/ui_component.dart -->
import 'package:jaspr/jaspr.dart';
import 'package:universal_web/web.dart';

import 'styling.dart';
import 'ui_component_attributes.dart';
import 'ui_events.dart';

// UtilityClassType might be needed if configureAttributes makes decisions based on modifier types
// import 'ui_utility_class_type.dart';

/// Base class for all UI components in the `deepyr` library.
///
/// This class provides common functionality for HTML tag rendering, styling (via CSS classes,
/// inline styles, and utility modifiers), attribute management, and event handling.
/// It is designed to be extended by concrete UI components like buttons, cards, etc.
///
/// Components extending [UiComponent] must implement the [baseClass] getter,
/// and can optionally override [configureAttributes] to define component-specific
/// HTML attributes.
@immutable
abstract class UiComponent extends StatelessComponent {
  /// Creates a [UiComponent].
  ///
  /// - [children] or [child]: The content to render within this component.
  ///   Only one of [children] or [child] should be provided.
  /// - [tag]: The HTML tag for the root element of this component (e.g., "div", "button").
  /// - [style]: A list of [Styling] instances (general or component-specific
  ///   utility classes) to apply for styling.
  /// - [id]: The HTML ID for the root element. This is passed directly to the underlying [DomComponent].
  /// - [classes]: A string of additional space-separated CSS classes to apply.
  /// - [css]: Inline CSS styles to apply to the root element.
  /// - [attributes]: A map of user-provided HTML attributes. These will be merged with
  ///   attributes configured by the component, with user-provided ones taking precedence.
  /// - Event handlers like [onClick], [onInput], etc., for common DOM events.
  /// - [eventHandlers]: A map for custom or less common event handlers.
  /// - [key]: A [Key] for Jaspr's reconciliation algorithm.
  const UiComponent(
    this.children, {
    required this.tag,
    this.style,
    this.id,
    this.classes,
    this.css,
    Map<String, String>? attributes,
    this.child,
    this.onMouseEnter,
    this.onMouseLeave,
    this.onKeyDown,
    this.onKeyUp,
    this.onClick,
    this.onInput,
    this.onChange,
    Map<String, List<UiEventHandler>>? eventHandlers,
    super.key,
  }) : _userProvidedAttributes = attributes,
       eventHandlers = eventHandlers ?? const <String, List<UiEventHandler>>{},
       assert(
         !(child != null && children != null),
         'Either child or children must be provided, but not both.',
       );

  /// Creates a copy of this component with the given fields replaced with new values.
  ///
  /// This method is primarily used by container components (e.g., `Join`) to apply
  /// generic DOM attributes to their children programmatically.
  ///
  /// It intentionally omits component-specific properties (like `children`, `tag`,
  /// or the strongly-typed `style` list) to preserve the child's original
  /// identity and type safety. A parent should only modify a child's
  /// outer attributes, not its core content or specialized behavior.
  ///
  /// @param id The new HTML ID for the component.
  /// @param classes Additional CSS classes to **merge** with any existing classes.
  /// @param css The new inline CSS styles.
  /// @param attributes A new map of user-provided HTML attributes.
  /// @param key A new [Key] for Jaspr's reconciliation algorithm.
  ///
  /// @return A new instance of the component with the updated properties.
  UiComponent copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  });

  /// The HTML tag for the root element of this component.
  final String tag;

  /// A list of utility classes to apply for styling.
  /// These can be general utilities (like Spacing, Typography) or component-specific ones.
  final List<Styling>? style;

  /// The HTML ID for the root element.
  final String? id;

  /// Additional space-separated CSS classes to apply to the root element.
  final String? classes;

  /// Inline CSS styles for the root element.
  final Styles? css;

  /// User-provided HTML attributes. These are merged with component-defined attributes,
  /// with these taking precedence in case of conflicts.
  final Map<String, String>? _userProvidedAttributes;

  /// A single child component. Use this or [children], but not both.
  final Component? child;

  /// A list of child components. Use this or [child], but not both.
  final List<Component>? children;

  // --- Event Handlers ---
  /// Callback for the 'mouseenter' DOM event.
  final UiMouseEventHandler? onMouseEnter;

  /// Callback for the 'mouseleave' DOM event.
  final UiMouseEventHandler? onMouseLeave;

  /// Callback for the 'keydown' DOM event.
  final UiKeyboardEventHandler? onKeyDown;

  /// Callback for the 'keyup' DOM event.
  final UiKeyboardEventHandler? onKeyUp;

  /// Callback for the 'click' DOM event.
  final UiMouseEventHandler? onClick;

  /// Callback for the 'input' DOM event.
  final UiInputEventHandler? onInput;

  /// Callback for the 'change' DOM event.
  final UiInputEventHandler? onChange;

  /// A map for custom or less common event handlers.
  /// The key is the event name (e.g., "focus", "blur"), and the value is a list of handlers.
  final Map<String, List<UiEventHandler>> eventHandlers;

  /// Gets the base CSS class for this component (e.g., "btn" for a button).
  ///
  /// This class is fundamental to the component's DaisyUI styling.
  /// Must be implemented by concrete subclasses. If a component has no
  /// specific base class (e.g., a generic `<div>` wrapper), this can return an empty string.
  String get baseClass;

  /// Gets the attributes directly provided by the user when the component was instantiated.
  /// Returns an empty map if no attributes were provided.
  @protected
  Map<String, String> get userProvidedAttributes =>
      _userProvidedAttributes ?? const <String, String>{};

  /// Computes the combined string of CSS classes to be applied to the component.
  ///
  /// This includes the [baseClass], classes derived from [style],
  /// and any explicitly provided [classes].
  String get combinedClasses {
    // Convert each modifier in the list to its string representation (which includes prefixes)
    final utilityClasses = style?.map((Styling m) => m.toString()).join(' ') ?? '';
    return <String>[
      baseClass,
      utilityClasses,
      classes ?? '',
    ].where((String c) => c.isNotEmpty).join(' ');
  }

  /// Merges two CSS class strings, safely handling null or empty inputs.
  ///
  /// This utility is used internally by components (e.g., in `copyWith` or by
  /// a parent like `Join`) to add programmatic classes without overwriting
  /// any classes already provided by the user.
  @protected
  String? mergeClasses(String? originalClasses, String? newClasses) {
    if (originalClasses == null || originalClasses.isEmpty) {
      return newClasses;
    }
    if (newClasses == null || newClasses.isEmpty) {
      return originalClasses;
    }
    return '$originalClasses $newClasses';
  }

  /// Constructs the map of event handlers for the [DomComponent].
  Map<String, EventCallback> get events {
    final eventMap = <String, EventCallback>{};

    // Standard mouse events
    if (onMouseEnter != null) {
      eventMap['mouseenter'] = (dynamic rawEvent) => onMouseEnter!(rawEvent as MouseEvent);
    }
    if (onMouseLeave != null) {
      eventMap['mouseleave'] = (dynamic rawEvent) => onMouseLeave!(rawEvent as MouseEvent);
    }
    if (onClick != null) {
      eventMap['click'] = (dynamic rawEvent) => onClick!(rawEvent as MouseEvent);
    }

    // Standard keyboard events
    if (onKeyDown != null) {
      eventMap['keydown'] = (dynamic rawEvent) => onKeyDown!(rawEvent as KeyboardEvent);
    }
    if (onKeyUp != null) {
      eventMap['keyup'] = (dynamic rawEvent) => onKeyUp!(rawEvent as KeyboardEvent);
    }

    // Standard input/change events (assuming they pass a String value from Jaspr)
    if (onInput != null) {
      eventMap['input'] = (dynamic rawEvent) => onInput!(rawEvent as String);
    }
    if (onChange != null) {
      eventMap['change'] = (dynamic rawEvent) => onChange!(rawEvent as String);
    }

    // Custom event handlers
    for (final entry in eventHandlers.entries) {
      final eventName = entry.key;
      final handlers = entry.value;

      eventMap[eventName] = (dynamic rawEvent) {
        // Attempt to cast to a more specific event type based on common event names
        // This provides better type safety for handlers if they expect specific event properties.
        final event = switch (eventName) {
          'click' ||
          'mousedown' ||
          'mouseup' ||
          'mousemove' ||
          'mouseenter' ||
          'mouseleave' => rawEvent as MouseEvent,
          'keydown' || 'keyup' || 'keypress' => rawEvent as KeyboardEvent,
          'focus' || 'blur' => rawEvent as Event,
          'submit' => rawEvent as Event,
          'input' || 'change' => Event(rawEvent as String),
          _ => rawEvent as Event,
        };

        for (final handler in handlers) {
          handler(event);
        }
      };
    }
    return eventMap;
  }

  /// Configures component-specific HTML attributes.
  ///
  /// Subclasses should override this method to add their default or computed
  /// attributes (e.g., `role`, `type`, `aria-*`, `data-*`) using the provided
  /// [attributes] builder.
  ///
  /// This method is called internally when the [componentAttributes] getter is accessed.
  /// Attributes added here can be overridden by user-provided attributes.
  ///
  /// Example:
  /// ```dart
  /// @override
  /// void configureAttributes(UiComponentAttributes attributes) {
  ///   super.configureAttributes(attributes); // Good practice
  ///   attributes.addRole('button');
  ///   if (isToggle) {
  ///     attributes.addAria('pressed', isPressed.toString());
  ///   }
  /// }
  /// ```
  @protected
  void configureAttributes(UiComponentAttributes attributes) {
    // Base implementation is empty.
    // Subclasses override to add their specific attributes.
    // Consider calling super.configureAttributes(attributes) in overrides
    // if this base class ever adds default attributes.
  }

  /// Gets the map of HTML attributes for this component.
  /// (component-defined and user-provided).
  ///
  /// The `id` is handled separately and passed directly to [DomComponent].
  /// This getter orchestrates the collection of attributes by:
  /// 1. Calling [configureAttributes] to allow the component to define its specific attributes.
  /// 2. Merging any [_userProvidedAttributes], which will override any identically named
  ///    attributes set by [configureAttributes].
  Map<String, String> get componentAttributes {
    final builder = UiComponentAttributes();

    // 1. Allow the concrete component to configure its specific attributes.
    configureAttributes(builder);

    // 2. Merge user-provided attributes. These take precedence.
    if (_userProvidedAttributes != null) {
      builder.merge(_userProvidedAttributes);
    }

    return builder.build();
  }

  @override
  Component build(BuildContext context) {
    return Component.element(
      tag: tag,
      id: id,
      classes: combinedClasses,
      styles: css,
      attributes: componentAttributes,
      events: events,
      children: children ?? [?child],
    );
  }
}

<!-- END FILE: packages/deepyr/lib/src/base/ui_component.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/base/ui_component_attributes.dart -->
/// A builder class for creating a map of HTML attributes.
///
/// This utility helps in constructing the `Map<String, String>` of attributes
/// that can be passed to UI components. It provides convenient methods for adding
/// common types of attributes, such as standard HTML attributes, ARIA attributes,
/// and data attributes.
///
/// Example:
/// ```dart
/// final attributesBuilder = UiComponentAttributes()
///   ..add('tabindex', '0')
///   ..addAria('label', 'Close button')
///   ..addData('testid', 'submit-action')
///   ..addRole('button');
///
/// final Map<String, String> htmlAttributes = attributesBuilder.build();
/// ```
class UiComponentAttributes {
  /// Creates an instance of [UiComponentAttributes].
  ///
  /// An optional [initialAttributes] map can be provided to pre-populate
  /// the builder.
  UiComponentAttributes([Map<String, String>? initialAttributes])
    : _attributes = initialAttributes != null ? Map.from(initialAttributes) : <String, String>{};
  final Map<String, String> _attributes;

  /// Adds a standard HTML attribute.
  ///
  /// If an attribute with the same [name] already exists, its value will be overwritten.
  ///
  /// [name]: The name of the attribute (e.g., "href", "target").
  /// [value]: The value of the attribute.
  void add(String name, String value) {
    _attributes[name] = value;
  }

  /// Adds a standard HTML attribute only if the [condition] is true.
  ///
  /// If an attribute with the same [name] already exists and the condition is true,
  /// its value will be overwritten.
  ///
  /// [condition]: The boolean condition that determines if the attribute is added.
  /// [name]: The name of the attribute.
  /// [value]: The value of the attribute.
  void addIf(bool condition, String name, String value) {
    if (condition) {
      _attributes[name] = value;
    }
  }

  /// Adds an ARIA (Accessible Rich Internet Applications) attribute.
  /// The 'aria-' prefix will be automatically prepended to the [name].
  ///
  /// Example: `addAria('label', 'Description')` results in `aria-label="Description"`.
  /// If an attribute with the same 'aria-[name]' already exists, its value will be overwritten.
  ///
  /// [name]: The ARIA attribute name without the 'aria-' prefix (e.g., "label", "hidden").
  /// [value]: The value of the ARIA attribute.
  void addAria(String name, String value) {
    _attributes['aria-$name'] = value;
  }

  /// Adds a custom data attribute.
  /// The 'data-' prefix will be automatically prepended to the [name].
  ///
  /// Example: `addData('testid', 'user-profile')` results in `data-testid="user-profile"`.
  /// If an attribute with the same 'data-[name]' already exists, its value will be overwritten.
  ///
  /// [name]: The data attribute name without the 'data-' prefix (e.g., "testid", "custom-value").
  /// [value]: The value of the data attribute.
  void addData(String name, String value) {
    _attributes['data-$name'] = value;
  }

  /// Adds or updates the 'role' ARIA attribute.
  /// This is a convenience method for `addAttribute('role', role)`.
  ///
  /// [role]: The ARIA role value (e.g., "button", "navigation", "dialog").
  void addRole(String role) {
    _attributes['role'] = role;
  }

  /// Merges another map of attributes into the current set.
  ///
  /// Attributes from the [other] map will be added. If an attribute name
  /// exists in both the current set and the [other] map, the value from
  /// the [other] map will overwrite the existing value.
  ///
  /// If [other] is null, no changes are made.
  void merge(Map<String, String>? other) {
    if (other != null) {
      _attributes.addAll(other);
    }
  }

  /// Builds and returns an unmodifiable map of the configured attributes.
  ///
  /// This prevents accidental modification of the attribute map after it has been built.
  Map<String, String> build() {
    return Map.unmodifiable(_attributes);
  }

  /// Returns `true` if no attributes have been added.
  bool get isEmpty => _attributes.isEmpty;

  /// Returns `true` if at least one attribute has been added.
  bool get isNotEmpty => _attributes.isNotEmpty;
}

<!-- END FILE: packages/deepyr/lib/src/base/ui_component_attributes.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/base/ui_events.dart -->
import 'package:jaspr/jaspr.dart';
import 'package:universal_web/web.dart';

// Event handler type definitions
// These type definitions ensure that we use the same types everywhere
typedef UiMouseEventHandler = void Function(MouseEvent event);
typedef UiKeyboardEventHandler = void Function(KeyboardEvent event);
typedef UiInputEventHandler = void Function(String value);
typedef UiEventHandler = void Function(Event event);

/// Base class for event data
@immutable
class UiEventData {
  const UiEventData({required this.originalEvent, required this.target, this.detail = const <String, Object>{}});
  final Event originalEvent;
  final Object target;
  final Map<String, Object> detail;
}

@immutable
class UiMouseEventData extends UiEventData {
  const UiMouseEventData({
    required super.originalEvent,
    required super.target,
    required this.clientX,
    required this.clientY,
    required this.ctrlKey,
    required this.shiftKey,
    super.detail,
  });

  // Factory method with the proper property names
  factory UiMouseEventData.fromEvent(MouseEvent event, Object target) {
    return UiMouseEventData(
      originalEvent: event,
      target: target,
      clientX: event.clientX,
      clientY: event.clientY,
      ctrlKey: event.ctrlKey,
      shiftKey: event.shiftKey,
    );
  }
  final num clientX;
  final num clientY;
  final bool ctrlKey;
  final bool shiftKey;
}

@immutable
class UiKeyboardEventData extends UiEventData {
  const UiKeyboardEventData({
    required super.originalEvent,
    required super.target,
    required this.key,
    required this.ctrlKey,
    required this.shiftKey,
    super.detail,
  });

  // Factory method with the proper property names
  factory UiKeyboardEventData.fromEvent(KeyboardEvent event, Object target) {
    return UiKeyboardEventData(
      originalEvent: event,
      target: target,
      key: event.key,
      ctrlKey: event.ctrlKey,
      shiftKey: event.shiftKey,
    );
  }
  final String key;
  final bool ctrlKey;
  final bool shiftKey;
}

EventCallback createEventHandler(void Function(Event event) handler) {
  return (dynamic rawEvent) {
    final Event event = rawEvent as Event;
    handler(event);
  };
}

EventCallback createMouseEventHandler(void Function(MouseEvent event) handler) {
  return (dynamic rawEvent) {
    final MouseEvent event = rawEvent as MouseEvent;
    handler(event);
  };
}

<!-- END FILE: packages/deepyr/lib/src/base/ui_events.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/base/ui_prefix_modifier.dart -->
// Pseudo-class styling based on parent state
// Styling based on sibling state (peer-{modifier})
// https://tailwindcss.com/docs/hover-focus-and-other-states#styling-based-on-parent-state

import 'base_style.dart';

enum PrefixModifierType {
  breakpoint,
  pseudoClass,
  darkMode,
  variant,
  orientation,
}

/// Representing the Tailwind CSS prefix modifiers.
class PrefixModifier {
  const PrefixModifier(this._prefix, this.type);
  final String _prefix;
  final PrefixModifierType type;

  String get prefix => '$_prefix:';
}

enum Is implements PrefixModifier {
  /// Hover pseudo-class
  hover('hover', PrefixModifierType.pseudoClass),

  /// Focus pseudo-class
  focus('focus', PrefixModifierType.pseudoClass),

  /// Active pseudo-class
  active('active', PrefixModifierType.pseudoClass),

  /// First pseudo-class
  first('first', PrefixModifierType.pseudoClass),

  /// Last pseudo-class
  last('last', PrefixModifierType.pseudoClass),

  /// Odd pseudo-class
  odd('odd', PrefixModifierType.pseudoClass),

  /// Even pseudo-class
  even('even', PrefixModifierType.pseudoClass),

  /// Form state required
  required('required', PrefixModifierType.pseudoClass),

  /// Form state invalid
  invalid('invalid', PrefixModifierType.pseudoClass),

  /// Form state disabled
  disabled('disabled', PrefixModifierType.pseudoClass),

  /// ::before pseudo-element
  before('before', PrefixModifierType.pseudoClass),

  /// ::after pseudo-element
  after('after', PrefixModifierType.pseudoClass),

  /// ::placeholder pseudo-element
  placeholder('placeholder', PrefixModifierType.pseudoClass),

  /// ::file
  file('file', PrefixModifierType.pseudoClass),

  /// ::marker
  marker('marker', PrefixModifierType.pseudoClass),

  /// ::selection
  selection('selection', PrefixModifierType.pseudoClass),

  /// ::first-letter
  firstLetter('first-letter', PrefixModifierType.pseudoClass),

  /// ::first-line
  firstLine('first-line', PrefixModifierType.pseudoClass),

  /// ::backdrop
  backdrop('backdrop', PrefixModifierType.pseudoClass);

  @override
  final String _prefix;

  @override
  final PrefixModifierType type;

  @override
  String get prefix => '$_prefix:';

  const Is(this._prefix, this.type);
}

// TODO Container queries @container @md:flex-row
// https://tailwindcss.com/docs/responsive-design#container-queries
enum Breakpoint implements PrefixModifier {
  /// Small breakpoint
  sm('sm', PrefixModifierType.breakpoint),

  /// Medium breakpoint
  md('md', PrefixModifierType.breakpoint),

  /// Large breakpoint
  lg('lg', PrefixModifierType.breakpoint),

  /// Extra large breakpoint
  xl('xl', PrefixModifierType.breakpoint),

  /// 2xl breakpoint
  xl2('2xl', PrefixModifierType.breakpoint);

  @override
  final String _prefix;

  @override
  final PrefixModifierType type;

  @override
  String get prefix => '$_prefix:';

  const Breakpoint(this._prefix, this.type);
}

mixin Breakpoints<T extends BaseStyle<T>> on BaseStyle<T> {
  T get atSm => at(Breakpoint.sm);
  T get atMd => at(Breakpoint.md);
  T get atLg => at(Breakpoint.lg);
  T get atXl => at(Breakpoint.xl);
  T get at2xl => at(Breakpoint.xl2);
}

enum Theme implements PrefixModifier {
  /// Dark mode
  dark('dark', PrefixModifierType.darkMode);

  @override
  final String _prefix;

  @override
  final PrefixModifierType type;

  @override
  String get prefix => '$_prefix:';

  const Theme(this._prefix, this.type);
}

enum Media implements PrefixModifier {
  /// motion-reduce
  motionReduce('motion-reduce', PrefixModifierType.variant),

  /// motion-safe
  motionSafe('motion-safe', PrefixModifierType.variant),

  /// contrast-more
  contrastMore('contrast-more', PrefixModifierType.variant),

  /// contrast-less
  contrastLess('contrast-less', PrefixModifierType.variant),

  /// forced-colors
  forcedColors('forced-colors', PrefixModifierType.variant),

  // not-forced-colors
  notForcedColors('not-forced-colors', PrefixModifierType.variant),

  /// Landscape orientation
  landscape('landscape', PrefixModifierType.orientation),

  /// Portrait orientation
  portrait('portrait', PrefixModifierType.orientation),

  /// print
  print('print', PrefixModifierType.variant);

  // TODO @supports
  // https://tailwindcss.com/docs/hover-focus-and-other-states#supports

  // TODO @starting-style
  // https://tailwindcss.com/docs/hover-focus-and-other-states#starting-style

  @override
  final String _prefix;

  @override
  final PrefixModifierType type;

  @override
  String get prefix => '$_prefix:';

  const Media(this._prefix, this.type);
}

<!-- END FILE: packages/deepyr/lib/src/base/ui_prefix_modifier.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/base/utilities/alignment.dart -->
import '../common_style.dart';
import '../style_type.dart';
import '../ui_prefix_modifier.dart';

/// A utility class for applying alignment styles to flexbox and grid layouts.
///
/// This includes utilities for justifying and aligning content and items along both
/// the main and cross axes.
class Alignment extends CommonStyle<Alignment> {
  const Alignment(super.cssClass, {super.modifiers}) : super(type: StyleType.layout);

  // --- Justify Content ---
  // Controls how flex and grid items are positioned along the container's main axis.

  /// `justify-content: flex-start`
  static const Alignment justifyStart = Alignment('justify-start');

  /// `justify-content: flex-end`
  static const Alignment justifyEnd = Alignment('justify-end');

  /// `justify-content: center`
  static const Alignment justifyCenter = Alignment('justify-center');

  /// `justify-content: space-between`
  static const Alignment justifyBetween = Alignment('justify-between');

  /// `justify-content: space-around`
  static const Alignment justifyAround = Alignment('justify-around');

  /// `justify-content: space-evenly`
  static const Alignment justifyEvenly = Alignment('justify-evenly');

  /// `justify-content: stretch`
  static const Alignment justifyStretch = Alignment('justify-stretch');

  // --- Justify Items ---
  // Controls how grid items are aligned along their inline (main) axis.

  /// `justify-items: start`
  static const Alignment justifyItemsStart = Alignment('justify-items-start');

  /// `justify-items: end`
  static const Alignment justifyItemsEnd = Alignment('justify-items-end');

  /// `justify-items: center`
  static const Alignment justifyItemsCenter = Alignment('justify-items-center');

  /// `justify-items: stretch`
  static const Alignment justifyItemsStretch = Alignment('justify-items-stretch');

  // --- Justify Self ---
  // Controls how an individual grid item is aligned along its inline (main) axis.

  /// `justify-self: auto`
  static const Alignment justifySelfAuto = Alignment('justify-self-auto');

  /// `justify-self: start`
  static const Alignment justifySelfStart = Alignment('justify-self-start');

  /// `justify-self: end`
  static const Alignment justifySelfEnd = Alignment('justify-self-end');

  /// `justify-self: center`
  static const Alignment justifySelfCenter = Alignment('justify-self-center');

  /// `justify-self: stretch`
  static const Alignment justifySelfStretch = Alignment('justify-self-stretch');

  // --- Align Content ---
  // Controls how lines are packed in a multi-line flex or grid container.

  /// `align-content: center`
  static const Alignment contentCenter = Alignment('content-center');

  /// `align-content: flex-start`
  static const Alignment contentStart = Alignment('content-start');

  /// `align-content: flex-end`
  static const Alignment contentEnd = Alignment('content-end');

  /// `align-content: space-between`
  static const Alignment contentBetween = Alignment('content-between');

  /// `align-content: space-around`
  static const Alignment contentAround = Alignment('content-around');

  /// `align-content: space-evenly`
  static const Alignment contentEvenly = Alignment('content-evenly');

  /// `align-content: baseline`
  static const Alignment contentBaseline = Alignment('content-baseline');

  /// `align-content: stretch`
  static const Alignment contentStretch = Alignment('content-stretch');

  // --- Align Items ---
  // Controls how flex and grid items are positioned along the container's cross axis.

  /// `align-items: flex-start`
  static const Alignment itemsStart = Alignment('items-start');

  /// `align-items: flex-end`
  static const Alignment itemsEnd = Alignment('items-end');

  /// `align-items: center`
  static const Alignment itemsCenter = Alignment('items-center');

  /// `align-items: baseline`
  static const Alignment itemsBaseline = Alignment('items-baseline');

  /// `align-items: stretch`
  static const Alignment itemsStretch = Alignment('items-stretch');

  // --- Align Self ---
  // Controls how an individual flex or grid item is aligned along its cross axis.

  /// `align-self: auto`
  static const Alignment alignSelfAuto = Alignment('self-auto');

  /// `align-self: flex-start`
  static const Alignment alignSelfStart = Alignment('self-start');

  /// `align-self: flex-end`
  static const Alignment alignSelfEnd = Alignment('self-end');

  /// `align-self: center`
  static const Alignment alignSelfCenter = Alignment('self-center');

  /// `align-self: stretch`
  static const Alignment alignSelfStretch = Alignment('self-stretch');

  /// `align-self: baseline`
  static const Alignment alignSelfBaseline = Alignment('self-baseline');

  // --- Place Content ---
  // A shorthand for setting both `align-content` and `justify-content`.

  /// `place-content: center`
  static const Alignment placeContentCenter = Alignment('place-content-center');

  /// `place-content: start`
  static const Alignment placeContentStart = Alignment('place-content-start');

  /// `place-content: end`
  static const Alignment placeContentEnd = Alignment('place-content-end');

  /// `place-content: space-between`
  static const Alignment placeContentBetween = Alignment('place-content-between');

  /// `place-content: space-around`
  static const Alignment placeContentAround = Alignment('place-content-around');

  /// `place-content: space-evenly`
  static const Alignment placeContentEvenly = Alignment('place-content-evenly');

  /// `place-content: baseline`
  static const Alignment placeContentBaseline = Alignment('place-content-baseline');

  /// `place-content: stretch`
  static const Alignment placeContentStretch = Alignment('place-content-stretch');

  // --- Place Items ---
  // A shorthand for setting both `align-items` and `justify-items`.

  /// `place-items: start`
  static const Alignment placeItemsStart = Alignment('place-items-start');

  /// `place-items: end`
  static const Alignment placeItemsEnd = Alignment('place-items-end');

  /// `place-items: center`
  static const Alignment placeItemsCenter = Alignment('place-items-center');

  /// `place-items: baseline`
  static const Alignment placeItemsBaseline = Alignment('place-items-baseline');

  /// `place-items: stretch`
  static const Alignment placeItemsStretch = Alignment('place-items-stretch');

  // --- Place Self ---
  // A shorthand for setting both `align-self` and `justify-self` for an individual item.

  /// `place-self: auto`
  static const Alignment placeSelfAuto = Alignment('place-self-auto');

  /// `place-self: start`
  static const Alignment placeSelfStart = Alignment('place-self-start');

  /// `place-self: end`
  static const Alignment placeSelfEnd = Alignment('place-self-end');

  /// `place-self: center`
  static const Alignment placeSelfCenter = Alignment('place-self-center');

  /// `place-self: stretch`
  static const Alignment placeSelfStretch = Alignment('place-self-stretch');

  @override
  Alignment create(List<PrefixModifier> modifiers) {
    return Alignment(cssClass, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/base/utilities/alignment.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/base/utilities/bg_util.dart -->
import '../common_style.dart';
import '../style_type.dart' show StyleType;
import '../ui_prefix_modifier.dart';

class BgUtil extends CommonStyle<BgUtil> {
  const BgUtil(super.cssClass, {super.modifiers}) : super(type: StyleType.style);

  /// Creates a background opacity utility. `bg-opacity-{value}`
  ///
  /// [value]: The opacity percentage. Must be between 0 and 100,
  /// and a multiple of 5 (e.g., 0, 5, 10, ..., 95, 100).
  const BgUtil.opacity(int value)
      : assert(
          value >= 0 && value <= 100 && value % 5 == 0,
          'Opacity value must be between 0 and 100, in steps of 5.',
        ),
        super('bg-opacity-$value', type: StyleType.style);

  // Background colors
  static const BgUtil base100 = BgUtil('bg-base-100');
  static const BgUtil base200 = BgUtil('bg-base-200');
  static const BgUtil base300 = BgUtil('bg-base-300');
  static const BgUtil primary = BgUtil('bg-primary');
  static const BgUtil secondary = BgUtil('bg-secondary');
  static const BgUtil neutral = BgUtil('bg-neutral');

  // Background opacity
  static const BgUtil opacity75 = BgUtil('bg-opacity-75');
  static const BgUtil opacity60 = BgUtil('bg-opacity-60');
  static const BgUtil opacity50 = BgUtil('bg-opacity-50');
  static const BgUtil opacity25 = BgUtil('bg-opacity-25');
  static const BgUtil opacity0 = BgUtil('bg-opacity-0');

  // Background position
  static const BgUtil fixed = BgUtil('bg-fixed');
  static const BgUtil local = BgUtil('bg-local');

  @override
  BgUtil create(List<PrefixModifier> modifiers) {
    // Create a new instance with the original cssClass and new modifiers
    return BgUtil(cssClass, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/base/utilities/bg_util.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/base/utilities/border_util.dart -->
import '../common_style.dart';
import '../style_type.dart';
import '../ui_prefix_modifier.dart';

/// A utility class for applying border styles.
///
/// This includes utilities for setting border width, color, style, and radius.
class BorderUtil extends CommonStyle<BorderUtil> {
  const BorderUtil(super.cssClass, {super.modifiers}) : super(type: StyleType.border);

  @override
  BorderUtil create(List<PrefixModifier> modifiers) {
    return BorderUtil(cssClass, modifiers: modifiers);
  }

  // --- Border Width ---
  /// `border-width: 1px`. The most common border.
  static const BorderUtil border = BorderUtil('border');

  /// `border-width: 0px`.
  static const BorderUtil border0 = BorderUtil('border-0');

  /// `border-width: 2px`.
  static const BorderUtil border2 = BorderUtil('border-2');

  /// `border-width: 4px`.
  static const BorderUtil border4 = BorderUtil('border-4');

  /// `border-width: 8px`.
  static const BorderUtil border8 = BorderUtil('border-8');

  // --- Border Color (From DaisyUI Theme) ---
  /// `border-color: primary`.
  static const BorderUtil primary = BorderUtil('border-primary');

  /// `border-color: primary-content`.
  static const BorderUtil primaryContent = BorderUtil('border-primary-content');

  /// `border-color: secondary`.
  static const BorderUtil secondary = BorderUtil('border-secondary');

  /// `border-color: accent`.
  static const BorderUtil accent = BorderUtil('border-accent');

  /// `border-color: neutral`.
  static const BorderUtil neutral = BorderUtil('border-neutral');

  /// `border-color: base-100`.
  static const BorderUtil base100 = BorderUtil('border-base-100');

  /// `border-color: base-200`.
  static const BorderUtil base200 = BorderUtil('border-base-200');

  /// `border-color: base-300`. **This is the one you asked about.**
  static const BorderUtil base300 = BorderUtil('border-base-300');

  /// `border-color: info`.
  static const BorderUtil info = BorderUtil('border-info');

  /// `border-color: success`.
  static const BorderUtil success = BorderUtil('border-success');

  /// `border-color: warning`.
  static const BorderUtil warning = BorderUtil('border-warning');

  /// `border-color: error`.
  static const BorderUtil error = BorderUtil('border-error');

  // --- Border Style ---
  /// `border-style: solid`.
  static const BorderUtil solid = BorderUtil('border-solid');

  /// `border-style: dashed`.
  static const BorderUtil dashed = BorderUtil('border-dashed');

  /// `border-style: dotted`.
  static const BorderUtil dotted = BorderUtil('border-dotted');

  /// `border-style: double`.
  static const BorderUtil double = BorderUtil('border-double');

  /// `border-style: none`.
  static const BorderUtil none = BorderUtil('border-none');

  // Note: Border radius is correctly handled by the `Effects` utility
  // (e.g., `Effects.rounded`, `Effects.roundedBox`) as it relates to
  // clipping and visual effects, not just the border property itself.
}

<!-- END FILE: packages/deepyr/lib/src/base/utilities/border_util.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/base/utilities/effects.dart -->
import '../common_style.dart';
import '../style_type.dart';
import '../ui_prefix_modifier.dart';

class Effects extends CommonStyle<Effects> {
  const Effects(super.cssClass, {super.modifiers}) : super(type: StyleType.effect);

  @override
  Effects create(List<PrefixModifier> modifiers) {
    return Effects(cssClass, modifiers: modifiers);
  }

  // --- DaisyUI Specific Effects ---
  /// Glassmorphism effect. `glass` (This is a DaisyUI utility)
  static const Effects glass = Effects('glass');

  // --- Shadow ---
  static const Effects shadowXs = Effects('shadow-xs');
  static const Effects shadowSm = Effects('shadow-sm');
  static const Effects shadow = Effects('shadow');
  static const Effects shadowMd = Effects('shadow-md');
  static const Effects shadowLg = Effects('shadow-lg');
  static const Effects shadowXl = Effects('shadow-xl');
  static const Effects shadow2xl = Effects('shadow-2xl');
  static const Effects shadowInner = Effects('shadow-inner');
  static const Effects shadowNone = Effects('shadow-none');

  // --- Opacity ---
  static Effects opacity(int value) {
    // Value from 0 to 100, step 5
    assert(
      value >= 0 && value <= 100 && value % 5 == 0,
      'Opacity value must be between 0 and 100, in steps of 5.',
    );
    return Effects('opacity-$value');
  }

  static const Effects opacity0 = Effects('opacity-0');
  static const Effects opacity25 = Effects('opacity-25');
  static const Effects opacity50 = Effects('opacity-50');
  static const Effects opacity75 = Effects('opacity-75');
  static const Effects opacity100 = Effects('opacity-100');

  // --- Border Radius (All Corners) ---
  static const Effects roundedNone = Effects('rounded-none');
  static const Effects roundedSm = Effects('rounded-sm');
  static const Effects rounded = Effects('rounded');
  static const Effects roundedMd = Effects('rounded-md');
  static const Effects roundedLg = Effects('rounded-lg');
  static const Effects roundedXl = Effects('rounded-xl');
  static const Effects rounded2xl = Effects('rounded-2xl');
  static const Effects rounded3xl = Effects('rounded-3xl');
  static const Effects roundedFull = Effects('rounded-full');

  /// A common DaisyUI radius variable. `rounded-box`
  static const Effects roundedBox = Effects('rounded-box');

  // --- Border Radius (Physical Sides) ---
  // Top
  static const Effects roundedTNone = Effects('rounded-t-none');
  static const Effects roundedTSm = Effects('rounded-t-sm');
  static const Effects roundedT = Effects('rounded-t');
  static const Effects roundedTMd = Effects('rounded-t-md');
  static const Effects roundedTLg = Effects('rounded-t-lg');
  static const Effects roundedTXl = Effects('rounded-t-xl');
  static const Effects roundedT2xl = Effects('rounded-t-2xl');
  static const Effects roundedT3xl = Effects('rounded-t-3xl');
  static const Effects roundedTFull = Effects('rounded-t-full');
  // Bottom
  static const Effects roundedBNone = Effects('rounded-b-none');
  static const Effects roundedBSm = Effects('rounded-b-sm');
  static const Effects roundedB = Effects('rounded-b');
  static const Effects roundedBMd = Effects('rounded-b-md');
  static const Effects roundedBLg = Effects('rounded-b-lg');
  static const Effects roundedBXl = Effects('rounded-b-xl');
  static const Effects roundedB2xl = Effects('rounded-b-2xl');
  static const Effects roundedB3xl = Effects('rounded-b-3xl');
  static const Effects roundedBFull = Effects('rounded-b-full');
  // Left
  static const Effects roundedLNone = Effects('rounded-l-none');
  static const Effects roundedLSm = Effects('rounded-l-sm');
  static const Effects roundedL = Effects('rounded-l');
  static const Effects roundedLMd = Effects('rounded-l-md');
  static const Effects roundedLLg = Effects('rounded-l-lg');
  static const Effects roundedLXl = Effects('rounded-l-xl');
  static const Effects roundedL2xl = Effects('rounded-l-2xl');
  static const Effects roundedL3xl = Effects('rounded-l-3xl');
  static const Effects roundedLFull = Effects('rounded-l-full');
  // Right
  static const Effects roundedRNone = Effects('rounded-r-none');
  static const Effects roundedRSm = Effects('rounded-r-sm');
  static const Effects roundedR = Effects('rounded-r');
  static const Effects roundedRMd = Effects('rounded-r-md');
  static const Effects roundedRLg = Effects('rounded-r-lg');
  static const Effects roundedRXl = Effects('rounded-r-xl');
  static const Effects roundedR2xl = Effects('rounded-r-2xl');
  static const Effects roundedR3xl = Effects('rounded-r-3xl');
  static const Effects roundedRFull = Effects('rounded-r-full');

  // --- Border Radius (Logical Sides - LTR/RTL aware) ---
  // Start (Left in LTR)
  static const Effects roundedSNone = Effects('rounded-s-none');
  static const Effects roundedSSm = Effects('rounded-s-sm');
  static const Effects roundedS = Effects('rounded-s');
  static const Effects roundedSMd = Effects('rounded-s-md');
  static const Effects roundedSLg = Effects('rounded-s-lg');
  static const Effects roundedSXl = Effects('rounded-s-xl');
  static const Effects roundedS2xl = Effects('rounded-s-2xl');
  static const Effects roundedS3xl = Effects('rounded-s-3xl');
  static const Effects roundedSFull = Effects('rounded-s-full');
  // End (Right in LTR)
  static const Effects roundedENone = Effects('rounded-e-none');
  static const Effects roundedESm = Effects('rounded-e-sm');
  static const Effects roundedE = Effects('rounded-e');
  static const Effects roundedEMd = Effects('rounded-e-md');
  static const Effects roundedELg = Effects('rounded-e-lg');
  static const Effects roundedEXl = Effects('rounded-e-xl');
  static const Effects roundedE2xl = Effects('rounded-e-2xl');
  static const Effects roundedE3xl = Effects('rounded-e-3xl');
  static const Effects roundedEFull = Effects('rounded-e-full');

  // --- Border Radius (Individual Physical Corners) ---
  // Top-Left
  static const Effects roundedTlNone = Effects('rounded-tl-none');
  static const Effects roundedTlSm = Effects('rounded-tl-sm');
  static const Effects roundedTl = Effects('rounded-tl');
  static const Effects roundedTlMd = Effects('rounded-tl-md');
  static const Effects roundedTlLg = Effects('rounded-tl-lg');
  static const Effects roundedTlXl = Effects('rounded-tl-xl');
  static const Effects roundedTl2xl = Effects('rounded-tl-2xl');
  static const Effects roundedTl3xl = Effects('rounded-tl-3xl');
  static const Effects roundedTlFull = Effects('rounded-tl-full');
  // Top-Right
  static const Effects roundedTrNone = Effects('rounded-tr-none');
  static const Effects roundedTrSm = Effects('rounded-tr-sm');
  static const Effects roundedTr = Effects('rounded-tr');
  static const Effects roundedTrMd = Effects('rounded-tr-md');
  static const Effects roundedTrLg = Effects('rounded-tr-lg');
  static const Effects roundedTrXl = Effects('rounded-tr-xl');
  static const Effects roundedTr2xl = Effects('rounded-tr-2xl');
  static const Effects roundedTr3xl = Effects('rounded-tr-3xl');
  static const Effects roundedTrFull = Effects('rounded-tr-full');
  // Bottom-Right
  static const Effects roundedBrNone = Effects('rounded-br-none');
  static const Effects roundedBrSm = Effects('rounded-br-sm');
  static const Effects roundedBr = Effects('rounded-br');
  static const Effects roundedBrMd = Effects('rounded-br-md');
  static const Effects roundedBrLg = Effects('rounded-br-lg');
  static const Effects roundedBrXl = Effects('rounded-br-xl');
  static const Effects roundedBr2xl = Effects('rounded-br-2xl');
  static const Effects roundedBr3xl = Effects('rounded-br-3xl');
  static const Effects roundedBrFull = Effects('rounded-br-full');
  // Bottom-Left
  static const Effects roundedBlNone = Effects('rounded-bl-none');
  static const Effects roundedBlSm = Effects('rounded-bl-sm');
  static const Effects roundedBl = Effects('rounded-bl');
  static const Effects roundedBlMd = Effects('rounded-bl-md');
  static const Effects roundedBlLg = Effects('rounded-bl-lg');
  static const Effects roundedBlXl = Effects('rounded-bl-xl');
  static const Effects roundedBl2xl = Effects('rounded-bl-2xl');
  static const Effects roundedBl3xl = Effects('rounded-bl-3xl');
  static const Effects roundedBlFull = Effects('rounded-bl-full');

  // --- Border Radius (Individual Logical Corners) ---
  // Start-Start (Top-Left in LTR)
  static const Effects roundedSsNone = Effects('rounded-ss-none');
  static const Effects roundedSsSm = Effects('rounded-ss-sm');
  static const Effects roundedSs = Effects('rounded-ss');
  static const Effects roundedSsMd = Effects('rounded-ss-md');
  static const Effects roundedSsLg = Effects('rounded-ss-lg');
  static const Effects roundedSsXl = Effects('rounded-ss-xl');
  static const Effects roundedSs2xl = Effects('rounded-ss-2xl');
  static const Effects roundedSs3xl = Effects('rounded-ss-3xl');
  static const Effects roundedSsFull = Effects('rounded-ss-full');
  // Start-End (Top-Right in LTR)
  static const Effects roundedSeNone = Effects('rounded-se-none');
  static const Effects roundedSeSm = Effects('rounded-se-sm');
  static const Effects roundedSe = Effects('rounded-se');
  static const Effects roundedSeMd = Effects('rounded-se-md');
  static const Effects roundedSeLg = Effects('rounded-se-lg');
  static const Effects roundedSeXl = Effects('rounded-se-xl');
  static const Effects roundedSe2xl = Effects('rounded-se-2xl');
  static const Effects roundedSe3xl = Effects('rounded-se-3xl');
  static const Effects roundedSeFull = Effects('rounded-se-full');
  // End-End (Bottom-Right in LTR)
  static const Effects roundedEeNone = Effects('rounded-ee-none');
  static const Effects roundedEeSm = Effects('rounded-ee-sm');
  static const Effects roundedEe = Effects('rounded-ee');
  static const Effects roundedEeMd = Effects('rounded-ee-md');
  static const Effects roundedEeLg = Effects('rounded-ee-lg');
  static const Effects roundedEeXl = Effects('rounded-ee-xl');
  static const Effects roundedEe2xl = Effects('rounded-ee-2xl');
  static const Effects roundedEe3xl = Effects('rounded-ee-3xl');
  static const Effects roundedEeFull = Effects('rounded-ee-full');
  // End-Start (Bottom-Left in LTR)
  static const Effects roundedEsNone = Effects('rounded-es-none');
  static const Effects roundedEsSm = Effects('rounded-es-sm');
  static const Effects roundedEs = Effects('rounded-es');
  static const Effects roundedEsMd = Effects('rounded-es-md');
  static const Effects roundedEsLg = Effects('rounded-es-lg');
  static const Effects roundedEsXl = Effects('rounded-es-xl');
  static const Effects roundedEs2xl = Effects('rounded-es-2xl');
  static const Effects roundedEs3xl = Effects('rounded-es-3xl');
  static const Effects roundedEsFull = Effects('rounded-es-full');
}

<!-- END FILE: packages/deepyr/lib/src/base/utilities/effects.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/base/utilities/flex.dart -->
// TODO
import '../common_style.dart';
import '../style_type.dart';
import '../ui_prefix_modifier.dart';

class Flex extends CommonStyle<Flex> {
  const Flex(super.cssClass, {super.modifiers}) : super(type: StyleType.layout);

  // Standard flex values that control how flex items grow and shrink
  static const Flex flex1 =
      Flex('flex-1'); // flex: 1 1 0% - Allows flex item to grow and shrink
  static const Flex flex2 =
      Flex('flex-2'); // flex: 2 2 0% - Grows/shrinks twice as much as flex-1
  static const Flex flex3 = Flex(
      'flex-3'); // flex: 3 3 0% - Grows/shrinks three times as much as flex-1
  static const Flex flex4 = Flex(
      'flex-4'); // flex: 4 4 0% - Grows/shrinks four times as much as flex-1
  static const Flex flex5 = Flex(
      'flex-5'); // flex: 5 5 0% - Grows/shrinks five times as much as flex-1
  static const Flex flex6 = Flex(
      'flex-6'); // flex: 6 6 0% - Grows/shrinks six times as much as flex-1

  // Fractional flex values for more precise control
  static const Flex flexHalf = Flex('flex-1/2'); // flex: 0.5 0.5 0%
  static const Flex flexThird = Flex('flex-1/3'); // flex: 0.33333 0.33333 0%
  static const Flex flexQuarter = Flex('flex-1/4'); // flex: 0.25 0.25 0%

  // Predefined flex behavior keywords
  static const Flex flexAuto = Flex(
      'flex-auto'); // flex: 1 1 auto - Grow and shrink, taking initial size into account
  static const Flex flexInitial =
      Flex('flex-initial'); // flex: 0 1 auto - Only shrink if needed
  static const Flex flexNone =
      Flex('flex-none'); // flex: none - Prevent growing or shrinking

  // Numeric flex-basis values following the 4px (0.25rem) scale
  static const Flex basis0 =
      Flex('basis-0'); // 0px - Useful for collapsing initial size
  static const Flex basis1 = Flex('basis-1'); // 0.25rem (4px)
  static const Flex basis2 = Flex('basis-2'); // 0.5rem (8px)
  static const Flex basis3 = Flex('basis-3'); // 0.75rem (12px)
  static const Flex basis4 = Flex('basis-4'); // 1rem (16px)
  static const Flex basis5 = Flex('basis-5'); // 1.25rem (20px)
  static const Flex basis6 = Flex('basis-6'); // 1.5rem (24px)
  static const Flex basis8 = Flex('basis-8'); // 2rem (32px)
  static const Flex basis10 = Flex('basis-10'); // 2.5rem (40px)
  static const Flex basis12 = Flex('basis-12'); // 3rem (48px)
  static const Flex basis16 = Flex('basis-16'); // 4rem (64px)
  static const Flex basis20 = Flex('basis-20'); // 5rem (80px)
  static const Flex basis24 = Flex('basis-24'); // 6rem (96px)
  static const Flex basis32 = Flex('basis-32'); // 8rem (128px)
  static const Flex basis40 = Flex('basis-40'); // 10rem (160px)
  static const Flex basis48 = Flex('basis-48'); // 12rem (192px)
  static const Flex basis56 = Flex('basis-56'); // 14rem (224px)
  static const Flex basis64 = Flex('basis-64'); // 16rem (256px)
  static const Flex basis72 = Flex('basis-72'); // 18rem (288px)
  static const Flex basis80 = Flex('basis-80'); // 20rem (320px)
  static const Flex basis96 = Flex('basis-96'); // 24rem (384px)

  // Fractional flex-basis values for responsive layouts
  static const Flex basis1_2 = Flex('basis-1/2'); // 50%
  static const Flex basis1_3 = Flex('basis-1/3'); // 33.333333%
  static const Flex basis2_3 = Flex('basis-2/3'); // 66.666667%
  static const Flex basis1_4 = Flex('basis-1/4'); // 25%
  static const Flex basis2_4 = Flex('basis-2/4'); // 50%
  static const Flex basis3_4 = Flex('basis-3/4'); // 75%
  static const Flex basis1_5 = Flex('basis-1/5'); // 20%
  static const Flex basis2_5 = Flex('basis-2/5'); // 40%
  static const Flex basis3_5 = Flex('basis-3/5'); // 60%
  static const Flex basis4_5 = Flex('basis-4/5'); // 80%
  static const Flex basis1_6 = Flex('basis-1/6'); // 16.666667%
  static const Flex basis2_6 = Flex('basis-2/6'); // 33.333333%
  static const Flex basis3_6 = Flex('basis-3/6'); // 50%
  static const Flex basis4_6 = Flex('basis-4/6'); // 66.666667%
  static const Flex basis5_6 = Flex('basis-5/6'); // 83.333333%

  // Ui container-based flex-basis sizes
  // These provide consistent sizing that aligns with the design system
  static const Flex basis3xs = Flex('basis-3xs'); // 16rem (256px)
  static const Flex basis2xs = Flex('basis-2xs'); // 18rem (288px)
  static const Flex basisXs = Flex('basis-xs'); // 20rem (320px)
  static const Flex basisSm = Flex('basis-sm'); // 24rem (384px)
  static const Flex basisMd = Flex('basis-md'); // 28rem (448px)
  static const Flex basisLg = Flex('basis-lg'); // 32rem (512px)
  static const Flex basisXl = Flex('basis-xl'); // 36rem (576px)
  static const Flex basis2xl = Flex('basis-2xl'); // 42rem (672px)
  static const Flex basis3xl = Flex('basis-3xl'); // 48rem (768px)
  static const Flex basis4xl = Flex('basis-4xl'); // 56rem (896px)
  static const Flex basis5xl = Flex('basis-5xl'); // 64rem (1024px)
  static const Flex basis6xl = Flex('basis-6xl'); // 72rem (1152px)
  static const Flex basis7xl = Flex('basis-7xl'); // 80rem (1280px)

  // Special values for common use cases
  static const Flex basisAuto = Flex('basis-auto'); // Use item's content size
  static const Flex basisFull = Flex('basis-full'); // 100% of container

  // Flex Direction Utilities
  // These control the main axis of the flex container, determining
  // how flex items are placed within the container

  // Items flow left to right (default browser behavior)
  static const Flex flexRow = Flex('flex-row');

  // Items flow right to left, reversing their order
  static const Flex flexRowReverse = Flex('flex-row-reverse');

  // Items flow top to bottom, creating a vertical layout
  static const Flex flexCol = Flex('flex-col');

  // Items flow bottom to top, reversing their vertical order
  static const Flex flexColReverse = Flex('flex-col-reverse');

  // Flex Wrap Utilities
  // These determine whether and how flex items wrap when they
  // exceed the container's dimensions

  // Items remain on a single line, potentially overflowing
  static const Flex flexNowrap = Flex('flex-nowrap');

  // Items wrap onto multiple lines when needed, from top to bottom
  static const Flex flexWrap = Flex('flex-wrap');

  // Items wrap onto multiple lines when needed, from bottom to top
  static const Flex flexWrapReverse = Flex('flex-wrap-reverse');

  // Flex Grow Utilities
  // These control how flex items expand to fill available space

  // Basic grow utility - enables growing with a factor of 1
  // This is equivalent to 'flex-grow: 1' and allows the item
  // to grow proportionally with other items
  static const Flex grow = Flex('grow');

  // Numeric grow factors provide more precise control over growth ratios
  // Each number represents how much more the item should grow compared
  // to other items. For example, grow2 will grow twice as fast as grow1
  static const Flex grow0 = Flex('grow-0'); // Prevents growing
  static const Flex grow1 = Flex('grow-1'); // Standard growth rate
  static const Flex grow2 = Flex('grow-2'); // Grows twice as fast
  static const Flex grow3 = Flex('grow-3'); // Grows three times as fast
  static const Flex grow4 = Flex('grow-4'); // Grows four times as fast
  static const Flex grow5 = Flex('grow-5'); // Grows five times as fast
  static const Flex grow6 = Flex('grow-6'); // Grows six times as fast

  // Flex Shrink Utilities
  // These control how flex items reduce their size when the container
  // becomes too small to fit all items at their natural size.

  // Basic shrink utility - enables shrinking with a factor of 1
  // This is equivalent to 'flex-shrink: 1' and allows the item
  // to shrink proportionally with other items when space is limited
  static const Flex shrink = Flex('shrink');

  // Numeric shrink factors provide fine-grained control over how
  // quickly items shrink relative to each other. An item with
  // shrink-2 will give up space twice as fast as one with shrink-1
  static const Flex shrink0 = Flex('shrink-0'); // Prevents shrinking entirely
  static const Flex shrink1 = Flex('shrink-1'); // Standard shrink rate
  static const Flex shrink2 = Flex('shrink-2'); // Shrinks twice as fast
  static const Flex shrink3 = Flex('shrink-3'); // Shrinks three times as fast
  static const Flex shrink4 = Flex('shrink-4'); // Shrinks four times as fast
  static const Flex shrink5 = Flex('shrink-5'); // Shrinks five times as fast
  static const Flex shrink6 = Flex('shrink-6'); // Shrinks six times as fast

  @override
  Flex create(List<PrefixModifier> modifiers) {
    return Flex(cssClass, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/base/utilities/flex.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/base/utilities/font_util.dart -->
import '../common_style.dart';
import '../style_type.dart';
import '../ui_prefix_modifier.dart';

class FontUtil extends CommonStyle<FontUtil> {
  const FontUtil(super.cssClass, {super.modifiers})
      : super(type: StyleType.typography);
  @override
  FontUtil create(List<PrefixModifier> modifiers) {
    return FontUtil(cssClass, modifiers: modifiers);
  }

  // --- Font Weight ---
  static const FontUtil thin = FontUtil('font-thin');
  static const FontUtil extralight = FontUtil('font-extralight');
  static const FontUtil light = FontUtil('font-light');
  static const FontUtil normal = FontUtil('font-normal');
  static const FontUtil medium = FontUtil('font-medium');
  static const FontUtil semibold = FontUtil('font-semibold');
  static const FontUtil bold = FontUtil('font-bold');
  static const FontUtil extrabold = FontUtil('font-extrabold');
  static const FontUtil black = FontUtil('font-black');

  // --- Font Style ---
  static const FontUtil italic = FontUtil('italic'); // War in TextUtil
  static const FontUtil notItalic = FontUtil('not-italic'); // War in TextUtil

  // --- Font Family (Beispiel, wenn du das anbieten willst) ---
  // static const FontUtil sans = FontUtil('font-sans');
  // static const FontUtil serif = FontUtil('font-serif');
  // static const FontUtil mono = FontUtil('font-mono');
}

<!-- END FILE: packages/deepyr/lib/src/base/utilities/font_util.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/base/utilities/grid.dart -->
// TODO
import '../common_style.dart';
import '../style_type.dart';
import '../ui_prefix_modifier.dart';

class Grid extends CommonStyle<Grid> {
  const Grid(super.cssClass, {super.modifiers}) : super(type: StyleType.layout);

  // gridTemplateColumns
  // - grid-cols-<number>
  // - grid-cols-none
  // - grid-cols-subgrid
  // - grid-cols-[<value>]
  // - grid-cols-(<custom-property>)

  // gridColumn
  // - col-span-<number>
  // - col-span-full
  // - col-span-(<custom-property>)
  // - col-span-[<value>]
  // - col-start-<number>
  // - -col-start-<number>
  // - col-start-auto
  // - col-start-(<custom-property>)
  // - col-start-[<value>]
  // - col-end-<number>
  // - -col-end-<number>
  // - col-end-auto
  // - col-end-(<custom-property>)
  // - col-end-[<value>]
  // - col-auto
  // - col-(<custom-property>)
  // - col-[<value>]

  // gridTemplateRows
  // - grid-rows-<number>
  // - grid-rows-none
  // - grid-rows-subgrid
  // - grid-rows-[<value>]
  // - grid-rows-(<custom-property>)

  // gridRow
  // - row-span-<number>
  // - row-span-full
  // - row-span-(<custom-property>)
  // - row-span-[<value>]
  // - row-start-<number>
  // - -row-start-<number>
  // - row-start-auto
  // - row-start-(<custom-property>)
  // - row-start-[<value>]
  // - row-end-<number>
  // - -row-end-<number>
  // - row-end-auto
  // - row-end-(<custom-property>)
  // - row-end-[<value>]
  // - row-auto
  // - row-(<custom-property>)
  // - row-[<value>]

  // gridAutoFlow
  // - grid-flow-row
  // - grid-flow-col
  // - grid-flow-dense
  // - grid-flow-row-dense
  // - grid-flow-col-dense

  // gridAutoColumns
  // - auto-cols-auto
  // - auto-cols-min
  // - auto-cols-max
  // - auto-cols-fr
  // - auto-cols-(<custom-property>)
  // - auto-cols-[<value>]

  // gridAutoRows
  // - auto-rows-auto
  // - auto-rows-min
  // - auto-rows-max
  // - auto-rows-fr
  // - auto-rows-(<custom-property>)
  // - auto-rows-[<value>]

  @override
  Grid create(List<PrefixModifier> modifiers) {
    return Grid(cssClass, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/base/utilities/grid.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/base/utilities/layout.dart -->
// packages/deepyr/lib/src/base/utilities/layout.dart

import '../common_style.dart';
import '../style_type.dart';
import '../ui_prefix_modifier.dart';

/// A comprehensive utility class for applying layout styles.
///
/// This includes utilities for display, positioning, z-index, overflow,
/// visibility, flexbox/grid spacing (gap), ordering, and other
/// fundamental CSS layout properties.
class Layout extends CommonStyle<Layout> {
  const Layout(super.cssClass, {super.modifiers}) : super(type: StyleType.layout);

  // --- Z-Index ---
  /// Creates a z-index utility. `z-{value}`
  factory Layout.z(int value) => Layout('z-$value');

  // --- Positioning ---
  /// Creates an inset utility. `inset-{value}`
  factory Layout.inset(num value) => Layout('inset-${_formatValue(value)}');

  /// Creates a horizontal inset utility. `inset-x-{value}`
  factory Layout.insetX(num value) => Layout('inset-x-${_formatValue(value)}');

  /// Creates a vertical inset utility. `inset-y-{value}`
  factory Layout.insetY(num value) => Layout('inset-y-${_formatValue(value)}');

  /// Creates a top position utility. `top-{value}`
  factory Layout.top(num value) => Layout('top-${_formatValue(value)}');

  /// Creates a bottom position utility. `bottom-{value}`
  factory Layout.bottom(num value) => Layout('bottom-${_formatValue(value)}');

  /// Creates a left position utility. `left-{value}`
  factory Layout.left(num value) => Layout('left-${_formatValue(value)}');

  /// Creates a right position utility. `right-{value}`
  factory Layout.right(num value) => Layout('right-${_formatValue(value)}');

  // --- Gap, Order, and Spacing ---
  /// Creates a gap utility for both axes. `gap-{value}`
  factory Layout.gap(num value) => Layout('gap-${_formatValue(value)}');

  /// Creates a horizontal gap utility. `gap-x-{value}`
  factory Layout.gapX(num value) => Layout('gap-x-${_formatValue(value)}');

  /// Creates a vertical gap utility. `gap-y-{value}`
  factory Layout.gapY(num value) => Layout('gap-y-${_formatValue(value)}');

  /// Creates a positive order utility. `order-{value}`
  factory Layout.order(int value) => Layout('order-$value');

  /// Creates a negative order utility. `-order-{value}`
  factory Layout.orderNeg(int value) => Layout('-order-$value');

  /// Helper to format a value, removing .0 for whole numbers.
  static String _formatValue(num value) {
    if (value == value.truncate()) {
      return value.truncate().toString();
    }
    return value.toString();
  }

  @override
  Layout create(List<PrefixModifier> modifiers) {
    return Layout(cssClass, modifiers: modifiers);
  }

  // --- Display ---
  /// `display: block`
  static const Layout block = Layout('block');

  /// `display: inline-block`
  static const Layout inlineBlock = Layout('inline-block');

  /// `display: inline`
  static const Layout inline = Layout('inline');

  /// `display: flex`
  static const Layout flex = Layout('flex');

  /// `display: inline-flex`
  static const Layout inlineFlex = Layout('inline-flex');

  /// `display: table`
  static const Layout table = Layout('table');

  /// `display: grid`
  static const Layout grid = Layout('grid');

  /// `display: inline-grid`
  static const Layout inlineGrid = Layout('inline-grid');

  /// `display: contents`
  static const Layout contents = Layout('contents');

  /// `display: list-item`
  static const Layout listItem = Layout('list-item');

  /// `display: hidden` (effectively `display: none`)
  static const Layout hidden = Layout('hidden');

  /// `display: flow-root`
  static const Layout flowRoot = Layout('flow-root');

  /// `z-index: auto`
  static const Layout zAuto = Layout('z-auto');

  /// `z-index: 0`
  static const Layout z0 = Layout('z-0');

  /// `z-index: 10`
  static const Layout z10 = Layout('z-10');

  /// `z-index: 20`
  static const Layout z20 = Layout('z-20');

  /// `z-index: 30`
  static const Layout z30 = Layout('z-30');

  /// `z-index: 40`
  static const Layout z40 = Layout('z-40');

  /// `z-index: 50`
  static const Layout z50 = Layout('z-50');

  /// `inset: 0`
  static const Layout inset0 = Layout('inset-0');

  /// `inset: auto`
  static const Layout insetAuto = Layout('inset-auto');

  /// `top: 0`
  static const Layout top0 = Layout('top-0');

  /// `bottom: 0`
  static const Layout bottom0 = Layout('bottom-0');

  /// `left: 0`
  static const Layout left0 = Layout('left-0');

  /// `right: 0`
  static const Layout right0 = Layout('right-0');

  /// `inset: 100%`
  static const Layout insetFull = Layout('inset-full');

  // --- Overflow ---
  /// `overflow: auto`
  static const Layout overflowAuto = Layout('overflow-auto');

  /// `overflow: hidden`
  static const Layout overflowHidden = Layout('overflow-hidden');

  /// `overflow: visible`
  static const Layout overflowVisible = Layout('overflow-visible');

  /// `overflow: scroll`
  static const Layout overflowScroll = Layout('overflow-scroll');

  /// `overflow-x: auto`
  static const Layout overflowXAuto = Layout('overflow-x-auto');

  /// `overflow-y: auto`
  static const Layout overflowYAuto = Layout('overflow-y-auto');

  /// `overflow-x: hidden`
  static const Layout overflowXHidden = Layout('overflow-x-hidden');

  /// `overflow-y: hidden`
  static const Layout overflowYHidden = Layout('overflow-y-hidden');

  /// `overflow-x: visible`
  static const Layout overflowXVisible = Layout('overflow-x-visible');

  /// `overflow-y: visible`
  static const Layout overflowYVisible = Layout('overflow-y-visible');

  /// `overflow-x: scroll`
  static const Layout overflowXScroll = Layout('overflow-x-scroll');

  /// `overflow-y: scroll`
  static const Layout overflowYScroll = Layout('overflow-y-scroll');

  // --- Visibility ---
  /// `visibility: visible`
  static const Layout visible = Layout('visible');

  /// `visibility: hidden` (element still takes up space)
  static const Layout invisible = Layout('invisible');

  // --- Object Fit & Position ---
  /// `object-fit: contain`
  static const Layout objectContain = Layout('object-contain');

  /// `object-fit: cover`
  static const Layout objectCover = Layout('object-cover');

  /// `object-fit: fill`
  static const Layout objectFill = Layout('object-fill');

  /// `object-fit: none`
  static const Layout objectNone = Layout('object-none');

  /// `object-fit: scale-down`
  static const Layout objectScaleDown = Layout('object-scale-down');

  /// `object-position: bottom`
  static const Layout objectBottom = Layout('object-bottom');

  /// `object-position: center`
  static const Layout objectCenter = Layout('object-center');

  /// `object-position: left`
  static const Layout objectLeft = Layout('object-left');

  /// `object-position: left bottom`
  static const Layout objectLeftBottom = Layout('object-left-bottom');

  /// `object-position: left top`
  static const Layout objectLeftTop = Layout('object-left-top');

  /// `object-position: right`
  static const Layout objectRight = Layout('object-right');

  /// `object-position: right bottom`
  static const Layout objectRightBottom = Layout('object-right-bottom');

  /// `object-position: right top`
  static const Layout objectRightTop = Layout('object-right-top');

  /// `object-position: top`
  static const Layout objectTop = Layout('object-top');

  // --- Flexbox & Grid Container ---
  /// `flex-direction: row`
  static const Layout flexRow = Layout('flex-row');

  /// `flex-direction: row-reverse`
  static const Layout flexRowReverse = Layout('flex-row-reverse');

  /// `flex-direction: column`
  static const Layout flexCol = Layout('flex-col');

  /// `flex-direction: column-reverse`
  static const Layout flexColReverse = Layout('flex-col-reverse');

  /// `flex-wrap: nowrap`
  static const Layout flexNoWrap = Layout('flex-nowrap');

  /// `flex-wrap: wrap`
  static const Layout flexWrap = Layout('flex-wrap');

  /// `flex-wrap: wrap-reverse`
  static const Layout flexWrapReverse = Layout('flex-wrap-reverse');

  /// `grid-auto-flow: row`
  static const Layout gridFlowRow = Layout('grid-flow-row');

  /// `grid-auto-flow: column`
  static const Layout gridFlowCol = Layout('grid-flow-col');

  /// `grid-auto-flow: row dense`
  static const Layout gridFlowRowDense = Layout('grid-flow-row-dense');

  /// `grid-auto-flow: column dense`
  static const Layout gridFlowColDense = Layout('grid-flow-col-dense');

  // Base gap utilities - Control spacing in both directions
  // These follow the standard 0.25rem (4px) scale pattern
  static const Layout gap0 = Layout('gap-0'); // 0px
  static const Layout gap1 = Layout('gap-1'); // 0.25rem (4px)
  static const Layout gap2 = Layout('gap-2'); // 0.5rem (8px)
  static const Layout gap3 = Layout('gap-3'); // 0.75rem (12px)
  static const Layout gap4 = Layout('gap-4'); // 1rem (16px)
  static const Layout gap5 = Layout('gap-5'); // 1.25rem (20px)
  static const Layout gap6 = Layout('gap-6'); // 1.5rem (24px)
  static const Layout gap8 = Layout('gap-8'); // 2rem (32px)
  static const Layout gap10 = Layout('gap-10'); // 2.5rem (40px)
  static const Layout gap12 = Layout('gap-12'); // 3rem (48px)
  static const Layout gap14 = Layout('gap-14'); // 3.5rem (56px)
  static const Layout gap16 = Layout('gap-16'); // 4rem (64px)
  static const Layout gap20 = Layout('gap-20'); // 5rem (80px)
  static const Layout gap24 = Layout('gap-24'); // 6rem (96px)
  static const Layout gap28 = Layout('gap-28'); // 7rem (112px)
  static const Layout gap32 = Layout('gap-32'); // 8rem (128px)
  static const Layout gap36 = Layout('gap-36'); // 9rem (144px)
  static const Layout gap40 = Layout('gap-40'); // 10rem (160px)
  static const Layout gap44 = Layout('gap-44'); // 11rem (176px)
  static const Layout gap48 = Layout('gap-48'); // 12rem (192px)
  static const Layout gap52 = Layout('gap-52'); // 13rem (208px)
  static const Layout gap56 = Layout('gap-56'); // 14rem (224px)
  static const Layout gap60 = Layout('gap-60'); // 15rem (240px)
  static const Layout gap64 = Layout('gap-64'); // 16rem (256px)
  static const Layout gap72 = Layout('gap-72'); // 18rem (288px)
  static const Layout gap80 = Layout('gap-80'); // 20rem (320px)
  static const Layout gap96 = Layout('gap-96'); // 24rem (384px)

  // Horizontal gap utilities
  static const Layout gapX0 = Layout('gap-x-0');
  static const Layout gapX1 = Layout('gap-x-1');
  static const Layout gapX2 = Layout('gap-x-2');
  static const Layout gapX3 = Layout('gap-x-3');
  static const Layout gapX4 = Layout('gap-x-4');
  static const Layout gapX5 = Layout('gap-x-5');
  static const Layout gapX6 = Layout('gap-x-6');
  static const Layout gapX8 = Layout('gap-x-8');
  static const Layout gapX10 = Layout('gap-x-10');
  static const Layout gapX12 = Layout('gap-x-12');
  static const Layout gapX14 = Layout('gap-x-14');
  static const Layout gapX16 = Layout('gap-x-16');
  static const Layout gapX20 = Layout('gap-x-20');
  static const Layout gapX24 = Layout('gap-x-24');
  static const Layout gapX28 = Layout('gap-x-28');
  static const Layout gapX32 = Layout('gap-x-32');
  static const Layout gapX36 = Layout('gap-x-36');
  static const Layout gapX40 = Layout('gap-x-40');
  static const Layout gapX44 = Layout('gap-x-44');
  static const Layout gapX48 = Layout('gap-x-48');
  static const Layout gapX52 = Layout('gap-x-52');
  static const Layout gapX56 = Layout('gap-x-56');
  static const Layout gapX60 = Layout('gap-x-60');
  static const Layout gapX64 = Layout('gap-x-64');
  static const Layout gapX72 = Layout('gap-x-72');
  static const Layout gapX80 = Layout('gap-x-80');
  static const Layout gapX96 = Layout('gap-x-96');

  // Vertical gap utilities - Control spacing between rows
  // These follow the same scale but only affect vertical spacing
  static const Layout gapY0 = Layout('gap-y-0');
  static const Layout gapY1 = Layout('gap-y-1');
  static const Layout gapY2 = Layout('gap-y-2');
  static const Layout gapY3 = Layout('gap-y-3');
  static const Layout gapY4 = Layout('gap-y-4');
  static const Layout gapY5 = Layout('gap-y-5');
  static const Layout gapY6 = Layout('gap-y-6');
  static const Layout gapY8 = Layout('gap-y-8');
  static const Layout gapY10 = Layout('gap-y-10');
  static const Layout gapY12 = Layout('gap-y-12');
  static const Layout gapY14 = Layout('gap-y-14');
  static const Layout gapY16 = Layout('gap-y-16');
  static const Layout gapY20 = Layout('gap-y-20');
  static const Layout gapY24 = Layout('gap-y-24');
  static const Layout gapY28 = Layout('gap-y-28');
  static const Layout gapY32 = Layout('gap-y-32');
  static const Layout gapY36 = Layout('gap-y-36');
  static const Layout gapY40 = Layout('gap-y-40');
  static const Layout gapY44 = Layout('gap-y-44');
  static const Layout gapY48 = Layout('gap-y-48');
  static const Layout gapY52 = Layout('gap-y-52');
  static const Layout gapY56 = Layout('gap-y-56');
  static const Layout gapY60 = Layout('gap-y-60');
  static const Layout gapY64 = Layout('gap-y-64');
  static const Layout gapY72 = Layout('gap-y-72');
  static const Layout gapY80 = Layout('gap-y-80');
  static const Layout gapY96 = Layout('gap-y-96');

  // Order utilities for controlling the visual order of flex/grid items
  // Special order values that provide semantic meaning
  // --- Order ---
  /// `order: -9999`
  static const Layout orderFirst = Layout('order-first');
  static const Layout orderLast = Layout('order-last');
  static const Layout orderNone = Layout('order-none');
  static const Layout order1 = Layout('order-1');
  static const Layout order2 = Layout('order-2');
  static const Layout order3 = Layout('order-3');
  static const Layout order4 = Layout('order-4');
  static const Layout order5 = Layout('order-5');
  static const Layout order6 = Layout('order-6');
  static const Layout order7 = Layout('order-7');
  static const Layout order8 = Layout('order-8');
  static const Layout order9 = Layout('order-9');
  static const Layout order10 = Layout('order-10');
  static const Layout order11 = Layout('order-11');
  static const Layout order12 = Layout('order-12');

  // Negative order values for placing items before others
  static const Layout orderNeg1 = Layout('-order-1');
  static const Layout orderNeg2 = Layout('-order-2');
  static const Layout orderNeg3 = Layout('-order-3');
  static const Layout orderNeg4 = Layout('-order-4');
  static const Layout orderNeg5 = Layout('-order-5');
  static const Layout orderNeg6 = Layout('-order-6');
  static const Layout orderNeg7 = Layout('-order-7');
  static const Layout orderNeg8 = Layout('-order-8');
  static const Layout orderNeg9 = Layout('-order-9');
  static const Layout orderNeg10 = Layout('-order-10');
  static const Layout orderNeg11 = Layout('-order-11');
  static const Layout orderNeg12 = Layout('-order-12');

  /// `float: none`
  static const Layout floatNone = Layout('float-none');

  /// `clear: left`
  static const Layout clearLeft = Layout('clear-left');

  /// `clear: right`
  static const Layout clearRight = Layout('clear-right');

  /// `clear: both`
  static const Layout clearBoth = Layout('clear-both');

  /// `clear: none`
  static const Layout clearNone = Layout('clear-none');

  // --- Box Sizing ---
  /// `box-sizing: border-box`
  static const Layout boxBorder = Layout('box-border');

  /// `box-sizing: content-box`
  static const Layout boxContent = Layout('box-content');
}

<!-- END FILE: packages/deepyr/lib/src/base/utilities/layout.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/base/utilities/position.dart -->
import '../common_style.dart';
import '../style_type.dart';
import '../ui_prefix_modifier.dart';

class Position extends CommonStyle<Position> {
  const Position(super.cssClass, {super.modifiers})
      : super(type: StyleType.layout);

  static const Position static = Position('static');
  static const Position fixed = Position('fixed');
  static const Position absolute = Position('absolute');
  static const Position relative = Position('relative');
  static const Position sticky = Position('sticky');

  @override
  Position create(List<PrefixModifier> modifiers) {
    return Position(cssClass, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/base/utilities/position.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/base/utilities/size.dart -->
// Größen und Dimensionen
import '../common_style.dart';
import '../style_type.dart';
import '../ui_prefix_modifier.dart';

/// Utilities for setting the width of an element.
class Size extends CommonStyle<Size> {
  const Size(super.cssClass, {super.modifiers})
    : super(type: StyleType.sizing); // Smallest viewport width

  /// Creates an aspect ratio utility. `aspect-[{value}]`
  /// Example: `Size.aspectRatio('video')` -> `aspect-video`
  /// Example: `Size.aspectRatio('16/9')` -> `aspect-[16/9]`
  factory Size.aspectRatio(String value) => Size('aspect-[$value]');

  // Container-based widths
  // Examples of responsive container layouts
  // Card(
  //   [/* card content */],
  //   modifiers: [
  //     Size.wxs,                    // w-xs (320px) on mobile
  //     Size.wmd.at(Breakpoint.sm),  // sm:w-md (448px) on small screens
  //     Size.w2xl.at(Breakpoint.lg), // lg:w-2xl (672px) on large screens
  //   ]
  // )
  //
  // These follow Ui's container scale, providing consistent widths for layout containers
  static const Size w3xs = Size('w-3xs'); // 16rem (256px)  - Smallest container width
  static const Size w2xs = Size('w-2xs'); // 18rem (288px)  - Very small container
  static const Size wxs = Size('w-xs'); // 20rem (320px)  - Extra small container
  static const Size wsm = Size('w-sm'); // 24rem (384px)  - Small container
  static const Size wmd = Size('w-md'); // 28rem (448px)  - Medium container
  static const Size wlg = Size('w-lg'); // 32rem (512px)  - Large container
  static const Size wxl = Size('w-xl'); // 36rem (576px)  - Extra large container
  static const Size w2xl = Size('w-2xl'); // 42rem (672px)  - 2x extra large container
  static const Size w3xl = Size('w-3xl'); // 48rem (768px)  - 3x extra large container
  static const Size w4xl = Size('w-4xl'); // 56rem (896px)  - 4x extra large container
  static const Size w5xl = Size('w-5xl'); // 64rem (1024px) - 5x extra large container
  static const Size w6xl = Size('w-6xl'); // 72rem (1152px) - 6x extra large container
  static const Size w7xl = Size('w-7xl'); // 80rem (1280px) - 7x extra large container

  // Base gap utilities - Control spacing in both directions
  static Size w(double value) => Size('w-${_formatValue(value)}');
  static Size h(double value) => Size('h-${_formatValue(value)}');

  // Fixed widths following a 4px (0.25rem) scale
  static const Size w0 = Size('w-0'); // 0px
  static const Size w1 = Size('w-1'); // 4px (0.25rem)
  static const Size w2 = Size('w-2'); // 8px (0.5rem)
  static const Size w3 = Size('w-3'); // 12px (0.75rem)
  static const Size w4 = Size('w-4'); // 16px (1rem)
  static const Size w5 = Size('w-5'); // 20px (1.25rem)
  static const Size w6 = Size('w-6'); // 24px (1.5rem)
  static const Size w8 = Size('w-8'); // 32px (2rem)
  static const Size w10 = Size('w-10'); // 40px (2.5rem)
  static const Size w12 = Size('w-12'); // 48px (3rem)
  static const Size w16 = Size('w-16'); // 64px (4rem)
  static const Size w20 = Size('w-20'); // 80px (5rem)
  static const Size w24 = Size('w-24'); // 96px (6rem)
  static const Size w32 = Size('w-32'); // 128px (8rem)
  static const Size w40 = Size('w-40'); // 160px (10rem)
  static const Size w48 = Size('w-48'); // 192px (12rem)
  static const Size w52 = Size('w-52'); //
  static const Size w56 = Size('w-56'); // 224px (14rem)
  static const Size w64 = Size('w-64'); // 256px (16rem)
  static const Size w72 = Size('w-72'); // 288px (18rem)
  static const Size w80 = Size('w-80'); // 320px (20rem)
  static const Size w96 = Size('w-96'); // 384px (24rem)

  // Fractional widths
  static const Size w1_2 = Size('w-1/2'); // 50%
  static const Size w1_3 = Size('w-1/3'); // 33.333333%
  static const Size w2_3 = Size('w-2/3'); // 66.666667%
  static const Size w1_4 = Size('w-1/4'); // 25%
  static const Size w2_4 = Size('w-2/4'); // 50%
  static const Size w3_4 = Size('w-3/4'); // 75%
  static const Size w1_5 = Size('w-1/5'); // 20%
  static const Size w2_5 = Size('w-2/5'); // 40%
  static const Size w3_5 = Size('w-3/5'); // 60%
  static const Size w4_5 = Size('w-4/5'); // 80%
  static const Size w1_6 = Size('w-1/6'); // 16.666667%
  static const Size w2_6 = Size('w-2/6'); // 33.333333%
  static const Size w3_6 = Size('w-3/6'); // 50%
  static const Size w4_6 = Size('w-4/6'); // 66.666667%
  static const Size w5_6 = Size('w-5/6'); // 83.333333%
  static const Size w1_12 = Size('w-1/12'); // 8.333333%
  static const Size w2_12 = Size('w-2/12'); // 16.666667%
  static const Size w3_12 = Size('w-3/12'); // 25%
  static const Size w4_12 = Size('w-4/12'); // 33.333333%
  static const Size w5_12 = Size('w-5/12'); // 41.666667%
  static const Size w6_12 = Size('w-6/12'); // 50%
  static const Size w7_12 = Size('w-7/12'); // 58.333333%
  static const Size w8_12 = Size('w-8/12'); // 66.666667%
  static const Size w9_12 = Size('w-9/12'); // 75%
  static const Size w10_12 = Size('w-10/12'); // 83.333333%
  static const Size w11_12 = Size('w-11/12'); // 91.666667%

  // Special width values
  static const Size wAuto = Size('w-auto'); // auto
  static const Size wFull = Size('w-full'); // 100%
  static const Size wScreen = Size('w-screen'); // 100vw
  static const Size wMin = Size('w-min'); // min-content
  static const Size wMax = Size('w-max'); // max-content
  static const Size wFit = Size('w-fit'); // fit-content

  // Dynamic viewport units
  // These respond to viewport changes including dynamic UI elements like address bars
  static const Size wDvw = Size('w-dvw'); // 100% of the dynamic viewport width
  static const Size wDvh = Size('w-dvh'); // 100% of the dynamic viewport height

  // Large viewport units
  // These use the largest possible viewport size, ignoring dynamic UI elements
  static const Size wLvw = Size('w-lvw'); // 100% of the largest viewport width
  static const Size wLvh = Size('w-lvh'); // 100% of the largest viewport height

  // Small viewport units
  // These use the smallest possible viewport size, accounting for all UI elements
  static const Size wSvw = Size('w-svw'); // 100% of the smallest viewport width
  static const Size wSvh = Size('w-svh'); // 100% of the smallest viewport height

  // Fixed minimum widths following the standard 4px (0.25rem) scale
  // These are useful for ensuring elements maintain a minimal size while still being able to grow
  static const Size minW0 = Size('min-w-0'); // 0px - Useful for overriding defaults
  static const Size minW1 = Size('min-w-1'); // 4px (0.25rem)
  static const Size minW2 = Size('min-w-2'); // 8px (0.5rem)
  static const Size minW3 = Size('min-w-3'); // 12px (0.75rem)
  static const Size minW4 = Size('min-w-4'); // 16px (1rem)
  static const Size minW5 = Size('min-w-5'); // 20px (1.25rem)
  static const Size minW6 = Size('min-w-6'); // 24px (1.5rem)
  static const Size minW8 = Size('min-w-8'); // 32px (2rem)
  static const Size minW10 = Size('min-w-10'); // 40px (2.5rem)
  static const Size minW12 = Size('min-w-12'); // 48px (3rem)
  static const Size minW16 = Size('min-w-16'); // 64px (4rem)
  static const Size minW20 = Size('min-w-20'); // 80px (5rem)
  static const Size minW24 = Size('min-w-24'); // 96px (6rem)
  static const Size minW32 = Size('min-w-32'); // 128px (8rem)
  static const Size minW40 = Size('min-w-40'); // 160px (10rem)
  static const Size minW48 = Size('min-w-48'); // 192px (12rem)
  static const Size minW56 = Size('min-w-56'); // 224px (14rem)
  static const Size minW64 = Size('min-w-64'); // 256px (16rem)
  static const Size minW72 = Size('min-w-72'); // 288px (18rem)
  static const Size minW80 = Size('min-w-80'); // 320px (20rem)
  static const Size minW96 = Size('min-w-96'); // 384px (24rem)

  // Ui container-based minimum widths
  // These follow the container scale and are useful for responsive layouts
  static const Size minW3xs = Size('min-w-3xs'); // 16rem (256px)
  static const Size minW2xs = Size('min-w-2xs'); // 18rem (288px)
  static const Size minWxs = Size('min-w-xs'); // 20rem (320px)
  static const Size minWsm = Size('min-w-sm'); // 24rem (384px)
  static const Size minWmd = Size('min-w-md'); // 28rem (448px)
  static const Size minWlg = Size('min-w-lg'); // 32rem (512px)
  static const Size minWxl = Size('min-w-xl'); // 36rem (576px)
  static const Size minW2xl = Size('min-w-2xl'); // 42rem (672px)
  static const Size minW3xl = Size('min-w-3xl'); // 48rem (768px)
  static const Size minW4xl = Size('min-w-4xl'); // 56rem (896px)
  static const Size minW5xl = Size('min-w-5xl'); // 64rem (1024px)
  static const Size minW6xl = Size('min-w-6xl'); // 72rem (1152px)
  static const Size minW7xl = Size('min-w-7xl'); // 80rem (1280px)

  // Special minimum width values
  // These provide different ways to handle content and viewport-based minimums
  static const Size minWFull = Size('min-w-full'); // 100% of parent width
  static const Size minWMin = Size('min-w-min'); // min-content
  static const Size minWMax = Size('min-w-max'); // max-content
  static const Size minWFit = Size('min-w-fit'); // fit-content

  // Viewport-based minimum widths
  static const Size minWScreen = Size('min-w-screen'); // 100vw
  static const Size minWDvw = Size('min-w-dvw'); // 100dvw
  static const Size minWLvw = Size('min-w-lvw'); // 100lvw
  static const Size minWSvw = Size('min-w-svw'); // 100svw

  // Fixed maximum widths following the standard 4px (0.25rem) scale
  // These provide precise control over maximum element sizes
  static const Size maxW0 = Size('max-w-0'); // 0px - Useful for collapsing elements
  static const Size maxW1 = Size('max-w-1'); // 4px (0.25rem)
  static const Size maxW2 = Size('max-w-2'); // 8px (0.5rem)
  static const Size maxW3 = Size('max-w-3'); // 12px (0.75rem)
  static const Size maxW4 = Size('max-w-4'); // 16px (1rem)
  static const Size maxW5 = Size('max-w-5'); // 20px (1.25rem)
  static const Size maxW6 = Size('max-w-6'); // 24px (1.5rem)
  static const Size maxW8 = Size('max-w-8'); // 32px (2rem)
  static const Size maxW10 = Size('max-w-10'); // 40px (2.5rem)
  static const Size maxW12 = Size('max-w-12'); // 48px (3rem)
  static const Size maxW16 = Size('max-w-16'); // 64px (4rem)
  static const Size maxW20 = Size('max-w-20'); // 80px (5rem)
  static const Size maxW24 = Size('max-w-24'); // 96px (6rem)
  static const Size maxW32 = Size('max-w-32'); // 128px (8rem)
  static const Size maxW40 = Size('max-w-40'); // 160px (10rem)
  static const Size maxW48 = Size('max-w-48'); // 192px (12rem)
  static const Size maxW56 = Size('max-w-56'); // 224px (14rem)
  static const Size maxW64 = Size('max-w-64'); // 256px (16rem)
  static const Size maxW72 = Size('max-w-72'); // 288px (18rem)
  static const Size maxW80 = Size('max-w-80'); // 320px (20rem)
  static const Size maxW96 = Size('max-w-96'); // 384px (24rem)

  // Ui container-based maximum widths
  // These provide consistent maximum widths that align with the design system
  static const Size maxW3xs = Size('max-w-3xs'); // 16rem (256px)
  static const Size maxW2xs = Size('max-w-2xs'); // 18rem (288px)
  static const Size maxWxs = Size('max-w-xs'); // 20rem (320px)
  static const Size maxWsm = Size('max-w-sm'); // 24rem (384px)
  static const Size maxWmd = Size('max-w-md'); // 28rem (448px)
  static const Size maxWlg = Size('max-w-lg'); // 32rem (512px)
  static const Size maxWxl = Size('max-w-xl'); // 36rem (576px)
  static const Size maxW2xl = Size('max-w-2xl'); // 42rem (672px)
  static const Size maxW3xl = Size('max-w-3xl'); // 48rem (768px)
  static const Size maxW4xl = Size('max-w-4xl'); // 56rem (896px)
  static const Size maxW5xl = Size('max-w-5xl'); // 64rem (1024px)
  static const Size maxW6xl = Size('max-w-6xl'); // 72rem (1152px)
  static const Size maxW7xl = Size('max-w-7xl'); // 80rem (1280px)

  // Special maximum width values
  // These handle various content and viewport-based maximums
  static const Size maxWFull = Size('max-w-full'); // 100% of parent width
  static const Size maxWMin = Size('max-w-min'); // min-content
  static const Size maxWMax = Size('max-w-max'); // max-content
  static const Size maxWFit = Size('max-w-fit'); // fit-content
  static const Size maxWProse = Size('max-w-prose'); // 65 characters (approx)
  static const Size maxWNone = Size('max-w-none'); // No maximum width

  // Viewport-based maximum widths
  static const Size maxWScreen = Size('max-w-screen'); // 100vw
  static const Size maxWDvw = Size('max-w-dvw'); // 100dvw
  static const Size maxWLvw = Size('max-w-lvw'); // 100lvw
  static const Size maxWSvw = Size('max-w-svw'); // 100svw

  // Additional viewport-specific heights for Ui containers
  static const Size h3xs = Size('h-3xs'); // 16rem (256px)
  static const Size h2xs = Size('h-2xs'); // 18rem (288px)
  static const Size hxs = Size('h-xs'); // 20rem (320px)
  static const Size hsm = Size('h-sm'); // 24rem (384px)
  static const Size hmd = Size('h-md'); // 28rem (448px)
  static const Size hlg = Size('h-lg'); // 32rem (512px)
  static const Size hxl = Size('h-xl'); // 36rem (576px)
  static const Size h2xl = Size('h-2xl'); // 42rem (672px)
  static const Size h3xl = Size('h-3xl'); // 48rem (768px)
  static const Size h4xl = Size('h-4xl'); // 56rem (896px)
  static const Size h5xl = Size('h-5xl'); // 64rem (1024px)
  static const Size h6xl = Size('h-6xl'); // 72rem (1152px)
  static const Size h7xl = Size('h-7xl'); // 80rem (1280px)

  // Fixed heights following the standard 4px (0.25rem) scale
  // These provide precise control for smaller UI elements
  static const Size h0 = Size('h-0'); // 0px - Useful for collapsing elements
  static const Size h1 = Size('h-1'); // 4px (0.25rem)
  static const Size h2 = Size('h-2'); // 8px (0.5rem)
  static const Size h3 = Size('h-3'); // 12px (0.75rem)
  static const Size h4 = Size('h-4'); // 16px (1rem) - Common line height
  static const Size h5 = Size('h-5'); // 20px (1.25rem)
  static const Size h6 = Size('h-6'); // 24px (1.5rem)
  static const Size h8 = Size('h-8'); // 32px (2rem)
  static const Size h10 = Size('h-10'); // 40px (2.5rem)
  static const Size h12 = Size('h-12'); // 48px (3rem)
  static const Size h16 = Size('h-16'); // 64px (4rem)
  static const Size h20 = Size('h-20'); // 80px (5rem)
  static const Size h24 = Size('h-24'); // 96px (6rem)
  static const Size h32 = Size('h-32'); // 128px (8rem)
  static const Size h40 = Size('h-40'); // 160px (10rem)
  static const Size h48 = Size('h-48'); // 192px (12rem)
  static const Size h56 = Size('h-56'); // 224px (14rem)
  static const Size h64 = Size('h-64'); // 256px (16rem)
  static const Size h72 = Size('h-72'); // 288px (18rem)
  static const Size h80 = Size('h-80'); // 320px (20rem)
  static const Size h96 = Size('h-96'); // 384px (24rem)

  // Fractional heights
  // These are particularly useful for responsive layouts and vertical splits
  static const Size h1_2 = Size('h-1/2'); // 50%
  static const Size h1_3 = Size('h-1/3'); // 33.333333%
  static const Size h2_3 = Size('h-2/3'); // 66.666667%
  static const Size h1_4 = Size('h-1/4'); // 25%
  static const Size h2_4 = Size('h-2/4'); // 50%
  static const Size h3_4 = Size('h-3/4'); // 75%
  static const Size h1_5 = Size('h-1/5'); // 20%
  static const Size h2_5 = Size('h-2/5'); // 40%
  static const Size h3_5 = Size('h-3/5'); // 60%
  static const Size h4_5 = Size('h-4/5'); // 80%
  static const Size h1_6 = Size('h-1/6'); // 16.666667%
  static const Size h2_6 = Size('h-2/6'); // 33.333333%
  static const Size h3_6 = Size('h-3/6'); // 50%
  static const Size h4_6 = Size('h-4/6'); // 66.666667%
  static const Size h5_6 = Size('h-5/6'); // 83.333333%

  // Special height values
  // These provide different ways to handle viewport and content-based heights
  static const Size hAuto = Size('h-auto'); // Let the browser determine height
  static const Size hFull = Size('h-full'); // 100% of parent's height
  static const Size hScreen = Size('h-screen'); // 100vh - Full viewport height
  static const Size hMin = Size('h-min'); // Fit content, minimum height
  static const Size hMax = Size('h-max'); // Fit content, maximum height
  static const Size hFit = Size('h-fit'); // Fit content

  // Modern viewport height units
  // These provide better control over viewport heights, especially on mobile
  static const Size hDvh = Size('h-dvh'); // Dynamic viewport height
  static const Size hLvh = Size('h-lvh'); // Largest viewport height
  static const Size hSvh = Size('h-svh'); // Smallest viewport height
  static const Size hDvw = Size('h-dvw'); // Dynamic viewport width as height
  static const Size hLvw = Size('h-lvw'); // Largest viewport width as height
  static const Size hSvw = Size('h-svw'); // Smallest viewport width as height

  // Fixed minimum heights using the standard spacing scale
  // These ensure elements maintain at least a certain height while allowing for expansion
  static const Size minH0 = Size('min-h-0'); // 0px - Removes any minimum height
  static const Size minH1 = Size('min-h-1'); // 4px (0.25rem)
  static const Size minH2 = Size('min-h-2'); // 8px (0.5rem)
  static const Size minH3 = Size('min-h-3'); // 12px (0.75rem)
  static const Size minH4 = Size('min-h-4'); // 16px (1rem)
  static const Size minH5 = Size('min-h-5'); // 20px (1.25rem)
  static const Size minH6 = Size('min-h-6'); // 24px (1.5rem)
  static const Size minH8 = Size('min-h-8'); // 32px (2rem)
  static const Size minH10 = Size('min-h-10'); // 40px (2.5rem)
  static const Size minH12 = Size('min-h-12'); // 48px (3rem)
  static const Size minH16 = Size('min-h-16'); // 64px (4rem)
  static const Size minH20 = Size('min-h-20'); // 80px (5rem)
  static const Size minH24 = Size('min-h-24'); // 96px (6rem)
  static const Size minH32 = Size('min-h-32'); // 128px (8rem)
  static const Size minH40 = Size('min-h-40'); // 160px (10rem)
  static const Size minH48 = Size('min-h-48'); // 192px (12rem)
  static const Size minH56 = Size('min-h-56'); // 224px (14rem)
  static const Size minH64 = Size('min-h-64'); // 256px (16rem)
  static const Size minH72 = Size('min-h-72'); // 288px (18rem)
  static const Size minH80 = Size('min-h-80'); // 320px (20rem)
  static const Size minH96 = Size('min-h-96'); // 384px (24rem)

  // Ui container-based minimum heights
  // These match the container scale for consistent vertical spacing
  static const Size minH3xs = Size('min-h-3xs'); // 16rem (256px)
  static const Size minH2xs = Size('min-h-2xs'); // 18rem (288px)
  static const Size minHxs = Size('min-h-xs'); // 20rem (320px)
  static const Size minHsm = Size('min-h-sm'); // 24rem (384px)
  static const Size minHmd = Size('min-h-md'); // 28rem (448px)
  static const Size minHlg = Size('min-h-lg'); // 32rem (512px)
  static const Size minHxl = Size('min-h-xl'); // 36rem (576px)
  static const Size minH2xl = Size('min-h-2xl'); // 42rem (672px)
  static const Size minH3xl = Size('min-h-3xl'); // 48rem (768px)
  static const Size minH4xl = Size('min-h-4xl'); // 56rem (896px)
  static const Size minH5xl = Size('min-h-5xl'); // 64rem (1024px)
  static const Size minH6xl = Size('min-h-6xl'); // 72rem (1152px)
  static const Size minH7xl = Size('min-h-7xl'); // 80rem (1280px)

  // Special minimum height values
  // These handle various content and viewport-based minimums
  static const Size minHFull = Size('min-h-full'); // 100% of parent height
  static const Size minHScreen = Size('min-h-screen'); // 100vh - Traditional viewport height
  static const Size minHMin = Size('min-h-min'); // min-content
  static const Size minHMax = Size('min-h-max'); // max-content
  static const Size minHFit = Size('min-h-fit'); // fit-content

  // Modern viewport-based minimum heights
  // These provide better control over viewport heights on mobile devices
  static const Size minHDvh = Size('min-h-dvh'); // Dynamic viewport height
  static const Size minHLvh = Size('min-h-lvh'); // Largest viewport height
  static const Size minHSvh = Size('min-h-svh'); // Smallest viewport height

  // Viewport width as minimum height
  // Useful for maintaining aspect ratios
  static const Size minHDvw = Size('min-h-dvw'); // Dynamic viewport width
  static const Size minHLvw = Size('min-h-lvw'); // Largest viewport width
  static const Size minHSvw = Size('min-h-svw'); // Smallest viewport width

  // Fixed maximum heights using the standard spacing scale
  // These utilities help constrain elements to specific maximum heights
  // while still allowing them to be smaller if their content requires less space
  static const Size maxH0 = Size('max-h-0'); // 0px - Completely collapses the element
  static const Size maxH1 = Size('max-h-1'); // 4px (0.25rem)
  static const Size maxH2 = Size('max-h-2'); // 8px (0.5rem)
  static const Size maxH3 = Size('max-h-3'); // 12px (0.75rem)
  static const Size maxH4 = Size('max-h-4'); // 16px (1rem)
  static const Size maxH5 = Size('max-h-5'); // 20px (1.25rem)
  static const Size maxH6 = Size('max-h-6'); // 24px (1.5rem)
  static const Size maxH8 = Size('max-h-8'); // 32px (2rem)
  static const Size maxH10 = Size('max-h-10'); // 40px (2.5rem)
  static const Size maxH12 = Size('max-h-12'); // 48px (3rem)
  static const Size maxH16 = Size('max-h-16'); // 64px (4rem)
  static const Size maxH20 = Size('max-h-20'); // 80px (5rem)
  static const Size maxH24 = Size('max-h-24'); // 96px (6rem)
  static const Size maxH32 = Size('max-h-32'); // 128px (8rem)
  static const Size maxH40 = Size('max-h-40'); // 160px (10rem)
  static const Size maxH48 = Size('max-h-48'); // 192px (12rem)
  static const Size maxH56 = Size('max-h-56'); // 224px (14rem)
  static const Size maxH64 = Size('max-h-64'); // 256px (16rem)
  static const Size maxH72 = Size('max-h-72'); // 288px (18rem)
  static const Size maxH80 = Size('max-h-80'); // 320px (20rem)
  static const Size maxH96 = Size('max-h-96'); // 384px (24rem)

  // Ui container-based maximum heights
  // These match the container scale for consistent vertical constraints
  // across your application's components
  static const Size maxH3xs = Size('max-h-3xs'); // 16rem (256px)
  static const Size maxH2xs = Size('max-h-2xs'); // 18rem (288px)
  static const Size maxHxs = Size('max-h-xs'); // 20rem (320px)
  static const Size maxHsm = Size('max-h-sm'); // 24rem (384px)
  static const Size maxHmd = Size('max-h-md'); // 28rem (448px)
  static const Size maxHlg = Size('max-h-lg'); // 32rem (512px)
  static const Size maxHxl = Size('max-h-xl'); // 36rem (576px)
  static const Size maxH2xl = Size('max-h-2xl'); // 42rem (672px)
  static const Size maxH3xl = Size('max-h-3xl'); // 48rem (768px)
  static const Size maxH4xl = Size('max-h-4xl'); // 56rem (896px)
  static const Size maxH5xl = Size('max-h-5xl'); // 64rem (1024px)
  static const Size maxH6xl = Size('max-h-6xl'); // 72rem (1152px)
  static const Size maxH7xl = Size('max-h-7xl'); // 80rem (1280px)

  // Special maximum height values
  // These provide different ways to handle content and viewport-based maximums,
  // giving you flexibility in how your elements respond to their content
  static const Size maxHFull = Size('max-h-full'); // 100% of parent height
  static const Size maxHScreen = Size('max-h-screen'); // 100vh - Traditional viewport height
  static const Size maxHMin = Size('max-h-min'); // min-content
  static const Size maxHMax = Size('max-h-max'); // max-content
  static const Size maxHFit = Size('max-h-fit'); // fit-content
  static const Size maxHNone = Size('max-h-none'); // No maximum height constraint

  // Modern viewport-based maximum heights
  // These new viewport units provide better control over sizing,
  // especially on mobile devices where browser UI can affect the viewport
  static const Size maxHDvh = Size('max-h-dvh'); // Dynamic viewport height
  static const Size maxHLvh = Size('max-h-lvh'); // Largest viewport height
  static const Size maxHSvh = Size('max-h-svh'); // Smallest viewport height

  // Viewport width as maximum height
  // These can be useful for maintaining aspect ratios
  // or creating height constraints based on viewport width
  static const Size maxHDvw = Size('max-h-dvw'); // Dynamic viewport width
  static const Size maxHLvw = Size('max-h-lvw'); // Largest viewport width
  static const Size maxHSvw = Size('max-h-svw');

  // You could also add common presets if desired:
  static const Size aspectVideo = Size('aspect-video'); // 16/9
  static const Size aspectSquare = Size('aspect-square'); // 1/1

  static String _formatValue(double value) {
    if (value == value.truncate()) {
      return value.truncate().toString();
    }
    return value.toString();
  }

  @override
  Size create(List<PrefixModifier> modifiers) {
    return Size(cssClass, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/base/utilities/size.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/base/utilities/spacing.dart -->
import '../common_style.dart';
import '../style_type.dart';
import '../ui_prefix_modifier.dart';

/// Utilities for controlling spacing (margin and padding).
///
/// This class provides both dynamic constructors for arbitrary values (e.g., `Spacing.m(2.5)`)
/// and a comprehensive set of static constants for the standard Tailwind CSS scale
/// (e.g., `Spacing.m4`, `Spacing.px6`, `Spacing.mb40`).
class Spacing extends CommonStyle<Spacing> {
  const Spacing(super.cssClass, {super.modifiers}) : super(type: StyleType.spacing);

  // --- DYNAMIC CONSTRUCTORS ---
  /// Margin on all sides. `m-{value}`
  Spacing.m(double value) : super('m-${_formatValue(value)}', type: StyleType.spacing);

  /// Margin on x-axis. `mx-{value}`
  Spacing.mx(double value) : super('mx-${_formatValue(value)}', type: StyleType.spacing);

  /// Margin on y-axis. `my-{value}`
  Spacing.my(double value) : super('my-${_formatValue(value)}', type: StyleType.spacing);

  /// Margin on top. `mt-{value}`
  Spacing.mt(double value) : super('mt-${_formatValue(value)}', type: StyleType.spacing);

  /// Margin on right. `mr-{value}` or `me-{value}` (end)
  Spacing.mr(double value) : super('mr-${_formatValue(value)}', type: StyleType.spacing);
  Spacing.me(double value) : super('me-${_formatValue(value)}', type: StyleType.spacing);

  /// Margin on bottom. `mb-{value}`
  Spacing.mb(double value) : super('mb-${_formatValue(value)}', type: StyleType.spacing);

  /// Margin on left. `ml-{value}` or `ms-{value}` (start)
  Spacing.ml(double value) : super('ml-${_formatValue(value)}', type: StyleType.spacing);
  Spacing.ms(double value) : super('ms-${_formatValue(value)}', type: StyleType.spacing);

  // --- Padding ---
  /// Padding on all sides. `p-{value}`
  Spacing.p(double value) : super('p-${_formatValue(value)}', type: StyleType.spacing);

  /// Padding on x-axis. `px-{value}`
  Spacing.px(double value) : super('px-${_formatValue(value)}', type: StyleType.spacing);

  /// Padding on y-axis. `py-{value}`
  Spacing.py(double value) : super('py-${_formatValue(value)}', type: StyleType.spacing);

  /// Padding on top. `pt-{value}`
  Spacing.pt(double value) : super('pt-${_formatValue(value)}', type: StyleType.spacing);

  /// Padding on right. `pr-{value}` or `pe-{value}` (end)
  Spacing.pr(double value) : super('pr-${_formatValue(value)}', type: StyleType.spacing);
  Spacing.pe(double value) : super('pe-${_formatValue(value)}', type: StyleType.spacing);

  /// Padding on bottom. `pb-{value}`
  Spacing.pb(double value) : super('pb-${_formatValue(value)}', type: StyleType.spacing);

  /// Padding on left. `pl-{value}` or `ps-{value}` (start)
  Spacing.pl(double value) : super('pl-${_formatValue(value)}', type: StyleType.spacing);
  Spacing.ps(double value) : super('ps-${_formatValue(value)}', type: StyleType.spacing);

  @override
  Spacing create(List<PrefixModifier> modifiers) {
    return Spacing(cssClass, modifiers: modifiers);
  }

  /// Helper to format value for Tailwind class (e.g., 2.5 -> 2.5, 2.0 -> 2)
  static String _formatValue(double value) {
    if (value == value.truncate()) {
      return value.truncate().toString();
    }
    return value.toString();
  }

  // --- STATIC PREDEFINED VALUES ---
  // Comprehensive list based on Tailwind's default spacing scale.

  // Margin (All directions)
  static const Spacing m0 = Spacing('m-0');
  static const Spacing m1 = Spacing('m-1');
  static const Spacing m2 = Spacing('m-2');
  static const Spacing m3 = Spacing('m-3');
  static const Spacing m4 = Spacing('m-4');
  static const Spacing m5 = Spacing('m-5');
  static const Spacing m6 = Spacing('m-6');
  static const Spacing m8 = Spacing('m-8');
  static const Spacing m10 = Spacing('m-10');
  static const Spacing m12 = Spacing('m-12');
  static const Spacing m16 = Spacing('m-16');
  static const Spacing m20 = Spacing('m-20');
  static const Spacing m24 = Spacing('m-24');
  static const Spacing m32 = Spacing('m-32');
  static const Spacing m40 = Spacing('m-40');
  static const Spacing m48 = Spacing('m-48');
  static const Spacing m56 = Spacing('m-56');
  static const Spacing m64 = Spacing('m-64');
  static const Spacing mAuto = Spacing('m-auto');

  // Margin (X-axis)
  static const Spacing mx0 = Spacing('mx-0');
  static const Spacing mx1 = Spacing('mx-1');
  static const Spacing mx2 = Spacing('mx-2');
  static const Spacing mx3 = Spacing('mx-3');
  static const Spacing mx4 = Spacing('mx-4');
  static const Spacing mx5 = Spacing('mx-5');
  static const Spacing mx6 = Spacing('mx-6');
  static const Spacing mx8 = Spacing('mx-8');
  static const Spacing mx10 = Spacing('mx-10');
  static const Spacing mx12 = Spacing('mx-12');
  static const Spacing mx16 = Spacing('mx-16');
  static const Spacing mxAuto = Spacing('mx-auto');

  // Margin (Y-axis)
  static const Spacing my0 = Spacing('my-0');
  static const Spacing my1 = Spacing('my-1');
  static const Spacing my2 = Spacing('my-2');
  static const Spacing my3 = Spacing('my-3');
  static const Spacing my4 = Spacing('my-4');
  static const Spacing my5 = Spacing('my-5');
  static const Spacing my6 = Spacing('my-6');
  static const Spacing my8 = Spacing('my-8');
  static const Spacing my10 = Spacing('my-10');
  static const Spacing my12 = Spacing('my-12');
  static const Spacing my16 = Spacing('my-16');
  static const Spacing myAuto = Spacing('my-auto');

  // Margin (Top)
  static const Spacing mt0 = Spacing('mt-0');
  static const Spacing mt1 = Spacing('mt-1');
  static const Spacing mt2 = Spacing('mt-2');
  static const Spacing mt3 = Spacing('mt-3');
  static const Spacing mt4 = Spacing('mt-4');
  static const Spacing mt5 = Spacing('mt-5');
  static const Spacing mt6 = Spacing('mt-6');
  static const Spacing mt8 = Spacing('mt-8');
  static const Spacing mt10 = Spacing('mt-10');
  static const Spacing mt12 = Spacing('mt-12');
  static const Spacing mt16 = Spacing('mt-16');
  static const Spacing mt20 = Spacing('mt-20');
  static const Spacing mt24 = Spacing('mt-24');
  static const Spacing mt32 = Spacing('mt-32');
  static const Spacing mt40 = Spacing('mt-40');
  static const Spacing mtAuto = Spacing('mt-auto');

  // Margin (Bottom)
  static const Spacing mb0 = Spacing('mb-0');
  static const Spacing mb1 = Spacing('mb-1');
  static const Spacing mb2 = Spacing('mb-2');
  static const Spacing mb3 = Spacing('mb-3');
  static const Spacing mb4 = Spacing('mb-4');
  static const Spacing mb5 = Spacing('mb-5');
  static const Spacing mb6 = Spacing('mb-6');
  static const Spacing mb8 = Spacing('mb-8');
  static const Spacing mb10 = Spacing('mb-10');
  static const Spacing mb12 = Spacing('mb-12');
  static const Spacing mb16 = Spacing('mb-16');
  static const Spacing mb20 = Spacing('mb-20');
  static const Spacing mb24 = Spacing('mb-24');
  static const Spacing mb32 = Spacing('mb-32');
  static const Spacing mb40 = Spacing('mb-40');
  static const Spacing mbAuto = Spacing('mb-auto');

  // Padding (All directions)
  static const Spacing p0 = Spacing('p-0');
  static const Spacing p1 = Spacing('p-1');
  static const Spacing p2 = Spacing('p-2');
  static const Spacing p3 = Spacing('p-3');
  static const Spacing p4 = Spacing('p-4');
  static const Spacing p5 = Spacing('p-5');
  static const Spacing p6 = Spacing('p-6');
  static const Spacing p8 = Spacing('p-8');
  static const Spacing p10 = Spacing('p-10');
  static const Spacing p12 = Spacing('p-12');
  static const Spacing p16 = Spacing('p-16');
  static const Spacing p20 = Spacing('p-20');

  // Padding (X-axis)
  static const Spacing px0 = Spacing('px-0');
  static const Spacing px1 = Spacing('px-1');
  static const Spacing px2 = Spacing('px-2');
  static const Spacing px3 = Spacing('px-3');
  static const Spacing px4 = Spacing('px-4');
  static const Spacing px5 = Spacing('px-5');
  static const Spacing px6 = Spacing('px-6');
  static const Spacing px8 = Spacing('px-8');
  static const Spacing px10 = Spacing('px-10');
  static const Spacing px12 = Spacing('px-12');
  static const Spacing px16 = Spacing('px-16');

  // Padding (Y-axis)
  static const Spacing py0 = Spacing('py-0');
  static const Spacing py1 = Spacing('py-1');
  static const Spacing py2 = Spacing('py-2');
  static const Spacing py3 = Spacing('py-3');
  static const Spacing py4 = Spacing('py-4');
  static const Spacing py5 = Spacing('py-5');
  static const Spacing py6 = Spacing('py-6');
  static const Spacing py8 = Spacing('py-8');
  static const Spacing py10 = Spacing('py-10');
  static const Spacing py12 = Spacing('py-12');
  static const Spacing py16 = Spacing('py-16');

  // Padding (Top)
  static const Spacing pt0 = Spacing('pt-0');
  static const Spacing pt1 = Spacing('pt-1');
  static const Spacing pt2 = Spacing('pt-2');
  static const Spacing pt4 = Spacing('pt-4');
  static const Spacing pt6 = Spacing('pt-6');
  static const Spacing pt8 = Spacing('pt-8');
  static const Spacing pt10 = Spacing('pt-10');

  // Padding (Bottom)
  static const Spacing pb0 = Spacing('pb-0');
  static const Spacing pb1 = Spacing('pb-1');
  static const Spacing pb2 = Spacing('pb-2');
  static const Spacing pb4 = Spacing('pb-4');
  static const Spacing pb6 = Spacing('pb-6');
  static const Spacing pb8 = Spacing('pb-8');
  static const Spacing pb10 = Spacing('pb-10');
}

<!-- END FILE: packages/deepyr/lib/src/base/utilities/spacing.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/base/utilities/text_util.dart -->
import '../common_style.dart';
import '../style_type.dart';
import '../ui_prefix_modifier.dart';

class TextUtil extends CommonStyle<TextUtil> {
  const TextUtil(super.cssClass, {super.modifiers})
      : super(type: StyleType.typography);

  // --- Font Size ---
  // https://tailwindcss.com/docs/font-size
  static const TextUtil xs = TextUtil('text-xs');
  static const TextUtil sm = TextUtil('text-sm');
  static const TextUtil base = TextUtil('text-base');
  static const TextUtil lg = TextUtil('text-lg');
  static const TextUtil xl = TextUtil('text-xl');
  static const TextUtil xl2 = TextUtil('text-2xl');
  static const TextUtil xl3 = TextUtil('text-3xl');
  static const TextUtil xl4 = TextUtil('text-4xl');
  static const TextUtil xl5 = TextUtil('text-5xl');
  static const TextUtil xl6 = TextUtil('text-6xl');
  static const TextUtil xl7 = TextUtil('text-7xl');
  static const TextUtil xl8 = TextUtil('text-8xl');
  static const TextUtil xl9 = TextUtil('text-9xl');

  // --- Font Weight ---
  // Todo move to FontUtil
  // https://tailwindcss.com/docs/font-weight
  static const TextUtil thin = TextUtil('font-thin'); // 100
  static const TextUtil extralight = TextUtil('font-extralight'); // 200
  static const TextUtil light = TextUtil('font-light'); // 300
  static const TextUtil normal = TextUtil('font-normal'); // 400 (Default)
  static const TextUtil medium = TextUtil('font-medium'); // 500
  static const TextUtil semibold = TextUtil('font-semibold'); // 600
  static const TextUtil bold = TextUtil('font-bold'); // 700
  static const TextUtil extrabold = TextUtil('font-extrabold'); // 800
  static const TextUtil black = TextUtil('font-black'); // 900

  // --- Text Alignment ---
  // https://tailwindcss.com/docs/text-align
  static const TextUtil left = TextUtil('text-left');
  static const TextUtil center = TextUtil('text-center');
  static const TextUtil right = TextUtil('text-right');
  static const TextUtil justify = TextUtil('text-justify');
  // Respects LTR/RTL
  static const TextUtil start = TextUtil('text-start');
  // Respects LTR/RTL
  static const TextUtil end = TextUtil('text-end');

  // --- Text Decoration ---
  /// `text-decoration-line: underline`
  static const TextUtil underline = TextUtil('underline');

  /// `text-decoration-line: overline`
  static const TextUtil overline = TextUtil('overline');

  /// `text-decoration-line: line-through`
  static const TextUtil lineThrough = TextUtil('line-through');

  /// `text-decoration-line: none`
  static const TextUtil noUnderline = TextUtil(
    'no-underline',
  ); // Effectively text-decoration: none

  // --- Text Transform ---
  /// `text-transform: uppercase`
  static const TextUtil uppercase = TextUtil('uppercase');

  /// `text-transform: lowercase`
  static const TextUtil lowercase = TextUtil('lowercase');

  /// `text-transform: capitalize`
  static const TextUtil capitalize = TextUtil('capitalize');

  /// `text-transform: none`
  static const TextUtil normalCase = TextUtil('normal-case');

  // Aliases for common text colors
  static const TextUtil primary = TextUtil('text-primary');
  static const TextUtil primaryContent = TextUtil('text-primary-content');
  static const TextUtil secondary = TextUtil('text-secondary');
  static const TextUtil secondaryContent = TextUtil('text-secondary-content');
  static const TextUtil accent = TextUtil('text-accent');
  static const TextUtil accentContent = TextUtil('text-accent-content');
  static const TextUtil neutral = TextUtil('text-neutral');
  static const TextUtil neutralContent = TextUtil('text-neutral-content');
  static const TextUtil base100 = TextUtil('text-base-100');
  static const TextUtil base200 = TextUtil('text-base-200');
  static const TextUtil base300 = TextUtil('text-base-300');
  static const TextUtil baseContent = TextUtil('text-base-content');
  static const TextUtil info = TextUtil('text-info');
  static const TextUtil infoContent = TextUtil('text-info-content');
  static const TextUtil success = TextUtil('text-success');
  static const TextUtil successContent = TextUtil('text-success-content');
  static const TextUtil warning = TextUtil('text-warning');
  static const TextUtil warningContent = TextUtil('text-warning-content');
  static const TextUtil error = TextUtil('text-error');
  static const TextUtil errorContent = TextUtil('text-error-content');

  // TODO: Add utilities for text opacity, font smoothing, font style (italic), font variant numeric,
  // letter spacing, line height, list style type/position, text decoration color/style/thickness,
  // text underline offset, text overflow, text indent, vertical align, whitespace, word break, hyphens, content.

  @override
  TextUtil create(List<PrefixModifier> modifiers) {
    // Create a new instance with the original cssClass and new modifiers
    return TextUtil(cssClass, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/base/utilities/text_util.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/accordion/accordion.dart -->
// This file defines the Accordion and AccordionItem components,
// which are used to create collapsible content sections where only one
// item can be open at a time.

import 'package:jaspr/jaspr.dart';

import '../../../deepyr.dart';
import '../../base/style_type.dart';
import 'accordion_style.dart';

/// A logical component that manages a group of [AccordionItem]s.
///
/// This component does not render its own HTML element. Instead, it processes its
/// [AccordionItem] children to ensure they all share the same `name` attribute,
/// allowing them to function as a single accordion group where only one item can be
/// open at a time.
///
/// Wrap this component in a styled `div` or `Container` for layout
/// and effects like `join`.
class Accordion extends StatelessComponent {
  /// Creates an Accordion group manager.
  ///
  /// - [children]: A list of components, expected to contain [AccordionItem]s.
  /// - [name]: A unique name for the radio button group. If not provided, a unique
  ///   name is generated. It's recommended to provide a stable name for consistency.
  const Accordion(
    this.children, {
    this.name,
    super.key,
  });

  /// A list of child components, which should include [AccordionItem]s.
  final List<Component> children;

  /// The name for the radio button group, essential for the accordion behavior.
  final String? name;

  @override
  Component build(BuildContext context) {
    // Generate a unique name for the radio group if one isn't provided.
    final effectiveName = name ?? 'accordion-${key.hashCode}';

    // Iterate through children and rebuild AccordionItems with the shared name.
    return Component.fragment([
      for (final child in children)
        if (child is AccordionItem)
          // return a new AccordionItem, injecting the managed 'name'.
          // All other properties are passed through from the original child.
          AccordionItem(
            title: child.title,
            content: child.content,
            name: effectiveName, // This is the key logic.
            initiallyOpen: child.initiallyOpen,
            style: child.style,
            classes: child.classes,
            tag: child.tag,
            id: child.id,
            key: child.key,
            attributes: child.userProvidedAttributes,
            css: child.css,
          )
        else
          // Pass through any non-AccordionItem children as-is.
          child,
    ]);
  }
}

/// Represents a single collapsible item within an [Accordion].
///
/// This component is based on the DaisyUI `collapse` component but is specifically
/// configured to work with a radio input for the accordion behavior.
class AccordionItem extends UiComponent {
  /// Creates a single item for an Accordion.
  ///
  /// - [title]: The component to be displayed in the clickable title area.
  /// - [content]: The component to be displayed in the collapsible content area.
  /// - [name]: The name of the radio button group. This is typically managed by the parent [Accordion] component.
  /// - [initiallyOpen]: If true, this item will be the one open by default in the accordion group.
  /// - [style]: A list of [AccordionStyling] modifiers, like [AccordionItem.arrow] or [AccordionItem.plus].
  const AccordionItem({
    required this.title,
    required this.content,
    required this.name,
    this.initiallyOpen = false,
    super.style,
    super.tag = 'div',
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.key,
  }) : super(null); // Children are managed internally.

  /// The content for the visible, clickable title bar of the accordion item.
  final Component title;

  /// The content that is shown or hidden when the item is toggled.
  final Component content;

  /// The shared name for the radio input group, connecting all items in the accordion.
  final String name;

  /// Determines if this item is open by default when the accordion is first rendered.
  final bool initiallyOpen;

  @override
  String get baseClass => 'collapse';

  @override
  Map<String, String> get userProvidedAttributes => super.userProvidedAttributes;

  @override
  AccordionItem copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return AccordionItem(
      title: title,
      content: content,
      name: name,
      initiallyOpen: initiallyOpen,
      tag: tag,
      style: style,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      key: key ?? this.key,
    );
  }

  @override
  Component build(BuildContext context) {
    // The UiComponent's build method will render a single DomComponent.
    // We provide the specific internal structure of the accordion item as its children.
    return Component.element(
      tag: tag,
      id: id,
      classes: combinedClasses,
      styles: this.css,
      attributes: componentAttributes,
      events: this.events,
      children: [
        input(
          type: InputType.radio,
          name: name,
          attributes: {
            if (initiallyOpen) 'checked': 'checked',
          },
        ),
        div(
          classes: 'collapse-title font-semibold',
          [title],
        ),
        div(
          classes: 'collapse-content text-sm',
          [content],
        ),
      ],
    );
  }

  // --- Static Style Modifiers ---

  /// Adds an arrow icon to the accordion item for visual feedback.
  static const AccordionStyle arrow = AccordionStyle(
    'collapse-arrow',
    type: StyleType.additional,
  );

  /// Adds a plus/minus icon to the accordion item for visual feedback.
  static const AccordionStyle plus = AccordionStyle(
    'collapse-plus',
    type: StyleType.additional,
  );

  /// Forces the item to be visually open. Useful for overriding radio state.
  static const AccordionStyle open = AccordionStyle(
    'collapse-open',
    type: StyleType.state,
  );

  /// Forces the item to be visually closed. Useful for overriding radio state.
  static const AccordionStyle close = AccordionStyle(
    'collapse-close',
    type: StyleType.state,
  );
}

<!-- END FILE: packages/deepyr/lib/src/components/accordion/accordion.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/accordion/accordion_style.dart -->
// This file defines the styling interfaces and classes for the AccordionItem component.
// It follows the standard deepyr pattern for component-specific styling.

import '../../base/component_style.dart';
import '../../base/style_type.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'accordion.dart';

/// A marker interface for any utility that can be passed to an [AccordionItem]'s `style` list.
///
/// This allows for type-safe application of styles. Both component-specific styles
/// (like `AccordionStyle`) and applicable general utilities can implement this interface.
abstract class AccordionStyling implements Styling {}

/// Defines specific styling options for an [AccordionItem] component, such as adding
/// an arrow or a plus/minus icon.
///
/// Implements the [AccordionStyling] interface, making it a valid type for the
/// `style` property of an [AccordionItem].
class AccordionStyle extends ComponentStyle<AccordionStyle>
    with Breakpoints<AccordionStyle>
    implements AccordionStyling {
  /// Constructs an [AccordionStyle].
  ///
  /// - [cssClass]: The core CSS class string for this modifier (e.g., "collapse-arrow").
  /// - [type]: The [StyleType] categorizing this modifier.
  /// - [modifiers]: An optional list of [PrefixModifier]s for responsive or state-based styling.
  const AccordionStyle(
    super.cssClass, {
    required super.type,
    super.modifiers,
  });

  /// Creates a new instance of [AccordionStyle] with the provided modifiers.
  /// This is an internal method used by the fluent API (`.at()`, `.on()`).
  @override
  AccordionStyle create(List<PrefixModifier> modifiers) {
    return AccordionStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/accordion/accordion_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/alert/alert.dart -->
import 'package:jaspr/jaspr.dart' show Key, Styles;

import '../../base/style_type.dart';
import '../../base/ui_component.dart';
import '../../base/ui_component_attributes.dart';
import 'alert_style.dart';

/// A component to inform users about important events, rendering a `<div>` with `role="alert"`.
///
/// The `Alert` component is a flexible container. Its children can be any combination
/// of `Icon`, `span`, `div`, or `Button` components to create the desired layout.
///
/// Example Usage:
/// ```dart
/// Alert(
///   style: [Alert.success, Alert.soft],
///   [
///     Icon('check_circle'), // Assumes deepyr Icon component
///     span([text('Your purchase has been confirmed!')]),
///     div([
///       Button([text('View Receipt')], style: [Button.sm]),
///     ])
///   ],
/// )
/// ```
class Alert extends UiComponent {
  /// Creates an Alert component.
  ///
  /// - [children]: The content of the alert, typically including an icon,
  ///   text, and optional action buttons.
  /// - [tag]: The HTML tag for the root element, defaults to 'div'.
  /// - [style]: A list of [AlertStyling] instances to control the color,
  ///   style, and layout.
  /// - Other parameters are inherited from [UiComponent].
  const Alert(
    super.children, {
    super.tag = 'div',
    List<AlertStyling>? style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  }) : super(style: style);

  @override
  String get baseClass => 'alert';

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);
    // The 'alert' role is crucial for accessibility, making screen readers
    // announce the message dynamically.
    if (!userProvidedAttributes.containsKey('role')) {
      attributes.addRole('alert');
    }
  }

  @override
  Alert copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return Alert(
      children,
      tag: tag,
      style: style as List<AlertStyling>?,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }

  // --- Static Style Modifiers ---

  // Styles
  /// Outline style. `alert-outline`
  static const AlertStyle outline = AlertStyle('alert-outline', type: StyleType.border);

  /// Dash outline style. `alert-dash`
  static const AlertStyle dash = AlertStyle('alert-dash', type: StyleType.border);

  /// Soft style with a light background color. `alert-soft`
  static const AlertStyle soft = AlertStyle('alert-soft', type: StyleType.style);

  // Colors
  /// Info color, for neutral informative messages. `alert-info`
  static const AlertStyle info = AlertStyle('alert-info', type: StyleType.style);

  /// Success color, for positive confirmation messages. `alert-success`
  static const AlertStyle success = AlertStyle('alert-success', type: StyleType.style);

  /// Warning color, for potentially harmful actions. `alert-warning`
  static const AlertStyle warning = AlertStyle('alert-warning', type: StyleType.style);

  /// Error color, for failed actions or errors. `alert-error`
  static const AlertStyle error = AlertStyle('alert-error', type: StyleType.style);

  // Direction
  /// Vertical layout, stacking items top-to-bottom. Good for mobile. `alert-vertical`
  static const AlertStyle vertical = AlertStyle('alert-vertical', type: StyleType.layout);

  /// Horizontal layout, placing items side-by-side. Good for desktop. `alert-horizontal`
  static const AlertStyle horizontal = AlertStyle('alert-horizontal', type: StyleType.layout);
}

<!-- END FILE: packages/deepyr/lib/src/components/alert/alert.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/alert/alert_style.dart -->
import '../../base/component_style.dart';
import '../../base/style_type.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'alert.dart';

/// A marker interface for any utility that can be passed to an [Alert]'s `style` list.
///
/// This allows for type-safe application of styles for colors, variants, and layout direction.
abstract class AlertStyling implements Styling {}

/// Defines specific styling options for an [Alert] component.
///
/// This is the concrete implementation class for alert-specific modifiers.
/// It implements the [AlertStyling] interface, making it a valid type for the
/// `style` property of an [Alert] component.
class AlertStyle extends ComponentStyle<AlertStyle>
    with Breakpoints<AlertStyle>
    implements AlertStyling {
  /// Constructs an [AlertStyle].
  ///
  /// - [cssClass]: The core CSS class string for this modifier (e.g., "alert-success").
  /// - [type]: The [StyleType] categorizing this modifier.
  /// - [modifiers]: An optional list of [PrefixModifier]s for responsive styling.
  const AlertStyle(super.cssClass, {required super.type, super.modifiers});

  /// Creates a new instance of [AlertStyle] with the provided modifiers.
  @override
  AlertStyle create(List<PrefixModifier> modifiers) {
    return AlertStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/alert/alert_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/avatar/avatar.dart -->
import 'package:jaspr/jaspr.dart';

import '../../base/style_type.dart';
import '../../base/ui_component.dart';
import 'avatar_style.dart';

/// A component for displaying a user's profile image or a placeholder.
///
/// It renders as a `<div>` with the `avatar` base class and typically contains
/// another styled `div` that holds the image or placeholder text.
class Avatar extends UiComponent {
  /// Creates an Avatar component.
  ///
  /// - [children] or [child]: The content of the avatar, usually a styled `div`
  ///   wrapping an `img` or `span` element.
  /// - [isPlaceholder]: If true, applies the `avatar-placeholder` class, styling
  ///   the avatar for use with text initials instead of an image.
  /// - [style]: A list of [AvatarStyling] instances, such as [Avatar.online]
  ///   or [Avatar.offline].
  /// - Other parameters are inherited from [UiComponent].
  const Avatar(
    super.children, {
    this.isPlaceholder = false,
    super.tag = 'div',
    List<AvatarStyling>? style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  }) : super(style: style);

  /// Creates an Avatar specifically styled as a placeholder for text.
  ///
  /// This is a convenience factory that sets `isPlaceholder` to true.
  factory Avatar.placeholder(
    List<Component>? children, {
    Component? child,
    List<AvatarStyling>? style,
    Key? key,
  }) {
    return Avatar(
      children,
      child: child,
      isPlaceholder: true,
      style: style,
      key: key,
    );
  }

  /// If true, adds the `avatar-placeholder` class.
  final bool isPlaceholder;

  @override
  String get baseClass => 'avatar';

  @override
  String get combinedClasses {
    // Start with the default combined classes from UiComponent.
    var combined = super.combinedClasses;
    // Prepend the placeholder class if needed.
    if (isPlaceholder) {
      combined = 'avatar-placeholder $combined';
    }
    return combined;
  }

  @override
  Avatar copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return Avatar(
      children,
      isPlaceholder: isPlaceholder,
      tag: tag,
      style: style as List<AvatarStyling>?,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }

  // --- Static Style Modifiers ---

  /// Shows a green dot as an online indicator. `avatar-online`
  static const AvatarStyle online = AvatarStyle('avatar-online', type: StyleType.state);

  /// Shows a gray dot as an offline indicator. `avatar-offline`
  static const AvatarStyle offline = AvatarStyle('avatar-offline', type: StyleType.state);
}

/// A container for grouping multiple [Avatar] components.
///
/// It applies stacking and spacing to create a seamless group of avatars.
class AvatarGroup extends UiComponent {
  /// Creates an AvatarGroup component.
  ///
  /// - [children] or [child]: A list of [Avatar] components.
  /// - [style]: A list of general styling utilities.
  /// - Other parameters are inherited from [UiComponent].
  const AvatarGroup(
    super.children, {
    super.tag = 'div',
    super.style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  });

  @override
  String get baseClass => 'avatar-group';
  @override
  AvatarGroup copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return AvatarGroup(
      children,
      tag: tag,
      style: style,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/avatar/avatar.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/avatar/avatar_style.dart -->
import '../../base/component_style.dart';
import '../../base/style_type.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'avatar.dart';

/// A marker interface for any utility that can be passed to an [Avatar]'s
/// `style` list.
///
/// This allows for type-safe application of styles, ensuring only relevant
/// modifiers like presence indicators can be applied.
abstract class AvatarStyling implements Styling {}

/// Defines specific styling options for an [Avatar] component, such as its
/// online or offline status.
///
/// This is the concrete implementation class for avatar-specific modifiers. It
/// implements the [AvatarStyling] interface, making it a valid type for the
/// `style` property of an [Avatar] component.
class AvatarStyle extends ComponentStyle<AvatarStyle>
    with Breakpoints<AvatarStyle>
    implements AvatarStyling {
  /// Constructs an [AvatarStyle].
  ///
  /// - [cssClass]: The core CSS class string for this modifier (e.g., "avatar-online").
  /// - [type]: The [StyleType] categorizing this modifier.
  /// - [modifiers]: An optional list of [PrefixModifier]s for responsive styling.
  const AvatarStyle(
    super.cssClass, {
    required super.type,
    super.modifiers,
  });

  /// Creates a new instance of [AvatarStyle] with the provided modifiers.
  @override
  AvatarStyle create(List<PrefixModifier> modifiers) {
    return AvatarStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/avatar/avatar_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/badge/badge.dart -->
import 'package:jaspr/jaspr.dart';

import '../../base/style_type.dart';
import '../../base/ui_component.dart';
import '../../base/ui_component_attributes.dart';
import 'badge_style.dart';

/// A small visual indicator or label, often used for counts, statuses, or categories.
/// It typically renders as an HTML `<span>` with the 'badge' base class.
class Badge extends UiComponent {
  /// Creates a Badge component.
  ///
  /// - [children] or [child]: The content to display within the badge (e.g., text, an icon).
  /// - [tag]: The HTML tag for the root element, defaults to 'span'.
  /// - [style]: A list of [BadgeStyling].
  /// - [ariaLabel]: An optional accessible name for the badge.
  /// - Other parameters are inherited from [UiComponent].
  const Badge(
    super.children, {
    super.tag = 'span',
    List<BadgeStyling>? style,
    this.ariaLabel,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  }) : super(style: style);

  /// An optional string to use as an `aria-label` for the badge.
  final String? ariaLabel;

  @override
  String get baseClass => 'badge';

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);

    if (ariaLabel != null) {
      attributes.addAria('label', ariaLabel!);
    }
    // Consider role="status" if the badge content updates dynamically to convey status changes.
    // This is context-dependent and might be better applied by the user.
  }

  @override
  Badge copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return Badge(
      children,
      tag: tag,
      style: style as List<BadgeStyling>?,
      ariaLabel: ariaLabel,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }
  // --- Static Badge Styles ---

  // Styles
  /// Outline style badge. `badge-outline`
  static const BadgeStyle outline = BadgeStyle(
    'badge-outline',
    type: StyleType.border,
  );

  /// Dash outline style badge. `badge-dash` (New in DaisyUI 5)
  static const BadgeStyle dash = BadgeStyle(
    'badge-dash',
    type: StyleType.border,
  );

  /// Soft style badge. `badge-soft` (New in DaisyUI 5)
  static const BadgeStyle soft = BadgeStyle(
    'badge-soft',
    type: StyleType.style,
  );

  /// Ghost style badge (semi-transparent). `badge-ghost`
  static const BadgeStyle ghost = BadgeStyle(
    'badge-ghost',
    type: StyleType.style,
  );

  // Color styles
  /// Neutral color badge. `badge-neutral`
  static const BadgeStyle neutral = BadgeStyle(
    'badge-neutral',
    type: StyleType.style,
  );

  /// Primary color badge. `badge-primary`
  static const BadgeStyle primary = BadgeStyle(
    'badge-primary',
    type: StyleType.style,
  );

  /// Secondary color badge. `badge-secondary`
  static const BadgeStyle secondary = BadgeStyle(
    'badge-secondary',
    type: StyleType.style,
  );

  /// Accent color badge. `badge-accent`
  static const BadgeStyle accent = BadgeStyle(
    'badge-accent',
    type: StyleType.style,
  );

  /// Informational status color badge. `badge-info`
  static const BadgeStyle info = BadgeStyle(
    'badge-info',
    type: StyleType.style,
  );

  /// Success status color badge. `badge-success`
  static const BadgeStyle success = BadgeStyle(
    'badge-success',
    type: StyleType.style,
  );

  /// Warning status color badge. `badge-warning`
  static const BadgeStyle warning = BadgeStyle(
    'badge-warning',
    type: StyleType.style,
  );

  /// Error status color badge. `badge-error`
  static const BadgeStyle error = BadgeStyle(
    'badge-error',
    type: StyleType.style,
  );

  // Size styles
  /// Extra-small size badge. `badge-xs`
  static const BadgeStyle xs = BadgeStyle(
    'badge-xs',
    type: StyleType.sizing,
  );

  /// Small size badge. `badge-sm`
  static const BadgeStyle sm = BadgeStyle(
    'badge-sm',
    type: StyleType.sizing,
  );

  /// Medium size badge (often the default). `badge-md`
  static const BadgeStyle md = BadgeStyle(
    'badge-md',
    type: StyleType.sizing,
  );

  /// Large size badge. `badge-lg`
  static const BadgeStyle lg = BadgeStyle(
    'badge-lg',
    type: StyleType.sizing,
  );

  /// Extra-large size badge. `badge-xl` (New in DaisyUI 5)
  static const BadgeStyle xl = BadgeStyle(
    'badge-xl',
    type: StyleType.sizing,
  );
}

/// Helper methods for creating common badge patterns.
class BadgeHelper {
  /// Creates a badge with an icon and text.
  static Badge createIconBadge({
    required Component icon,
    required String text,
    List<BadgeStyling>? styles,
    String? classes,
    String? ariaLabel,
    Key? key,
  }) {
    return Badge(
      <Component>[icon, Component.text(text)],
      style: styles,
      classes: classes,
      ariaLabel: ariaLabel,
      key: key,
    );
  }

  /// Creates a notification badge, typically displaying a count.
  static Badge createNotificationBadge({
    required String count,
    List<BadgeStyling>? styles,
    String? classes,
    String? ariaLabel,
    Key? key,
  }) {
    return Badge(
      <Component>[Component.text(count)],
      style: styles,
      classes: classes,
      ariaLabel: ariaLabel ?? 'Notification count: $count',
      key: key,
    );
  }

  /// Creates an empty status badge, often used as a colored dot.
  /// An `ariaLabel` is highly recommended for accessibility if the badge's meaning isn't clear from context.
  static Badge createStatusBadge({
    List<BadgeStyling>? styles,
    String? classes,
    String? ariaLabel,
    Key? key,
  }) {
    return Badge(
      const <Component>[],
      style: styles,
      classes: classes,
      ariaLabel: ariaLabel,
      key: key,
    );
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/badge/badge.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/badge/badge_style.dart -->
import '../../base/component_style.dart';
import '../../base/style_type.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart' show Breakpoints, PrefixModifier;
import 'badge.dart';

/// Marker interface for any utility that can be passed to a [Badge]'s `styles` list.
abstract class BadgeStyling implements Styling {}

/// Represents component-specific utility classes that can be applied to a [Badge] component.
///
/// These modifiers control the appearance of the badge, such as its color,
/// style (e.g., outline), and size.
class BadgeStyle extends ComponentStyle<BadgeStyle>
    with Breakpoints<BadgeStyle>
    implements BadgeStyling {
  /// Constructs a [BadgeStyling].
  ///
  /// [cssClass]: The core CSS class string for this modifier (e.g., "badge-primary").
  /// [type]: The [StyleType] categorizing this modifier.
  /// [modifiers]: An optional list of [PrefixModifier]s already applied to this modifier.
  const BadgeStyle(super.cssClass, {required super.type, super.modifiers});

  @override
  BadgeStyle create(List<PrefixModifier> modifiers) {
    return BadgeStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/badge/badge_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/breadcrumbs/breadcrumbs.dart -->
import 'package:jaspr/jaspr.dart';

import '../../base/ui_component.dart';
import '../../base/ui_component_attributes.dart';
import 'breadcrumbs_style.dart';

/// A component for showing the hierarchy of the current page in a navigation path.
///
/// The `Breadcrumbs` component acts as a "smart container". It renders a `<div>`
/// with a nested `<ul>` and automatically wraps each of its direct children
/// (typically `<a>` tags or `deepyr` `Link` components) in an `<li>` tag. This
/// provides a clean and semantic API for the developer.
///
/// DaisyUI automatically adds dividers (e.g., '/') between the list items.
///
/// Example Usage:
/// ```dart
/// Breadcrumbs(
///   style: [TextUtil.sm],
///   [
///     // Use Jaspr's primitive `a()` or deepyr's `Link` for items
///     a([text('Home')], href: '/'),
///     a([text('Documents')], href: '/documents'),
///     // The last item is typically not a link
///     span([text('Add Document')]),
///   ],
/// )
/// ```
class Breadcrumbs extends UiComponent {
  /// Creates a Breadcrumbs component.
  ///
  /// - [children]: A list of components to be displayed as breadcrumb links.
  ///   Each child will be automatically wrapped in an `<li>` element.
  /// - [tag]: The HTML tag for the root element, defaults to 'div'.
  /// - [style]: A list of [BreadcrumbsStyling] instances. Use this for general
  ///   utilities like `TextUtil` to control the size of the breadcrumb text.
  /// - [ariaLabel]: An accessible name for the breadcrumb navigation. Defaults
  ///   to "Breadcrumb".
  /// - Other parameters are inherited from [UiComponent].
  const Breadcrumbs(
    super.children, {
    super.tag = 'div',
    List<BreadcrumbsStyling>? style,
    this.ariaLabel = 'Breadcrumb',
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.key,
  }) : super(style: style);

  /// An accessible name for the navigation region.
  final String? ariaLabel;

  @override
  String get baseClass => 'breadcrumbs';

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);
    // 'navigation' is a landmark role, making it easier for users of
    // assistive technologies to find and understand the component.
    attributes.addRole('navigation');
    if (ariaLabel != null && ariaLabel!.isNotEmpty) {
      attributes.addAria('label', ariaLabel!);
    }
  }

  /// Overridden build method to wrap children in `<li>` tags.
  @override
  Component build(BuildContext context) {
    // Automatically wrap each direct child in an `li` element.
    final listItems = children?.map((child) => li([child])).toList();

    // The main UiComponent build method will render the outer `div` with the
    // 'breadcrumbs' class. We provide the nested `ul` as its child.
    return Component.element(
      tag: tag,
      id: id,
      classes: combinedClasses,
      styles: this.css,
      attributes: componentAttributes,
      events: this.events,
      // DaisyUI structure is `div.breadcrumbs > ul > li > a`
      children: [ul(listItems ?? [])],
    );
  }

  @override
  Breadcrumbs copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return Breadcrumbs(
      children,
      tag: tag,
      style: style as List<BreadcrumbsStyling>?,
      ariaLabel: ariaLabel,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      key: key ?? this.key,
    );
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/breadcrumbs/breadcrumbs.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/breadcrumbs/breadcrumbs_style.dart -->
import '../../base/component_style.dart';
import '../../base/style_type.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'breadcrumbs.dart';

/// A marker interface for any utility that can be passed to a [Breadcrumbs]'
/// `style` list.
///
/// This allows for type-safe application of styles. `Breadcrumbs` has no specific
/// modifiers of its own, so this interface is primarily used to allow general
/// utilities (like `TextUtil`) to be applied.
abstract class BreadcrumbsStyling implements Styling {}

/// Defines specific styling options for a [Breadcrumbs] component.
///
/// This is the concrete implementation class for breadcrumbs-specific modifiers.
/// It implements the [BreadcrumbsStyling] interface. Currently, there are no
/// predefined static modifiers for `Breadcrumbs`, but this class provides a
/// consistent and extensible structure.
class BreadcrumbsStyle extends ComponentStyle<BreadcrumbsStyle>
    with Breakpoints<BreadcrumbsStyle>
    implements BreadcrumbsStyling {
  /// Constructs a [BreadcrumbsStyle].
  ///
  /// - [cssClass]: The core CSS class string for this modifier.
  /// - [type]: The [StyleType] categorizing this modifier.
  /// - [modifiers]: An optional list of [PrefixModifier]s for responsive styling.
  const BreadcrumbsStyle(super.cssClass, {required super.type, super.modifiers});

  /// Creates a new instance of [BreadcrumbsStyle] with the provided modifiers.
  @override
  BreadcrumbsStyle create(List<PrefixModifier> modifiers) {
    return BreadcrumbsStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/breadcrumbs/breadcrumbs_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/button/button.dart -->
import 'package:jaspr/jaspr.dart' show Key, Styles;

import '../../base/style_type.dart';
import '../../base/ui_component.dart';
import '../../base/ui_component_attributes.dart';
import 'button_style.dart';

/// Defines the valid HTML `type` attributes for a button element.
enum ButtonHtmlType {
  /// The button submits the form data to the server. This is the default if the
  /// attribute is not specified for buttons associated with a `<form>`,
  /// or if the attribute is an empty or invalid value.
  submit('submit'),

  /// The button resets all the controls to their initial values.
  reset('reset'),

  /// The button has no default behavior and does nothing when pressed by default.
  /// It can have client-side scripts listen to the element's events.
  /// This is the default if the `tag` is `<button>` and no `htmlType` is provided.
  button('button');

  const ButtonHtmlType(this.value);

  final String value;

  @override
  String toString() => value;
}

/// A clickable button component, used for actions in forms, dialogs, and more.
///
/// It can be rendered using different HTML tags (defaulting to `<button>`) and
/// styled with a variety of modifiers for color, size, shape, and state.
class Button extends UiComponent {
  /// Creates a Button component.
  ///
  /// - [children] or [child]: The content of the button (e.g., text, an icon).
  /// - [tag]: The HTML tag to use for the button, defaults to 'button'.
  /// - [htmlType]: The HTML 'type' attribute (e.g., submit, reset, button).
  ///   Relevant if `tag` is 'button'.
  /// - [role]: The ARIA role. Defaults to 'button' if `tag` is not '<button>' or
  ///   if a more specific button-like role (e.g., 'menuitem') is not provided.
  /// - [style]: A list of [ButtonStyling] (the interface) instances.
  /// - Other parameters are inherited from [UiComponent].
  const Button(
    super.children, {
    super.tag = 'button',
    this.htmlType,
    this.role,
    List<ButtonStyling>? style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.onClick,
    super.child,
    super.key,
  }) : super(style: style);

  /// The HTML 'type' attribute for the button.
  /// If the [tag] is 'button' and [htmlType] is null, it defaults to `ButtonHtmlType.button`.
  final ButtonHtmlType? htmlType;

  /// The ARIA role for the component.
  final String? role;

  @override
  String get baseClass => 'btn';

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);

    // 1. Set the HTML 'type' attribute
    if (tag == 'button') {
      attributes.add('type', (htmlType ?? ButtonHtmlType.button).value);
    } else if (htmlType != null) {
      // Allow type for other tags if specified, though less common for non-button tags.
      attributes.add('type', htmlType!.value);
    }

    // 2. Set the ARIA 'role' attribute
    if (role != null) {
      attributes.addRole(role!);
    } else if (tag != 'button' && tag != 'input') {
      // Inputs have implicit roles
      // Add role="button" if it's an anchor or div styled as a button
      attributes.addRole('button');
    }

    // 3. Handle disabled state:
    //    - If user provides 'disabled' in attributes, it takes precedence.
    //    - If `ButtonStyleModifier.disabled` is present, set HTML 'disabled' attribute
    //      and ARIA attributes for class-based disabling.
    final isDisabledByAttribute = userProvidedAttributes.containsKey('disabled');
    final isDisabledByStyle = style?.any(
          (styling) => styling is ButtonStyling && styling.cssClass == Button.disabled.cssClass,
        ) ??
        false;

    if (isDisabledByStyle && !isDisabledByAttribute) {
      attributes
        ..add('disabled', '')
        ..add('tabindex', '-1')
        ..addAria('disabled', 'true');
    } else if (isDisabledByAttribute) {
      // If native 'disabled' attribute is set by user, ARIA roles might not be strictly
      // necessary as browsers handle it, but adding them doesn't hurt.
      if (userProvidedAttributes['disabled'] != 'false') {
        // Ensure it's not explicitly false
        attributes.addAria('disabled', 'true');
      }
    }
  }

  @override
  Button copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return Button(
      children, // or this.child
      tag: tag,
      htmlType: htmlType,
      role: role,
      style: style as List<ButtonStyling>?,
      onClick: onClick,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      key: key ?? this.key,
      child: child,
    );
  }
  // --- Static Button Modifiers ---

  /// Neutral button style. `btn-neutral`
  static const ButtonStyle neutral = ButtonStyle(
    'btn-neutral',
    type: StyleType.style,
  );

  /// Primary button style. `btn-primary`
  static const ButtonStyle primary = ButtonStyle(
    'btn-primary',
    type: StyleType.style,
  );

  /// Secondary button style. `btn-secondary`
  static const ButtonStyle secondary = ButtonStyle(
    'btn-secondary',
    type: StyleType.style,
  );

  /// Accent button style. `btn-accent`
  static const ButtonStyle accent = ButtonStyle(
    'btn-accent',
    type: StyleType.style,
  );

  /// Info button style. `btn-info`
  static const ButtonStyle info = ButtonStyle(
    'btn-info',
    type: StyleType.style,
  );

  /// Success button style. `btn-success`
  static const ButtonStyle success = ButtonStyle(
    'btn-success',
    type: StyleType.style,
  );

  /// Warning button style. `btn-warning`
  static const ButtonStyle warning = ButtonStyle(
    'btn-warning',
    type: StyleType.style,
  );

  /// Error button style. `btn-error`
  static const ButtonStyle error = ButtonStyle(
    'btn-error',
    type: StyleType.style,
  );

  // Styles
  /// Outline button style. `btn-outline`
  static const ButtonStyle outline = ButtonStyle(
    'btn-outline',
    type: StyleType.style,
  ); // Was .border

  /// Dash button style. `btn-dash` (New in DaisyUI 5)
  static const ButtonStyle dash = ButtonStyle(
    'btn-dash',
    type: StyleType.style,
  );

  /// Soft button style. `btn-soft` (New in DaisyUI 5)
  static const ButtonStyle soft = ButtonStyle(
    'btn-soft',
    type: StyleType.style,
  );

  /// Ghost button style (transparent background). `btn-ghost`
  static const ButtonStyle ghost = ButtonStyle(
    'btn-ghost',
    type: StyleType.style,
  );

  /// Link button style (looks like a hyperlink). `btn-link`
  static const ButtonStyle link = ButtonStyle(
    'btn-link',
    type: StyleType.style,
  );

  // Behavior modifiers
  /// Active button state (appears pressed). `btn-active`
  static const ButtonStyle active = ButtonStyle(
    'btn-active',
    type: StyleType.state,
  );

  /// Disabled button state (styles the button as disabled). `btn-disabled`
  /// The HTML 'disabled' attribute and ARIA attributes will also be managed by `configureAttributes`.
  static const ButtonStyle disabled = ButtonStyle(
    'btn-disabled',
    type: StyleType.state,
  );

  // Size modifiers
  /// Extra small button size. `btn-xs`
  static const ButtonStyle xs = ButtonStyle(
    'btn-xs',
    type: StyleType.sizing,
  );

  /// Small button size. `btn-sm`
  static const ButtonStyle sm = ButtonStyle(
    'btn-sm',
    type: StyleType.sizing,
  );

  /// Medium button size (default). `btn-md`
  static const ButtonStyle md = ButtonStyle(
    'btn-md',
    type: StyleType.sizing,
  );

  /// Large button size. `btn-lg`
  static const ButtonStyle lg = ButtonStyle(
    'btn-lg',
    type: StyleType.sizing,
  );

  /// Extra large button size. `btn-xl` (New in DaisyUI 5)
  static const ButtonStyle xl = ButtonStyle(
    'btn-xl',
    type: StyleType.sizing,
  );

  // General modifiers
  /// Wide button style (takes more horizontal space). `btn-wide`
  static const ButtonStyle wide = ButtonStyle(
    'btn-wide',
    type: StyleType.additional,
  );

  /// Block level button style (takes full width of its parent). `btn-block`
  static const ButtonStyle block = ButtonStyle(
    'btn-block',
    type: StyleType.additional,
  );

  /// Square button shape. `btn-square`
  static const ButtonStyle square = ButtonStyle(
    'btn-square',
    type: StyleType.form,
  );

  /// Circle button shape. `btn-circle`
  static const ButtonStyle circle = ButtonStyle(
    'btn-circle',
    type: StyleType.form,
  );
}

<!-- END FILE: packages/deepyr/lib/src/components/button/button.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/button/button_style.dart -->
import '../../base/component_style.dart';
import '../../base/style_type.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'button.dart';

/// Marker interface for any utility that can be passed to a [Button]'s `modifiers` list.
abstract class ButtonStyling implements Styling {}

/// Represents component-specific utility classes for the [Button] component.
///
/// These modifiers control the appearance and state of the button, such as its
/// color, size, shape (e.g., square, circle), and operational state (e.g., disabled).
class ButtonStyle extends ComponentStyle<ButtonStyle>
    with Breakpoints<ButtonStyle>
    implements ButtonStyling {
  /// Constructs a [ButtonStyle].
  ///
  /// [cssClass]: The core CSS class string for this modifier (e.g., "btn-primary").
  /// [type]: The [StyleType] categorizing this modifier.
  /// [modifiers]: An optional list of [PrefixModifier]s already applied to this modifier.
  const ButtonStyle(
    super.cssClass, {
    required super.type,
    super.modifiers,
  });

  @override
  ButtonStyle create(List<PrefixModifier> modifiers) {
    return ButtonStyle(
      cssClass,
      type: type,
      modifiers: modifiers,
    );
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/button/button_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/card/card.dart -->
import 'package:jaspr/jaspr.dart';

import '../../base/style_type.dart';
import '../../base/styling.dart';
import '../../base/ui_component.dart';
import '../../base/ui_component_attributes.dart';
import '../../base/utilities/alignment.dart';
import '../../elements/figure.dart';
import 'card_style.dart';

/// A content container, often used to display information in a structured layout.
/// It typically renders as an HTML `<div>` element with the 'card' base class.
/// The `modifiers` list accepts instances of [CardStyling] (the interface),
/// which includes specific card styles and general utility classes.
class Card extends UiComponent {
  /// Creates a Card component.
  ///
  /// - [children] or [child]: The content, typically [CardBody], [Figure], [CardActions].
  /// - [tag]: The HTML tag, defaults to 'div'.
  /// - [style]: A list of [CardStyling] (the interface) instances.
  /// - [ariaLabel], [ariaLabelledBy]: For accessibility.
  /// - Other parameters from [UiComponent].
  const Card(
    super.children, {
    super.tag = 'div',
    List<CardStyling>? style,
    this.ariaLabel,
    this.ariaLabelledBy,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.onClick,
    super.key,
  }) : super(style: style);

  final String? ariaLabel;
  final String? ariaLabelledBy;

  @override
  String get baseClass => 'card';

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);

    if (ariaLabel != null) {
      attributes.addAria('label', ariaLabel!);
    }
    if (ariaLabelledBy != null) {
      attributes.addAria('labelledby', ariaLabelledBy!);
    }
    // Role "group" or "region" could be applicable depending on context,
    // but not applied by default.
  }

  @override
  Card copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return Card(
      children,
      tag: tag,
      style: style as List<CardStyling>?,
      ariaLabel: ariaLabel,
      ariaLabelledBy: ariaLabelledBy,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      onClick: onClick,
      key: key ?? this.key,
    );
  }
  // --- Static Card Modifiers ---

  // Style Modifiers
  /// Adds a solid border to the card. `card-border`
  static const CardStyle border = CardStyle(
    'card-border',
    type: StyleType.style,
  );

  /// Adds a dashed border to the card. `card-dash` (New in DaisyUI 5)
  static const CardStyle dash = CardStyle(
    'card-dash',
    type: StyleType.style,
  );

  /// Styles the card for full-width image display, where the image becomes the background. `image-full`
  static const CardStyle imageFull = CardStyle(
    'image-full',
    type: StyleType.style,
  );

  // Modifier
  /// Styles the card for a side-by-side layout, typically image on one side, body on the other. `card-side`
  static const CardStyle side = CardStyle(
    'card-side',
    type: StyleType.layout,
  );

  // Size Modifiers (padding and overall look)
  /// Extra small card size/padding. `card-xs` (New in DaisyUI 5)
  static const CardStyle xs = CardStyle(
    'card-xs',
    type: StyleType.sizing,
  );

  /// Small card size/padding. `card-sm`
  static const CardStyle sm = CardStyle(
    'card-sm',
    type: StyleType.sizing,
  );

  /// Medium card size/padding (default). `card-md`
  static const CardStyle md = CardStyle(
    'card-md',
    type: StyleType.sizing,
  );

  /// Large card size/padding. `card-lg`
  static const CardStyle lg = CardStyle(
    'card-lg',
    type: StyleType.sizing,
  );

  /// Extra large card size/padding. `card-xl` (New in DaisyUI 5)
  static const CardStyle xl = CardStyle(
    'card-xl',
    type: StyleType.sizing,
  );

  // 'glass' was previously a CardStyleModifier. In DaisyUI 5, 'glass' is a general utility
  // that can be applied to any element, including cards. It should be used as a general Effect.
  // Example: Card([...], styles: [Effects.glass])
}

/// The main content area of a [Card].
/// Typically renders as an HTML `<div>` element with the 'card-body' class.
class CardBody extends UiComponent {
  /// Creates a CardBody component.
  ///
  /// styles can include general utilities like `Spacing` or `Typography`.
  const CardBody(
    super.children, {
    super.tag = 'div',
    super.style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  });

  @override
  String get baseClass => 'card-body';

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);
  }

  @override
  CardBody copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return CardBody(
      children,
      tag: tag,
      style: style,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }
}

/// The title section of a [Card].
/// Typically renders as an HTML `<h2>` element with the 'card-title' class.
class CardTitle extends UiComponent {
  /// Creates a CardTitle component.
  /// Its `id` can be used by the parent [Card]'s `aria-labelledby` attribute.
  /// modifiers can include general utilities like `Typography`.
  const CardTitle(
    super.children, {
    super.tag = 'h2',
    super.style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  });

  @override
  String get baseClass => 'card-title';

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);
  }

  @override
  CardTitle copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return CardTitle(
      children,
      tag: tag,
      style: style,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }
}

/// A container for action elements (like buttons) within a [Card].
/// Typically renders as an HTML `<div>` element with the 'card-actions' class.
class CardActions extends UiComponent {
  /// Creates a CardActions component.
  /// [style] can include general utilities like `Layout` for alignment.
  const CardActions(
    super.children, {
    super.tag = 'div',
    super.style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  });

  @override
  String get baseClass => 'card-actions';

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);
  }

  @override
  CardActions copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return CardActions(
      children,
      tag: tag,
      style: style,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }
}

/// Helper methods for creating common card patterns.
class CardHelper {
  /// Creates a basic card with title, content, and optional actions.
  static Card createBasicCard({
    required String titleText,
    required List<Component> content,
    String? imageUrl, // Optional image
    String? imageAlt,
    List<Component>? actions,
    List<CardStyling>? cardStyles,
    List<Styling>? figureStyles,
    String? cardClasses = 'w-96 bg-base-100 shadow-sm', // Default classes from DaisyUI examples
    String? cardId,
    String? titleId,
    Key? key,
  }) {
    final cardChildren = <Component>[];

    if (imageUrl != null) {
      cardChildren.add(
        Figure([
          img(src: imageUrl, alt: imageAlt ?? 'Card image'),
        ], style: figureStyles),
      );
    }

    final bodyChildren = <Component>[
      CardTitle([Component.text(titleText)], id: titleId),
      ...content,
    ];
    if (actions != null && actions.isNotEmpty) {
      bodyChildren.add(
        CardActions(
          actions,
          style: const [Alignment.justifyEnd],
        ), // Default to justify-end for actions
      );
    }
    cardChildren.add(CardBody(bodyChildren));

    return Card(
      cardChildren,
      id: cardId,
      style: cardStyles,
      classes: cardClasses,
      ariaLabelledBy: titleId,
      key: key,
    );
  }

  // Other helpers can be added if needed, e.g., for specific complex card layouts.
}

<!-- END FILE: packages/deepyr/lib/src/components/card/card.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/card/card_style.dart -->
import '../../base/component_style.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'card.dart';

/// Marker interface for any utility that can be passed to a [Card]'s `modifiers` list.
abstract class CardStyling implements Styling {}

/// Defines specific styling options for a [Card] component.
/// Implements the [CardStyling] interface.
class CardStyle extends ComponentStyle<CardStyle>
    with Breakpoints<CardStyle>
    implements CardStyling {
  // Implements the CardModifier INTERFACE
  const CardStyle(super.cssClass, {required super.type, super.modifiers});

  @override
  CardStyle create(List<PrefixModifier> modifiers) {
    return CardStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/card/card_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/checkbox/checkbox.dart -->
import 'package:jaspr/jaspr.dart'
    show BuildContext, Component, EventCallback, Key, Styles, ValueChanged, kIsWeb;
import 'package:universal_web/web.dart' show Event, HTMLInputElement;

import '../../base/style_type.dart';
import '../../base/ui_component.dart';
import '../../base/ui_component_attributes.dart';
import '../../base/ui_events.dart';
import 'checkbox_style.dart';

/// A checkbox component that allows users to select or deselect a value.
/// It renders an `<input type="checkbox">`.
///
/// The `Checkbox` is a **controlled component**. Its state is not managed internally.
/// Instead, you must provide its current state via the [isChecked] property and
/// handle state changes with the [onToggle] callback. This ensures that the UI
/// is always a direct reflection of your application's state.
///
/// Example of state management in a `StatefulComponent`:
/// ```dart
/// class MyForm extends StatefulComponent {
///   bool _agreedToTerms = false;
///
///   @override
///   State<MyForm> createState() => _MyFormState();
/// }
///
/// class _MyFormState extends State<MyForm> {
///   @override
///   Component build(BuildContext context) {
///     return Checkbox(
///       isChecked: _agreedToTerms,
///       onToggle: (newValue) {
///         setState(() => _agreedToTerms = newValue);
///       },
///     );
///   }
/// }
/// ```
class Checkbox extends UiComponent {
  /// Creates a Checkbox component.
  ///
  /// - [isChecked]: The current checked state of the checkbox.
  /// - [onToggle]: A callback that fires when the user clicks the checkbox. It
  ///   receives the new potential boolean state. You should use this callback
  ///   to update your application's state.
  /// - [disabled]: If true, the checkbox will be non-interactive.
  /// - [style]: A list of [CheckboxStyling] instances for styling.
  /// - Other parameters are inherited from [UiComponent].
  const Checkbox({
    this.isChecked = false,
    this.onToggle,
    this.disabled = false,
    super.tag = 'input',
    List<CheckboxStyling>? style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.eventHandlers,
    super.key,
  }) : super(null, style: style); // Checkbox elements have no children.

  /// The current checked state of the checkbox.
  final bool isChecked;

  /// Callback function invoked when the checkbox's state changes.
  final ValueChanged<bool>? onToggle;

  /// If true, the checkbox is non-interactive.
  final bool disabled;

  @override
  String get baseClass => 'checkbox';

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);
    attributes.add('type', 'checkbox');
    if (isChecked) {
      attributes.add('checked', '');
    }
    if (disabled) {
      attributes.add('disabled', '');
    }
  }

  @override
  Checkbox copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Map<String, List<UiEventHandler>>? eventHandlers,
    Key? key,
  }) {
    return Checkbox(
      isChecked: isChecked,
      onToggle: onToggle,
      disabled: disabled,
      tag: tag,
      style: style as List<CheckboxStyling>?,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      eventHandlers: eventHandlers ?? this.eventHandlers,
      key: key ?? this.key,
    );
  }

  /// Overrides the default build method to provide a type-safe `onToggle` callback.
  ///
  /// The base `UiComponent`'s `onChange` event is designed for string values from text inputs.
  /// This override creates a specific event handler for the checkbox's boolean `checked` property,
  /// ensuring it only runs on the client and uses safe type casting.
  @override
  Component build(BuildContext context) {
    // Start with the standard events from the base class.
    final eventMap = Map<String, EventCallback>.from(events);

    if (onToggle != null) {
      eventMap['change'] = (dynamic event) {
        // Guard for web-only execution to prevent errors during SSR.
        if (kIsWeb) {
          // Use explicit casting (`as`) which is the idiomatic way to handle
          // known event types from JS interop, avoiding analyzer warnings.
          final target = (event as Event).target! as HTMLInputElement;
          onToggle!(target.checked);
        }
      };
    }

    return Component.element(
      tag: tag,
      id: id,
      classes: combinedClasses,
      styles: css,
      attributes: componentAttributes,
      events: eventMap,
      // A checkbox has no children.
    );
  }

  // --- Static Style Modifiers ---

  // Colors
  /// Primary color. `checkbox-primary`
  static const CheckboxStyle primary = CheckboxStyle('checkbox-primary', type: StyleType.style);

  /// Secondary color. `checkbox-secondary`
  static const CheckboxStyle secondary = CheckboxStyle('checkbox-secondary', type: StyleType.style);

  /// Accent color. `checkbox-accent`
  static const CheckboxStyle accent = CheckboxStyle('checkbox-accent', type: StyleType.style);

  /// Neutral color. `checkbox-neutral`
  static const CheckboxStyle neutral = CheckboxStyle('checkbox-neutral', type: StyleType.style);

  /// Success color. `checkbox-success`
  static const CheckboxStyle success = CheckboxStyle('checkbox-success', type: StyleType.style);

  /// Warning color. `checkbox-warning`
  static const CheckboxStyle warning = CheckboxStyle('checkbox-warning', type: StyleType.style);

  /// Info color. `checkbox-info`
  static const CheckboxStyle info = CheckboxStyle('checkbox-info', type: StyleType.style);

  /// Error color. `checkbox-error`
  static const CheckboxStyle error = CheckboxStyle('checkbox-error', type: StyleType.style);

  // Sizes
  /// Extra-small size. `checkbox-xs`
  static const CheckboxStyle xs = CheckboxStyle('checkbox-xs', type: StyleType.sizing);

  /// Small size. `checkbox-sm`
  static const CheckboxStyle sm = CheckboxStyle('checkbox-sm', type: StyleType.sizing);

  /// Medium size (default). `checkbox-md`
  static const CheckboxStyle md = CheckboxStyle('checkbox-md', type: StyleType.sizing);

  /// Large size. `checkbox-lg`
  static const CheckboxStyle lg = CheckboxStyle('checkbox-lg', type: StyleType.sizing);

  /// Extra-large size. `checkbox-xl`
  static const CheckboxStyle xl = CheckboxStyle('checkbox-xl', type: StyleType.sizing);
}

<!-- END FILE: packages/deepyr/lib/src/components/checkbox/checkbox.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/checkbox/checkbox_style.dart -->
import '../../base/component_style.dart';
import '../../base/style_type.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'checkbox.dart';

/// A marker interface for any utility that can be passed to a [Checkbox]'s `style` list.
///
/// This allows for type-safe application of styles for colors and sizes.
abstract class CheckboxStyling implements Styling {}

/// Defines specific styling options for a [Checkbox] component.
///
/// This is the concrete implementation class for checkbox-specific modifiers.
/// It implements the [CheckboxStyling] interface, making it a valid type for the
/// `style` property of a [Checkbox] component.
class CheckboxStyle extends ComponentStyle<CheckboxStyle>
    with Breakpoints<CheckboxStyle>
    implements CheckboxStyling {
  /// Constructs a [CheckboxStyle].
  ///
  /// - [cssClass]: The core CSS class string for this modifier (e.g., "checkbox-primary").
  /// - [type]: The [StyleType] categorizing this modifier.
  /// - [modifiers]: An optional list of [PrefixModifier]s for responsive styling.
  const CheckboxStyle(
    super.cssClass, {
    required super.type,
    super.modifiers,
  });

  /// Creates a new instance of [CheckboxStyle] with the provided modifiers.
  @override
  CheckboxStyle create(List<PrefixModifier> modifiers) {
    return CheckboxStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/checkbox/checkbox_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/collapse/collapse.dart -->
import 'package:jaspr/jaspr.dart';
import 'package:universal_web/web.dart' show Event, HTMLInputElement;

import '../../../deepyr.dart';
import '../../base/style_type.dart';
import 'collapse_style.dart';

/// Defines the activation mechanism for a [Collapse] component.
enum CollapseMethod {
  /// The component opens when it receives focus and closes when it loses focus (on blur).
  ///
  /// This method renders a `<div>` with `tabindex="0"`. It is suitable for simple,
  /// non-persistent content reveals.
  focus,

  /// The component toggles between open and closed states on each click.
  ///
  /// This method renders a hidden `<input type="checkbox">` internally to manage the state.
  /// The state persists until the component is clicked again.
  checkbox,

  /// The component uses the native HTML `<details>` and `<summary>` elements.
  ///
  /// This is a semantically correct and accessible method, but it does not support
  /// CSS transitions for the open/close animation. The state is managed by the browser.
  details,
}

/// A component for showing and hiding content in a collapsible panel.
///
/// It can be activated by focus, a checkbox, or by using the native `<details>` element,
/// controlled by the [method] property.
class Collapse extends UiComponent {
  /// Creates a Collapse component.
  ///
  /// - [title]: The component for the always-visible title area.
  /// - [content]: The component for the collapsible content area.
  /// - [method]: The activation mechanism to use. Defaults to [CollapseMethod.focus].
  /// - [initiallyOpen]: If `true`, the component will be open on first render.
  ///   This applies to the `checkbox` and `details` methods.
  /// - [onToggle]: A callback for the `checkbox` method that fires when the state
  ///   changes, providing the new open state (`true` for open, `false` for closed).
  /// - [style]: A list of [CollapseStyling] modifiers, such as [Collapse.arrow]
  ///   or [Collapse.plus], to customize the appearance.
  const Collapse({
    required this.title,
    required this.content,
    this.method = CollapseMethod.focus,
    this.initiallyOpen = false,
    this.onToggle,
    super.style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.key,
  }) : super(null, tag: 'div');

  /// The content for the visible, clickable title bar.
  final Component title;

  /// The content that is shown or hidden when the component is toggled.
  final Component content;

  /// The activation method determining the underlying HTML structure and behavior.
  final CollapseMethod method;

  /// Determines if the component is open by default.
  ///
  /// For [CollapseMethod.checkbox], this sets the initial `checked` state.
  /// For [CollapseMethod.details], this adds the `open` attribute.
  /// This property has no effect on the `focus` method.
  final bool initiallyOpen;

  /// A callback that is invoked when the state of a `checkbox`-based collapse changes.
  ///
  /// This is only applicable when `method` is [CollapseMethod.checkbox].
  final ValueChanged<bool>? onToggle;

  @override
  String get baseClass => 'collapse';

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);

    switch (method) {
      case CollapseMethod.focus:
        // Make the div focusable to enable the :focus CSS pseudo-class.
        if (!userProvidedAttributes.containsKey('tabindex')) {
          attributes.add('tabindex', '0');
        }
      case CollapseMethod.details:
        // Set the initial open state for the <details> element.
        if (initiallyOpen) {
          attributes.add('open', '');
        }
      case CollapseMethod.checkbox:
        // No specific attributes needed on the root element for the checkbox method.
        break;
    }
  }

  @override
  Collapse copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return Collapse(
      title: title,
      content: content,
      method: method,
      initiallyOpen: initiallyOpen,
      onToggle: onToggle,
      style: style,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      key: key ?? this.key,
    );
  }

  @override
  Component build(BuildContext context) {
    final titleComponent = div(classes: 'collapse-title font-semibold', [title]);
    final contentComponent = div(classes: 'collapse-content text-sm', [content]);

    final List<Component> children;
    var effectiveTag = 'div';

    switch (method) {
      case CollapseMethod.focus:
        children = [titleComponent, contentComponent];
      case CollapseMethod.checkbox:
        children = [
          input(
            type: InputType.checkbox,
            attributes: {
              if (initiallyOpen) 'checked': 'checked',
            },
            events: onToggle != null
                ? {
                    'change': (dynamic rawEvent) {
                      if (kIsWeb) {
                        final target = (rawEvent as Event).target! as HTMLInputElement;
                        onToggle!(target.checked);
                      }
                    },
                  }
                : null,
          ),
          titleComponent,
          contentComponent,
        ];
      case CollapseMethod.details:
        effectiveTag = 'details';
        children = [
          summary(classes: 'collapse-title font-semibold', [title]),
          contentComponent, // In <details>, content is a direct child
        ];
    }

    // return a single DomComponent with the determined tag and children.
    return Component.element(
      tag: effectiveTag,
      id: id,
      classes: combinedClasses,
      styles: this.css,
      attributes: componentAttributes,
      events: this.events,
      children: children,
    );
  }

  // --- Static Style Modifiers ---

  /// Adds an arrow icon to the collapse component.
  static const CollapseStyle arrow = CollapseStyle(
    'collapse-arrow',
    type: StyleType.additional,
  );

  /// Adds a plus/minus icon to the collapse component.
  static const CollapseStyle plus = CollapseStyle(
    'collapse-plus',
    type: StyleType.additional,
  );

  /// Forces the component to be visually open, overriding its current state.
  /// Note: This does not work for the `details` method.
  static const CollapseStyle open = CollapseStyle(
    'collapse-open',
    type: StyleType.state,
  );

  /// Forces the component to be visually closed, overriding its current state.
  /// Note: This does not work for the `details` method.
  static const CollapseStyle close = CollapseStyle(
    'collapse-close',
    type: StyleType.state,
  );
}

<!-- END FILE: packages/deepyr/lib/src/components/collapse/collapse.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/collapse/collapse_style.dart -->
import '../../base/component_style.dart';
import '../../base/style_type.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'collapse.dart' show Collapse;

/// A marker interface for any utility that can be passed to a [Collapse]'s `style` list.
///
/// This allows for type-safe application of styles. Both component-specific styles
/// (like [CollapseStyle]) and applicable general utilities can implement this interface.
abstract class CollapseStyling implements Styling {}

/// Defines specific styling options for a [Collapse] component, such as adding
/// an icon or forcing its state.
///
/// This is the concrete implementation class for collapse-specific modifiers.
/// It implements the [CollapseStyling] interface, making it a valid type for the
/// `style` property of a [Collapse] component.
class CollapseStyle extends ComponentStyle<CollapseStyle>
    with Breakpoints<CollapseStyle>
    implements CollapseStyling {
  /// Constructs a [CollapseStyle].
  ///
  /// - [cssClass]: The core CSS class string for this modifier (e.g., "collapse-arrow").
  /// - [type]: The [StyleType] categorizing this modifier.
  /// - [modifiers]: An optional list of [PrefixModifier]s for responsive or state-based styling.
  const CollapseStyle(
    super.cssClass, {
    required super.type,
    super.modifiers,
  });

  /// Creates a new instance of [CollapseStyle] with the provided modifiers.
  /// This is an internal method used by the fluent API (`.at()`, `.on()`).
  @override
  CollapseStyle create(List<PrefixModifier> modifiers) {
    return CollapseStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/collapse/collapse_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/datalist/datalist.dart -->
import 'package:jaspr/jaspr.dart';

/// A component that renders an HTML `<datalist>` element.
///
/// A datalist is used to provide an "autocomplete" feature for `<input>`
/// elements. It contains a set of `<option>` elements that represent the
/// predefined values for the input. The datalist itself is not displayed;
/// it is just a container for the options.
///
/// To associate a datalist with an input, the `id` of the datalist must
/// match the `list` attribute of the input.
///
/// Example:
/// ```dart
/// Input(
///   attributes: {'list': 'browsers'},
///   // ... other properties
/// ),
/// Datalist(
///   id: 'browsers',
///   [
///     option(attributes: {'value': 'Edge'}),
///     option(attributes: {'value': 'Firefox'}),
///     option(attributes: {'value': 'Chrome'}),
///     option(attributes: {'value': 'Opera'}),
///     option(attributes: {'value': 'Safari'}),
///   ],
/// ),
/// ```
class Datalist extends StatelessComponent {
  /// Creates a Datalist component.
  ///
  /// - [id]: **Required.** The unique ID for this datalist. This ID is used by
  ///   an `<input>` element's `list` attribute to bind them together.
  /// - [children]: A list of Jaspr `option()` components that define the
  ///   predefined values for the associated input.
  const Datalist(
    this.children, {
    required this.id,
    super.key,
  });

  /// The list of `option()` components.
  final List<Component> children;

  /// The unique ID for the datalist.
  final String id;

  @override
  Component build(BuildContext context) {
    return Component.element(
      tag: 'datalist',
      id: id,
      children: children,
    );
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/datalist/datalist.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/diff/diff.dart -->
import 'package:jaspr/jaspr.dart' show Key, Styles;

import '../../base/styling.dart' show Styling;
import '../../base/ui_component.dart';
import '../../base/ui_component_attributes.dart';
import 'diff_style.dart';

/// A component for visually comparing two pieces of content ("before" and "after")
/// side-by-side, typically using a draggable resizer.
///
/// The `modifiers` list accepts instances of [DiffStyling] (the interface),
/// which includes specific diff styles like [Diff.roundedField]
/// and general utility classes (e.g., `Sizing.aspectRatio`).
class Diff extends UiComponent {
  /// Creates a Diff component.
  ///
  /// - [item1]: The [DiffItem1] component representing the "before" state.
  /// - [item2]: The [DiffItem2] component representing the "after" state.
  /// - [tag]: The HTML tag for the root element, defaults to 'div'. Can be set to 'figure'.
  /// - [focusable]: If true, sets `tabindex="0"` on the main diff container, making it focusable.
  /// - [style]: A list of [DiffStyling] (the interface) instances.
  /// - Other parameters are inherited from [UiComponent].
  Diff({
    required this.item1,
    required this.item2,
    super.tag = 'div',
    this.focusable = false,
    List<DiffStyling>? style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.key,
  }) : super([item1, item2, const DiffResizer()], style: style);

  /// The "before" item in the comparison.
  final DiffItem1 item1;

  /// The "after" item in the comparison.
  final DiffItem2 item2;

  /// If true, makes the main diff container focusable using `tabindex="0"`.
  final bool focusable;

  @override
  String get baseClass => 'diff';

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);
    if (focusable) {
      attributes.add('tabindex', '0');
    }
    // ARIA attributes for the diff component itself might relate to it being a composite widget,
    // but this depends heavily on JavaScript-driven interactivity for the resizer.
    // For a CSS-only version, `role="group"` with a label might be suitable.
    // attributes.addRole('group');
    // attributes.addAria('label', 'Image comparison tool'); // User should provide this if needed
  }

  @override
  Diff copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return Diff(
      item1: item1,
      item2: item2,
      tag: tag,
      focusable: focusable,
      style: style as List<DiffStyling>?,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      key: key ?? this.key,
    );
  }
}

/// Represents the first item (typically "before" or "old") in a [Diff] comparison.
/// It renders as an HTML `<div>` with the 'diff-item-1' class.
class DiffItem1 extends UiComponent {
  /// Creates a DiffItem1 component.
  ///
  /// - [children] or [child]: The content of this diff item.
  /// - [tag]: The HTML tag, defaults to 'div'.
  /// - [role]: Optional ARIA role for the item (e.g., "img" if it contains an image).
  /// - [focusable]: If true, sets `tabindex="0"` on this item, making it focusable.
  /// - [modifiers]: General [Styling] instances for styling.
  /// - Other parameters from [UiComponent].
  const DiffItem1(
    super.children, {
    super.tag = 'div',
    this.role,
    this.focusable = false,
    super.style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  });

  final String? role;
  final bool focusable;

  @override
  String get baseClass => 'diff-item-1';

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);
    if (role != null) {
      attributes.addRole(role!);
    }
    if (focusable) {
      attributes.add('tabindex', '0');
    }
  }

  @override
  DiffItem1 copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return DiffItem1(
      children,
      tag: tag,
      role: role,
      focusable: focusable,
      style: style,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }
}

/// Represents the second item (typically "after" or "new") in a [Diff] comparison.
/// It renders as an HTML `<div>` with the 'diff-item-2' class.
class DiffItem2 extends UiComponent {
  /// Creates a DiffItem2 component.
  ///
  /// - [children] or [child]: The content of this diff item.
  /// - [tag]: The HTML tag, defaults to 'div'.
  /// - [role]: Optional ARIA role for the item (e.g., "img" if it contains an image).
  /// - [modifiers]: General [Styling] instances for styling.
  /// - Other parameters from [UiComponent].
  const DiffItem2(
    super.children, {
    super.tag = 'div',
    this.role,
    super.style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  });

  final String? role;

  @override
  String get baseClass => 'diff-item-2';

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);
    if (role != null) {
      attributes.addRole(role!);
    }
  }

  @override
  DiffItem2 copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return DiffItem2(
      children,
      tag: tag,
      role: role,
      style: style,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }
}

/// Represents the draggable resizer control within a [Diff] component.
/// It renders as an HTML `<div>` with the 'diff-resizer' class.
class DiffResizer extends UiComponent {
  /// Creates a DiffResizer component.
  /// This component typically does not have children.
  const DiffResizer({
    super.tag = 'div',
    super.style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.key,
  }) : super(null);

  @override
  String get baseClass => 'diff-resizer';

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);
    // For accessibility, if the resizer is made keyboard operable (usually via JS):
    // attributes.addRole('slider'); // Or 'separator' with more ARIA
    // attributes.addAria('orientation', 'vertical'); // Or 'horizontal'
    // attributes.addAria('valuenow', '50'); // Example, would need state
    // attributes.addAria('valuemin', '0');
    // attributes.addAria('valuemax', '100');
    // attributes.add('tabindex', '0'); // Make it focusable
  }

  @override
  DiffResizer copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return DiffResizer(
      tag: tag,
      style: style,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      key: key ?? this.key,
    );
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/diff/diff.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/diff/diff_style.dart -->
import '../../base/component_style.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'diff.dart';

/// Marker interface for any utility that can be passed to a [Diff]'s `modifiers` list.
abstract class DiffStyling implements Styling {}

/// Defines specific styling options for a [Diff] component, if any are introduced in the future.
/// Currently, Diff styling is primarily through general utilities or child component styling.
/// Implements the [DiffStyling] interface to be usable in the Diff's `modifiers` list.
class DiffStyle extends ComponentStyle<DiffStyle>
    with Breakpoints<DiffStyle>
    implements DiffStyling {
  // Implements the DiffModifier INTERFACE
  const DiffStyle(super.cssClass, {required super.type, super.modifiers});

  @override
  DiffStyle create(List<PrefixModifier> modifiers) {
    return DiffStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/diff/diff_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/divider/divider.dart -->
import 'package:jaspr/jaspr.dart' show Key, Styles;

import '../../base/style_type.dart';
import '../../base/ui_component.dart';
import '../../base/ui_component_attributes.dart';
import 'divider_style.dart';

/// A component used to separate content vertically or horizontally.
///
/// It renders as an HTML `<div>` with `role="separator"`. The divider can
/// either be a simple line (by passing an empty list of children) or contain
/// text in the middle.
///
/// Example Usage:
/// ```dart
/// div(classes: 'flex flex-col w-full', [
///   div(classes: 'card', [text('Content A')]),
///   Divider([text('OR')], style: [Divider.primary]),
///   div(classes: 'card', [text('Content B')]),
/// ])
/// ```
class Divider extends UiComponent {
  /// Creates a Divider component.
  ///
  /// - [children]: The content to display within the divider (e.g., `[text('OR')]`).
  ///   If an empty list or null is provided, a simple line without text is rendered.
  /// - [tag]: The HTML tag for the root element, defaults to 'div'.
  /// - [style]: A list of [DividerStyling] instances to control the color,
  ///   direction, and text placement.
  /// - Other parameters are inherited from [UiComponent].
  const Divider(
    super.children, {
    super.tag = 'div',
    List<DividerStyling>? super.style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  });

  @override
  String get baseClass => 'divider';

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);
    // A divider is a separator, which is an important semantic role for accessibility.
    if (!userProvidedAttributes.containsKey('role')) {
      attributes.addRole('separator');
    }
  }

  @override
  Divider copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return Divider(
      children,
      tag: tag,
      style: style as List<DividerStyling>?,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }

  // --- Static Style Modifiers ---

  // Colors
  /// Neutral color. `divider-neutral`
  static const DividerStyle neutral = DividerStyle('divider-neutral', type: StyleType.style);

  /// Primary color. `divider-primary`
  static const DividerStyle primary = DividerStyle('divider-primary', type: StyleType.style);

  /// Secondary color. `divider-secondary`
  static const DividerStyle secondary = DividerStyle('divider-secondary', type: StyleType.style);

  /// Accent color. `divider-accent`
  static const DividerStyle accent = DividerStyle('divider-accent', type: StyleType.style);

  /// Success color. `divider-success`
  static const DividerStyle success = DividerStyle('divider-success', type: StyleType.style);

  /// Warning color. `divider-warning`
  static const DividerStyle warning = DividerStyle('divider-warning', type: StyleType.style);

  /// Info color. `divider-info`
  static const DividerStyle info = DividerStyle('divider-info', type: StyleType.style);

  /// Error color. `divider-error`
  static const DividerStyle error = DividerStyle('divider-error', type: StyleType.style);

  // Direction
  /// Renders the divider horizontally, to separate side-by-side content.
  /// The default is vertical. `divider-horizontal`
  static const DividerStyle horizontal = DividerStyle('divider-horizontal', type: StyleType.layout);

  // Placement
  /// Pushes the divider text to the start (left for horizontal, top for vertical). `divider-start`
  static const DividerStyle start = DividerStyle('divider-start', type: StyleType.layout);

  /// Pushes the divider text to the end (right for horizontal, bottom for vertical). `divider-end`
  static const DividerStyle end = DividerStyle('divider-end', type: StyleType.layout);
}

<!-- END FILE: packages/deepyr/lib/src/components/divider/divider.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/divider/divider_style.dart -->
import '../../base/component_style.dart';
import '../../base/style_type.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'divider.dart';

/// A marker interface for any utility that can be passed to a [Divider]'s `style` list.
///
/// This allows for type-safe application of styles for color, direction, and text placement.
abstract class DividerStyling implements Styling {}

/// Defines specific styling options for a [Divider] component.
///
/// This is the concrete implementation class for divider-specific modifiers.
/// It implements the [DividerStyling] interface, making it a valid type for the
/// `style` property of a [Divider] component.
class DividerStyle extends ComponentStyle<DividerStyle>
    with Breakpoints<DividerStyle>
    implements DividerStyling {
  /// Constructs a [DividerStyle].
  ///
  /// - [cssClass]: The core CSS class string for this modifier (e.g., "divider-primary").
  /// - [type]: The [StyleType] categorizing this modifier.
  /// - [modifiers]: An optional list of [PrefixModifier]s for responsive styling.
  const DividerStyle(super.cssClass, {required super.type, super.modifiers});

  /// Creates a new instance of [DividerStyle] with the provided modifiers.
  @override
  DividerStyle create(List<PrefixModifier> modifiers) {
    return DividerStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/divider/divider_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/drawer/drawer.dart -->
import 'package:jaspr/jaspr.dart' hide css;
import 'package:universal_web/web.dart' show Event, HTMLInputElement;

import '../../base/style_type.dart';
import '../../base/ui_component.dart';
import '../../base/ui_component_attributes.dart';
import 'drawer_style.dart';

/// A container component that provides a slide-out panel (sidebar) for navigation or content.
///
/// The drawer's visibility is controlled by an internal checkbox. Interaction is handled by
/// linking <label> elements (like [DrawerSide]'s overlay or a custom button) to this checkbox
/// using the [drawerId]. The component's state is synchronized via the [onToggle] callback,
/// which correctly handles the browser's `onChange` event.
class Drawer extends UiComponent {
  /// Creates a Drawer container component.
  ///
  /// - [content]: The main content area of the page ([DrawerContent]).
  /// - [side]: The slide-out panel content ([DrawerSide]).
  /// - [drawerId]: A unique ID for the internal checkbox. Essential for linking toggle labels.
  /// - [isOpen]: The current state of the drawer (true for open, false for closed).
  /// - [onToggle]: A callback that fires when the drawer's state changes. It receives the new boolean state.
  /// - [styles]: A list of [DrawerStyling] instances for styling and behavior (e.g., [Drawer.end]).
  /// - Other parameters are inherited from [UiComponent].
  const Drawer({
    required this.content,
    required this.side,
    required this.drawerId,
    this.isOpen = false,
    this.onToggle,
    super.tag = 'div',
    List<DrawerStyling>? styles,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.key,
  }) : super(null, style: styles);

  /// The main content area of the page.
  final DrawerContent content;

  /// The slide-out panel content.
  final DrawerSide side;

  /// Whether the drawer is currently open. This directly controls the 'checked' state of the internal checkbox.
  final bool isOpen;

  /// This callback is crucial for state management. It is triggered when the internal
  /// checkbox's state changes, providing the new state (`true` for open, `false` for closed).
  final ValueChanged<bool>? onToggle;

  /// A unique ID used for the internal checkbox and for linking labels (like the overlay) to it.
  final String drawerId;

  @override
  String get baseClass => 'drawer';

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);
    // No additional attributes needed by default.
  }

  @override
  Drawer copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return Drawer(
      content: content,
      side: side,
      drawerId: drawerId,
      isOpen: isOpen,
      onToggle: onToggle,
      tag: tag,
      styles: style as List<DrawerStyling>?,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      key: key ?? this.key,
    );
  }

  @override
  Component build(BuildContext context) {
    return Component.element(
      tag: tag,
      id: id,
      classes: combinedClasses,
      styles: css,
      attributes: componentAttributes,
      events: this.events,
      children: [
        // The hidden checkbox that controls the drawer's visibility via CSS.
        input(
          type: InputType.checkbox,
          id: drawerId,
          classes: 'drawer-toggle',
          attributes: {
            if (isOpen) 'checked': '',
          },
          events: onToggle != null
              ? {
                  'change': (dynamic rawEvent) {
                    if (kIsWeb) {
                      final target = (rawEvent as Event).target! as HTMLInputElement;
                      onToggle!(target.checked);
                    }
                  },
                }
              : null,
        ),
        content,
        DrawerSide(
          menuContent: side.menuContent,
          drawerId: drawerId,
          // Pass through other properties from the user-provided 'side' component.
          tag: side.tag,
          id: side.id,
          style: side.style,
          classes: side.classes,
          css: side.css,
          attributes: side.componentAttributes,
          key: side.key,
        ),
      ],
    );
  }

  // --- Static Drawer Modifiers ---

  /// Changes drawer to open from the right side. `drawer-end`
  static const DrawerStyle end = DrawerStyle('drawer-end', type: StyleType.layout);

  /// Forces the drawer to be open. Can be used with responsive prefixes.
  /// e.g., `Drawer.open.at(Breakpoint.lg)` produces `lg:drawer-open`.
  static const DrawerStyle open = DrawerStyle('drawer-open', type: StyleType.state);
}

/// Represents the main content area of a page when a [Drawer] is present.
class DrawerContent extends UiComponent {
  const DrawerContent(
    super.children, {
    super.tag = 'div',
    super.style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  });

  @override
  String get baseClass => 'drawer-content';

  @override
  DrawerContent copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return DrawerContent(
      children,
      tag: tag,
      style: style,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }
}

/// Represents the slide-out panel (sidebar) of a [Drawer].
/// Contains a clickable overlay and the menu/content for the panel.
class DrawerSide extends UiComponent {
  /// Creates a DrawerSide component.
  ///
  /// - [menuContent]: The actual content to display within the slide-out panel.
  /// - [drawerId]: The ID used by the label overlay to associate with the drawer's toggle checkbox.
  const DrawerSide({
    required this.menuContent,
    this.drawerId,
    super.tag = 'div',
    super.style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.key,
  }) : super(null); // Children are managed internally.

  /// The content to display within the drawer panel.
  final Component menuContent;

  /// The ID for the drawer toggle mechanism, used by the overlay's `for` attribute.
  final String? drawerId;

  @override
  String get baseClass => 'drawer-side';

  @override
  DrawerSide copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return DrawerSide(
      menuContent: menuContent,
      drawerId: drawerId,
      tag: tag,
      style: style,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      key: key ?? this.key,
    );
  }

  @override
  Component build(BuildContext context) {
    final attributes = <String, String>{'aria-label': 'close sidebar'};
    if (drawerId != null) {
      attributes['for'] = drawerId!;
    }

    final overlayLabel = label(
      classes: 'drawer-overlay',
      attributes: attributes,
      [],
    );

    return Component.element(
      tag: tag,
      id: id,
      classes: combinedClasses,
      styles: css,
      attributes: componentAttributes,
      events: this.events,
      children: [overlayLabel, menuContent],
    );
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/drawer/drawer.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/drawer/drawer_style.dart -->
import '../../base/component_style.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'drawer.dart';

/// Marker interface for any utility that can be passed to a [Drawer]'s `modifiers` list.
abstract class DrawerStyling implements Styling {}

/// Defines specific styling, sizing, and behavioral options for a [Drawer] container component.
/// Implements the [DrawerStyling] interface.
class DrawerStyle extends ComponentStyle<DrawerStyle>
    with Breakpoints<DrawerStyle>
    implements DrawerStyling {
  const DrawerStyle(super.cssClass, {required super.type, super.modifiers});

  @override
  DrawerStyle create(List<PrefixModifier> modifiers) {
    return DrawerStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/drawer/drawer_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/dropdown/dropdown.dart -->
import 'package:jaspr/jaspr.dart';

import '../../base/style_type.dart';
import '../../base/ui_component.dart';
import '../../base/ui_component_attributes.dart';
import 'dropdown_content_style.dart';
import 'dropdown_style.dart';

/// Defines the underlying HTML/CSS mechanism for a [Dropdown] component.
enum DropdownMethod {
  /// **(Recommended for Accessibility)** Uses the semantic `<details>` and `<summary>` elements.
  ///
  /// The `Dropdown` component will intelligently render the provided `trigger`
  /// component as a styled `<summary>` tag, preserving its appearance and content.
  /// This method is highly accessible and works without JavaScript.
  details,

  /// Uses the CSS `:focus` pseudo-class with a focusable `<div>`.
  ///
  /// This method opens the dropdown when the trigger is clicked or focused and
  /// closes it when focus is lost. It is ideal for hover effects and animations.
  focus,
}

/// A generic container that displays content when a trigger element is activated.
///
/// The `Dropdown` is a pure layout and behavior primitive. It separates the
/// interactive `trigger` from the `content` it displays, allowing for flexible
/// and composable UIs. It can display a navigational `Menu`, a `Card`, a form,
/// or any other component.
///
/// The component intelligently adapts its HTML structure based on the chosen [method],
/// ensuring a consistent and high-level API for the developer.
///
/// Example:
/// ```dart
/// // This works for both `details` and `focus` methods.
/// Dropdown(
///   trigger: Button([text('Show Menu')]),
///   content: DropdownContent(
///     [ MenuItem([text('Item 1')]) ],
///     tag: 'ul',
///     style: [DropdownContent.menu],
///     classes: 'p-2 shadow bg-base-100 rounded-box w-52',
///   ),
/// )
/// ```
class Dropdown extends UiComponent {
  /// Creates a Dropdown component.
  ///
  /// - [trigger]: The component the user interacts with (e.g., a `Button`).
  /// - [content]: The component to display when the dropdown is open.
  /// - [method]: The activation mechanism to use. Defaults to [DropdownMethod.details].
  /// - [style]: A list of [DropdownStyling] instances for placement and behavior.
  const Dropdown({
    required this.trigger,
    required this.content,
    this.method = DropdownMethod.details,
    List<DropdownStyling>? style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.key,
  }) : super(
         null, // Children are managed via trigger/content.
         tag: method == DropdownMethod.details ? 'details' : 'div',
         style: style,
       );

  /// The component that the user interacts with to open the dropdown.
  final Component trigger;

  /// The component that is shown when the dropdown is open.
  final Component content;

  /// The underlying HTML/CSS method to use for the dropdown behavior.
  final DropdownMethod method;

  @override
  String get baseClass => 'dropdown';

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);
    // For the focus method, the container itself should NOT be focusable.
    // Instead, the trigger and content elements inside it should be.
    // This was the source of the bug. The `Button` trigger is inherently
    // focusable, and `DropdownContent` adds its own tabindex.
  }

  @override
  Component build(BuildContext context) {
    final List<Component> effectiveChildren;

    if (method == DropdownMethod.details) {
      // For the `details` method, we intelligently construct a <summary> element
      // that inherits the visual properties of the provided trigger.
      Component summaryTrigger;
      if (trigger is UiComponent) {
        // If the trigger is a deepyr component, we can extract its classes,
        // children, and other properties to create a perfectly styled summary.
        final triggerComponent = trigger as UiComponent;
        summaryTrigger = Component.element(
          tag: 'summary',
          // Inherit all visual classes from the trigger button.
          classes: triggerComponent.combinedClasses,
          // Inherit other DOM properties.
          id: triggerComponent.id,
          styles: triggerComponent.css,
          attributes: triggerComponent.componentAttributes,
          events: triggerComponent.events,
          children: triggerComponent.children ?? [?triggerComponent.child],
        );
      } else {
        // If the trigger is a primitive (like `text()`), wrap it in a basic summary.
        summaryTrigger = summary([trigger]);
      }
      effectiveChildren = [summaryTrigger, content];
    } else {
      // For the `focus` method, the trigger and content are direct siblings.
      effectiveChildren = [trigger, content];
    }

    return Component.element(
      tag: tag,
      id: id,
      classes: combinedClasses,
      styles: this.css,
      attributes: componentAttributes,
      events: this.events,
      children: effectiveChildren,
    );
  }

  @override
  Dropdown copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return Dropdown(
      trigger: trigger,
      content: content,
      method: method,
      style: style as List<DropdownStyling>?,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      key: key ?? this.key,
    );
  }

  // --- Static Dropdown Modifiers (Placement & Behavior) ---

  /// Aligns dropdown menu horizontally to the start of the button (default for LTR). `dropdown-start`
  static const DropdownStyle start = DropdownStyle('dropdown-start', type: StyleType.layout);

  /// Aligns dropdown menu horizontally to the center of the button. `dropdown-center`
  static const DropdownStyle center = DropdownStyle('dropdown-center', type: StyleType.layout);

  /// Aligns dropdown menu horizontally to the end of the button (right for LTR, left for RTL). `dropdown-end`
  static const DropdownStyle end = DropdownStyle('dropdown-end', type: StyleType.layout);

  /// Opens dropdown menu upwards. `dropdown-top`
  static const DropdownStyle top = DropdownStyle('dropdown-top', type: StyleType.layout);

  /// Opens dropdown menu downwards (default). `dropdown-bottom`
  static const DropdownStyle bottom = DropdownStyle('dropdown-bottom', type: StyleType.layout);

  /// Opens dropdown menu to the left. `dropdown-left`
  static const DropdownStyle left = DropdownStyle('dropdown-left', type: StyleType.layout);

  /// Opens dropdown menu to the right. `dropdown-right`
  static const DropdownStyle right = DropdownStyle('dropdown-right', type: StyleType.layout);

  /// Opens dropdown menu on hover instead of click (for CSS focus method). `dropdown-hover`
  static const DropdownStyle hover = DropdownStyle('dropdown-hover', type: StyleType.state);

  /// Forces the dropdown menu to be always open (CSS only). `dropdown-open`
  /// Note: For `<details>` method, use the `open` attribute on the `<details>` tag.
  static const DropdownStyle open = DropdownStyle('dropdown-open', type: StyleType.state);
}

/// The content area of a [Dropdown] that appears when the dropdown is triggered.
///
/// Typically renders as an HTML `<ul>` (for menus) or `<div>` (for cards or other content).
/// For CSS focus method, `applyDefaultTabIndex: true` (default) adds `tabindex="0"` to make
/// the content focusable.
///
/// The `modifiers` list accepts [DropdownContentStyling] (the interface), including
/// specific styles like [DropdownContent.menu] or [DropdownContent.card] (which apply general
/// DaisyUI classes), and other general Deepyr utilities.
class DropdownContent extends UiComponent {
  /// Creates a DropdownContent component.
  ///
  /// - [children]: The items or content to display within the dropdown.
  /// - [tag]: The HTML tag, defaults to 'ul' (suitable for menus). Change to 'div' for card-like content.
  /// - [style]: A list of [DropdownContentStyling] (the interface) instances.
  /// - [applyDefaultTabIndex]: If true (default), applies `tabindex="0"` to make the content
  ///   focusable. This is common for DaisyUI's CSS focus-based dropdowns.
  ///   Set to false if `tabindex` is managed manually or not needed (e.g., for `<details>` content).
  /// - [role]: An optional ARIA role for the content (e.g., "menu", "listbox").
  /// - Other parameters from [UiComponent].
  const DropdownContent(
    super.children, {
    super.tag = 'div',
    List<DropdownContentStyling>? style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  }) : super(style: style);

  @override
  String get baseClass => 'dropdown-content';

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);
    // Add tabindex for focus method; this has no effect on the details method.
    if (!userProvidedAttributes.containsKey('tabindex')) {
      attributes.add('tabindex', '0');
    }
  }

  @override
  DropdownContent copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return DropdownContent(
      children,
      tag: tag,
      style: style as List<DropdownContentStyling>?,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }

  // --- Static DropdownContent Style Modifiers ---
  // These are convenience modifiers for applying common DaisyUI classes to the content element.

  /// Adds the 'menu' class, typically used with `tag: 'ul'`.
  static const DropdownContentStyle menu = DropdownContentStyle('menu', type: StyleType.style);

  /// Adds the 'card' class, typically used with `tag: 'div'`.
  static const DropdownContentStyle card = DropdownContentStyle('card', type: StyleType.style);
}

<!-- END FILE: packages/deepyr/lib/src/components/dropdown/dropdown.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/dropdown/dropdown_content_style.dart -->
import '../../base/component_style.dart';
import '../../base/style_type.dart' show StyleType;
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'dropdown.dart';

/// Marker interface for any utility that can be passed to a [DropdownContent]'s `modifiers` list.
abstract class DropdownContentStyling implements Styling {}

/// Defines specific styling options for a [DropdownContent] component,
/// such as styling it as a menu or a card.
/// Implements the [DropdownContentStyling] interface.
///
/// This class is used to create concrete instances of dropdown content-specific modifiers.
/// Static definitions for common patterns (e.g., `DropdownContent.menu`) are typically
/// found within the `DropdownContent` component class.
class DropdownContentStyle extends ComponentStyle<DropdownContentStyle>
    with Breakpoints<DropdownContentStyle>
    implements DropdownContentStyling {
  /// Constructs a [DropdownContentStyle].
  ///
  /// [cssClass]: The core CSS class string (e.g., "menu").
  /// [type]: The [StyleType] categorizing this modifier.
  /// [modifiers]: An optional list of [PrefixModifier]s already applied.
  const DropdownContentStyle(super.cssClass,
      {required super.type, super.modifiers});

  @override
  DropdownContentStyle create(List<PrefixModifier> modifiers) {
    return DropdownContentStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/dropdown/dropdown_content_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/dropdown/dropdown_style.dart -->
import '../../base/component_style.dart';
import '../../base/style_type.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'dropdown.dart';

/// Marker interface for any utility that can be passed to a [Dropdown]'s `modifiers` list.
abstract class DropdownStyling implements Styling {}

/// Defines specific styling and behavioral options for a [Dropdown] container component.
/// Implements the [DropdownStyling] interface.
///
/// This class is used to create concrete instances of dropdown-specific modifiers.
/// The static definitions for these modifiers (e.g., `Dropdown.top`) are typically
/// located within the `Dropdown` component class itself for easier discovery.
class DropdownStyle extends ComponentStyle<DropdownStyle>
    with Breakpoints<DropdownStyle>
    implements DropdownStyling {
  /// Constructs a [DropdownStyle].
  ///
  /// [cssClass]: The core CSS class string (e.g., "dropdown-top").
  /// [type]: The [StyleType] categorizing this modifier.
  /// [modifiers]: An optional list of [PrefixModifier]s already applied.
  const DropdownStyle(
    super.cssClass, {
    required super.type,
    super.modifiers,
  });

  @override
  DropdownStyle create(List<PrefixModifier> modifiers) {
    return DropdownStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/dropdown/dropdown_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/fieldset/fieldset.dart -->
import 'package:jaspr/jaspr.dart' show Key, Styles;

import '../../base/ui_component.dart';
import '../form_label/form_label.dart';
import 'fieldset_style.dart';

/// A component that renders an HTML `<fieldset>` element, used as a container
/// for grouping related form controls and labels.
///
/// It provides a clear semantic structure for forms. Styling is achieved by
/// applying general utility classes through its `style` property.
class Fieldset extends UiComponent {
  /// - [tag]: The HTML tag for the root element, defaults to 'fieldset'.
  /// - [style]: A list of [FieldsetStyling] instances for styling.
  /// - Other parameters are inherited from [UiComponent].
  const Fieldset(
    super.children, {
    super.tag = 'fieldset',
    List<FieldsetStyling>? style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  }) : super(style: style);

  /// Creates a Fieldset component.
  ///
  /// - [children] or [child]: The content of the fieldset, typically including
  ///   a [Legend], one or more form controls (like `Input`), and optionally
  ///   a descriptive [FormLabel].

  @override
  String get baseClass => 'fieldset';

  @override
  Fieldset copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return Fieldset(
      children,
      tag: tag,
      style: style as List<FieldsetStyling>?,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }
}

/// A component that renders an HTML `<legend>` element to provide a caption
/// or title for its parent [Fieldset].
///
/// It uses the 'fieldset-legend' base class for styling.
class Legend extends UiComponent {
  /// Creates a Legend component.
  ///
  /// - [children] or [child]: The title text for the fieldset.
  /// - [tag]: The HTML tag for the root element, defaults to 'legend'.
  /// - [style]: A list of [LegendStyling] instances for styling.
  /// - Other parameters are inherited from [UiComponent].
  const Legend(
    super.children, {
    super.tag = 'legend',
    List<LegendStyling>? style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  }) : super(style: style);

  @override
  String get baseClass => 'fieldset-legend';

  @override
  Legend copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return Legend(
      children,
      tag: tag,
      style: style as List<LegendStyling>?,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/fieldset/fieldset.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/fieldset/fieldset_style.dart -->
import '../../base/component_style.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'fieldset.dart';

/// A marker interface for any utility that can be passed to a [Fieldset]'s
/// `style` list.
///
/// This allows for type-safe application of styles. `Fieldset` currently has
/// no specific modifiers, so this is used for applying general utilities.
abstract class FieldsetStyling implements Styling {}

/// Defines specific styling options for a [Fieldset] component.
///
/// This is the concrete implementation class for fieldset-specific modifiers.
/// It implements the [FieldsetStyling] interface. Currently, there are no
/// predefined static modifiers for `Fieldset`.
class FieldsetStyle extends ComponentStyle<FieldsetStyle>
    with Breakpoints<FieldsetStyle>
    implements FieldsetStyling {
  /// Constructs a [FieldsetStyle].
  const FieldsetStyle(
    super.cssClass, {
    required super.type,
    super.modifiers,
  });

  /// Creates a new instance of [FieldsetStyle] with the provided modifiers.
  @override
  FieldsetStyle create(List<PrefixModifier> modifiers) {
    return FieldsetStyle(cssClass, type: type, modifiers: modifiers);
  }
}

/// A marker interface for any utility that can be passed to a [Legend]'s
/// `style` list.
abstract class LegendStyling implements Styling {}

/// Defines specific styling options for a [Legend] component.
///
/// This is the concrete implementation class for legend-specific modifiers.
/// It implements the [LegendStyling] interface. Currently, there are no
/// predefined static modifiers for `Legend`.
class LegendStyle extends ComponentStyle<LegendStyle>
    with Breakpoints<LegendStyle>
    implements LegendStyling {
  /// Constructs a [LegendStyle].
  const LegendStyle(
    super.cssClass, {
    required super.type,
    super.modifiers,
  });

  /// Creates a new instance of [LegendStyle] with the provided modifiers.
  @override
  LegendStyle create(List<PrefixModifier> modifiers) {
    return LegendStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/fieldset/fieldset_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/file_input/file_input.dart -->
import 'package:jaspr/jaspr.dart'
    show BuildContext, Component, EventCallback, Key, Styles, ValueChanged, kIsWeb;
import 'package:universal_web/web.dart' show Event, FileList, HTMLInputElement;

import '../../base/style_type.dart';
import '../../base/ui_component.dart';
import '../../base/ui_component_attributes.dart';
import 'file_input_style.dart';

/// A component for user file selection, rendering an HTML `<input type="file">`.
///
/// This component is designed to be controlled by a parent. It does not manage
/// the selected files internally. Instead, you must handle the file selection
/// event using the [onFilesSelected] callback, which provides the `FileList`
/// object from the browser.
///
/// Example of handling file selection in a `StatefulComponent`:
/// ```dart
/// class MyUploader extends StatefulComponent {
///   @override
///   State<MyUploader> createState() => _MyUploaderState();
/// }
///
/// class _MyUploaderState extends State<MyUploader> {
///   String _fileName = 'No file chosen';
///
///   @override
///   Component build(BuildContext context) {
///     return FileInput(
///       onFilesSelected: (fileList) {
///         setState(() {
///           if (fileList.isNotEmpty) {
///             _fileName = fileList.first.name;
///           } else {
///             _fileName = 'No file chosen';
///           }
///         });
///       },
///     );
///     return p([text('Selected: $_fileName')]);
///   }
/// }
/// ```
class FileInput extends UiComponent {
  /// Creates a FileInput component.
  ///
  /// - [onFilesSelected]: A callback that fires when the user selects one or more
  ///   files. It receives the browser's `FileList` object.
  /// - [name]: The name of the input, used for form submission.
  /// - [disabled]: If true, the file input will be non-interactive.
  /// - [accept]: A string specifying the file types the input should accept
  ///   (e.g., "image/png, image/jpeg").
  /// - [multiple]: If true, the user can select multiple files.
  /// - [style]: A list of [FileInputStyling] instances for styling.
  /// - Other parameters are inherited from [UiComponent].
  const FileInput({
    this.onFilesSelected,
    this.name,
    this.disabled = false,
    this.accept,
    this.multiple = false,
    super.tag = 'input',
    List<FileInputStyling>? style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.key,
  }) : super(null, style: style); // FileInput elements have no children.

  /// Callback function invoked when the user selects files.
  /// Provides a `FileList` object, which is an iterable collection of `File` objects.
  final ValueChanged<FileList>? onFilesSelected;

  /// The name of the input, used in form submissions.
  final String? name;

  /// If true, the input is non-interactive.
  final bool disabled;

  /// A comma-separated string of unique file type specifiers.
  /// Example: `'.png, .jpg, image/*'`
  final String? accept;

  /// If true, allows the user to select more than one file.
  final bool multiple;

  @override
  String get baseClass => 'file-input';

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);
    attributes.add('type', 'file');
    if (name != null) attributes.add('name', name!);
    if (disabled) attributes.add('disabled', '');
    if (accept != null) attributes.add('accept', accept!);
    if (multiple) attributes.add('multiple', '');
  }

  @override
  FileInput copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return FileInput(
      onFilesSelected: onFilesSelected,
      name: name,
      disabled: disabled,
      accept: accept,
      multiple: multiple,
      tag: tag,
      style: style as List<FileInputStyling>?,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      key: key ?? this.key,
    );
  }

  @override
  Component build(BuildContext context) {
    final eventMap = Map<String, EventCallback>.from(events);

    if (onFilesSelected != null) {
      // The 'change' event fires when a file is selected.
      eventMap['change'] = (dynamic rawEvent) {
        if (kIsWeb) {
          final target = (rawEvent as Event).target! as HTMLInputElement;
          // The `files` property of the input element is a `FileList`.
          final files = target.files;
          if (files != null) {
            onFilesSelected!(files);
          }
        }
      };
    }

    return Component.element(
      tag: tag,
      id: id,
      classes: combinedClasses,
      styles: css,
      attributes: componentAttributes,
      events: eventMap,
    );
  }

  // --- Static Style Modifiers ---

  /// Ghost style (transparent background). `file-input-ghost`
  static const FileInputStyle ghost = FileInputStyle('file-input-ghost', type: StyleType.style);

  // Colors
  /// Neutral color. `file-input-neutral`
  static const FileInputStyle neutral = FileInputStyle('file-input-neutral', type: StyleType.style);

  /// Primary color. `file-input-primary`
  static const FileInputStyle primary = FileInputStyle('file-input-primary', type: StyleType.style);

  /// Secondary color. `file-input-secondary`
  static const FileInputStyle secondary = FileInputStyle(
    'file-input-secondary',
    type: StyleType.style,
  );

  /// Accent color. `file-input-accent`
  static const FileInputStyle accent = FileInputStyle('file-input-accent', type: StyleType.style);

  /// Info color. `file-input-info`
  static const FileInputStyle info = FileInputStyle('file-input-info', type: StyleType.style);

  /// Success color. `file-input-success`
  static const FileInputStyle success = FileInputStyle('file-input-success', type: StyleType.style);

  /// Warning color. `file-input-warning`
  static const FileInputStyle warning = FileInputStyle('file-input-warning', type: StyleType.style);

  /// Error color. `file-input-error`
  static const FileInputStyle error = FileInputStyle('file-input-error', type: StyleType.style);

  // Sizes
  /// Extra-small size. `file-input-xs`
  static const FileInputStyle xs = FileInputStyle('file-input-xs', type: StyleType.sizing);

  /// Small size. `file-input-sm`
  static const FileInputStyle sm = FileInputStyle('file-input-sm', type: StyleType.sizing);

  /// Medium size (default). `file-input-md`
  static const FileInputStyle md = FileInputStyle('file-input-md', type: StyleType.sizing);

  /// Large size. `file-input-lg`
  static const FileInputStyle lg = FileInputStyle('file-input-lg', type: StyleType.sizing);

  /// Extra-large size. `file-input-xl`
  static const FileInputStyle xl = FileInputStyle('file-input-xl', type: StyleType.sizing);
}

<!-- END FILE: packages/deepyr/lib/src/components/file_input/file_input.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/file_input/file_input_style.dart -->
import '../../base/component_style.dart';
import '../../base/style_type.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'file_input.dart';

/// A marker interface for any utility that can be passed to a [FileInput]'s `style` list.
///
/// This allows for type-safe application of styles for colors, sizes, and variants.
abstract class FileInputStyling implements Styling {}

/// Defines specific styling options for a [FileInput] component.
///
/// This is the concrete implementation class for file input-specific modifiers.
/// It implements the [FileInputStyling] interface, making it a valid type for the
/// `style` property of a [FileInput] component.
class FileInputStyle extends ComponentStyle<FileInputStyle>
    with Breakpoints<FileInputStyle>
    implements FileInputStyling {
  /// Constructs a [FileInputStyle].
  ///
  /// - [cssClass]: The core CSS class string for this modifier (e.g., "file-input-primary").
  /// - [type]: The [StyleType] categorizing this modifier.
  /// - [modifiers]: An optional list of [PrefixModifier]s for responsive styling.
  const FileInputStyle(super.cssClass, {required super.type, super.modifiers});

  /// Creates a new instance of [FileInputStyle] with the provided modifiers.
  @override
  FileInputStyle create(List<PrefixModifier> modifiers) {
    return FileInputStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/file_input/file_input_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/footer/footer.dart -->
import 'package:jaspr/jaspr.dart';

import '../../base/style_type.dart';
import '../../base/ui_component.dart';
import 'footer_style.dart';

/// A component for the bottom section of a site, typically containing links,
/// copyright notices, and other information.
///
/// The `Footer` component renders a `<footer>` element and acts as a container
/// for its content, which is structured using the dedicated [FooterAside],
/// [FooterNav], and [FooterTitle] sub-components.
///
/// Example Usage:
/// ```dart
/// Footer(
///   style: [Footer.horizontal.at(Breakpoint.sm), BgUtil.neutral, TextUtil.neutralContent, Spacing.p10],
///   [
///     FooterAside([
///       // ... logo and branding
///     ]),
///     FooterNav(
///       title: 'Services',
///       [
///         Link([text('Branding')], href: '#', style: [Link.hover]),
///         Link([text('Design')], href: '#', style: [Link.hover]),
///       ]
///     ),
///     FooterNav(
///       title: 'Company',
///       [
///         Link([text('About us')], href: '#', style: [Link.hover]),
///         Link([text('Contact')], href: '#', style: [Link.hover]),
///       ]
///     ),
///   ],
/// )
/// ```
class Footer extends UiComponent {
  /// Creates a Footer component.
  ///
  /// - [children]: The content of the footer, which should be composed of
  ///   [FooterAside] and [FooterNav] components.
  /// - [tag]: The HTML tag for the root element, defaults to 'footer'.
  /// - [style]: A list of [FooterStyling] instances. Use this for layout
  ///   modifiers like `Footer.horizontal` or `Footer.center`, and for general
  ///   utilities like background colors and padding.
  /// - Other parameters are inherited from [UiComponent].
  const Footer(
    super.children, {
    super.tag = 'footer',
    List<FooterStyling>? style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  }) : super(style: style);

  @override
  String get baseClass => 'footer';

  @override
  Footer copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return Footer(
      children,
      tag: tag,
      style: style as List<FooterStyling>?,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }

  // --- Static Style Modifiers ---

  /// Aligns footer content to the center. `footer-center`
  static const FooterStyle center = FooterStyle('footer-center', type: StyleType.layout);

  /// Stacks footer columns horizontally. `footer-horizontal`
  static const FooterStyle horizontal = FooterStyle('footer-horizontal', type: StyleType.layout);

  /// Stacks footer columns vertically (default behavior on small screens). `footer-vertical`
  static const FooterStyle vertical = FooterStyle('footer-vertical', type: StyleType.layout);
}

/// A title component for a section or column within a [Footer].
///
/// It renders an `<h6>` element with the `footer-title` class and is typically
/// used as the first child of a [FooterNav] component.
class FooterTitle extends UiComponent {
  /// Creates a FooterTitle component.
  ///
  /// - [children]: The text content of the title.
  /// - [tag]: The HTML tag for the root element, defaults to 'h6' for semantic correctness.
  /// - [style]: A list of general utilities for additional styling if needed.
  /// - Other parameters are inherited from [UiComponent].
  const FooterTitle(
    super.children, {
    super.tag = 'h6',
    super.style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  });

  @override
  String get baseClass => 'footer-title';

  @override
  FooterTitle copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return FooterTitle(
      children,
      tag: tag,
      style: style,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }
}

/// A semantic container for a navigation column within a [Footer].
///
/// This component renders a `<nav>` element and can optionally include a
/// [FooterTitle] by providing the `title` parameter.
class FooterNav extends UiComponent {
  /// Creates a navigation section for a [Footer].
  ///
  /// - [children]: A list of link components (e.g., `deepyr` `Link`).
  /// - [title]: An optional string that, if provided, creates a [FooterTitle]
  ///   as the first element inside the `<nav>`.
  /// - [tag]: The HTML tag for the root element, defaults to 'nav'.
  /// - Other parameters are inherited from [UiComponent].
  const FooterNav(
    super.children, {
    String? title,
    super.tag = 'nav',
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.key,
  }) : _title = title,
       super(style: null); // FooterNav itself does not take deepyr styles.

  final String? _title;

  @override
  String get baseClass => ''; // No base class on the <nav> itself.

  @override
  Component build(BuildContext context) {
    final navChildren = <Component>[];
    if (_title != null && _title.isNotEmpty) {
      navChildren.add(FooterTitle([text(_title)]));
    }
    if (children != null) {
      navChildren.addAll(children!);
    }

    // The build method of UiComponent will render the outer tag ('nav' by default).
    // We just need to provide the children.
    return Component.element(
      tag: tag,
      id: id,
      classes: combinedClasses,
      styles: this.css,
      attributes: componentAttributes,
      events: this.events,
      children: navChildren,
    );
  }

  @override
  FooterNav copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return FooterNav(
      children,
      title: _title,
      tag: tag,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      key: key ?? this.key,
    );
  }
}

/// A semantic container for the branding section of a [Footer].
///
/// This component renders an `<aside>` element, which is the correct semantic
/// tag for content that is tangentially related to the main content, such as
/// a company logo and copyright notice in a footer.
class FooterAside extends UiComponent {
  /// Creates a branding section for a [Footer].
  ///
  /// - [children]: The content of the aside section, typically a logo and `p` tags.
  /// - [tag]: The HTML tag for the root element, defaults to 'aside'.
  /// - Other parameters are inherited from [UiComponent].
  const FooterAside(
    super.children, {
    super.tag = 'aside',
    super.style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  });

  @override
  String get baseClass => ''; // No base class on the <aside> itself.

  @override
  FooterAside copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return FooterAside(
      children,
      tag: tag,
      style: style,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/footer/footer.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/footer/footer_style.dart -->
import '../../base/component_style.dart';
import '../../base/style_type.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'footer.dart';

/// A marker interface for any utility that can be passed to a [Footer]'s
/// `style` list.
///
/// This allows for type-safe application of styles.
abstract class FooterStyling implements Styling {}

/// Defines specific styling options for a [Footer] component.
///
/// This is the concrete implementation class for footer-specific modifiers.
/// It implements the [FooterStyling] interface, making it a valid type for the
/// `style` property of a [Footer] component.
class FooterStyle extends ComponentStyle<FooterStyle>
    with Breakpoints<FooterStyle>
    implements FooterStyling {
  /// Constructs a [FooterStyle].
  ///
  /// - [cssClass]: The core CSS class string for this modifier.
  /// - [type]: The [StyleType] categorizing this modifier.
  /// - [modifiers]: An optional list of [PrefixModifier]s for responsive styling.
  const FooterStyle(super.cssClass, {required super.type, super.modifiers});

  /// Creates a new instance of [FooterStyle] with the provided modifiers.
  @override
  FooterStyle create(List<PrefixModifier> modifiers) {
    return FooterStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/footer/footer_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/form_label/form_label.dart -->
import 'package:jaspr/jaspr.dart' show Key, Styles;

import '../../base/ui_component.dart';
import '../../base/ui_component_attributes.dart';
import '../label/label.dart' show Label;
import 'form_label_style.dart';

/// A component that renders an HTML `<p>` or `<span>` element with the
/// 'label' base class, used for descriptive text within form containers.
///
/// Per DaisyUI patterns, this component is typically used inside a [Label]
/// container (as a `<span>`) to provide descriptive text alongside an input,
/// or inside a `Fieldset` (as a `<p>`) to provide a description. It creates
/// a type-safe abstraction for the common `... class="label"` pattern.
class FormLabel extends UiComponent {
  /// Creates a FormLabel component.
  ///
  /// - [children] or [child]: The content of the label, typically text.
  /// - [tag]: The HTML tag for the root element. Defaults to 'p', which is
  ///   semantically appropriate for descriptions within a `Fieldset`. Can be
  ///   changed to 'span' for inline usage within a `Label`.
  /// - [style]: A list of [FormLabelStyling] (the interface) instances for styling.
  /// - Other parameters are inherited from [UiComponent].
  const FormLabel(
    super.children, {
    List<FormLabelStyling>? style,
    super.tag = 'p',
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  }) : super(style: style);

  @override
  String get baseClass => 'label'; // The DaisyUI base class

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);
    // No specific ARIA roles needed by default for a simple styled paragraph or span.
  }

  @override
  FormLabel copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return FormLabel(
      children,
      style: style as List<FormLabelStyling>?,
      tag: tag,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/form_label/form_label.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/form_label/form_label_style.dart -->
import '../../base/component_style.dart';
import '../../base/style_type.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'form_label.dart';

/// A marker interface for any utility that can be passed to a [FormLabel]'s
/// `style` list.
///
/// This allows for type-safe application of styles. While `FormLabel` currently
/// has no specific modifiers of its own, this interface supports architectural
/// consistency and allows general utilities to be applied.
abstract class FormLabelStyling implements Styling {}

/// Defines specific styling options for a [FormLabel] component.
///
/// This is the concrete implementation class for form label-specific modifiers.
/// It implements the [FormLabelStyling] interface. Currently, there are no
/// predefined static modifiers for `FormLabel`.
class FormLabelStyle extends ComponentStyle<FormLabelStyle>
    with Breakpoints<FormLabelStyle>
    implements FormLabelStyling {
  /// Constructs a [FormLabelStyle].
  ///
  /// - [cssClass]: The core CSS class string for this modifier.
  /// - [type]: The [StyleType] categorizing this modifier.
  /// - [modifiers]: An optional list of [PrefixModifier]s for responsive styling.
  const FormLabelStyle(
    super.cssClass, {
    required super.type,
    super.modifiers,
  });

  /// Creates a new instance of [FormLabelStyle] with the provided modifiers.
  @override
  FormLabelStyle create(List<PrefixModifier> modifiers) {
    return FormLabelStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/form_label/form_label_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/hero/hero.dart -->
import 'package:jaspr/jaspr.dart' show Key, Styles;

import '../../base/ui_component.dart';
import 'hero_style.dart';

/// A component for displaying a large box, often with a background image and text content.
///
/// The `Hero` component acts as the main container and should contain a [HeroContent]
/// component and, optionally, a [HeroOverlay]. Styling, such as background color,
/// background image, and minimum height, is applied to the `Hero` component itself
/// using general-purpose utilities.
///
/// Example Usage:
/// ```dart
/// Hero(
///   style: [BgUtil.base200, Size.minHScreen],
///   // The `css` property is used for background images.
///   css: Styles.raw({
///     'background-image': 'url(path/to/image.jpg)',
///   }),
///   [
///     HeroOverlay(style: [BgUtil.opacity50]),
///     HeroContent(
///       style: [TextUtil.center, TextUtil.neutralContent],
///       [
///         Container(
///           style: [Size.maxWmd],
///           [
///             h1([text('Hello there')], style: [TextUtil.xl5, FontUtil.bold]),
///             p([text('Provident cupiditate...')], style: [Spacing.py6]),
///             Button([text('Get Started')], style: [Button.primary]),
///           ],
///         ),
///       ],
///     ),
///   ],
/// )
/// ```
class Hero extends UiComponent {
  /// Creates a Hero container component.
  ///
  /// - [children]: The content of the hero, which must include a [HeroContent]
  ///   component and can optionally include a [HeroOverlay].
  /// - [tag]: The HTML tag for the root element, defaults to 'div'.
  /// - [style]: A list of [HeroStyling] instances. Use this to apply general
  ///   utilities like `BgUtil.base200` or `Size.minHScreen`.
  /// - [css]: The `css` property should be used to apply background images.
  /// - Other parameters are inherited from [UiComponent].
  const Hero(
    super.children, {
    super.tag = 'div',
    List<HeroStyling>? style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.key,
  }) : super(style: style);

  @override
  String get baseClass => 'hero';

  @override
  Hero copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return Hero(
      children,
      tag: tag,
      style: style as List<HeroStyling>?,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      key: key ?? this.key,
    );
  }
}

/// The content container within a [Hero] component.
///
/// This component is essential for correctly padding and centering the content
/// inside the `Hero`. All text, images, and buttons should be placed inside this
/// component.
class HeroContent extends UiComponent {
  /// Creates a HeroContent component.
  ///
  /// - [children]: The actual content to be displayed, such as text, images,
  ///   or other components.
  /// - [tag]: The HTML tag for the root element, defaults to 'div'.
  /// - [style]: A list of general utilities for layout and typography,
  ///   like `Layout.flexCol`, `TextUtil.center`, etc.
  /// - Other parameters are inherited from [UiComponent].
  const HeroContent(
    super.children, {
    super.tag = 'div',
    super.style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  }) : super();

  @override
  String get baseClass => 'hero-content';

  @override
  HeroContent copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return HeroContent(
      children,
      tag: tag,
      style: style,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }
}

/// An overlay component used within a [Hero] to add a colored layer over the
/// background, typically to improve text readability on a background image.
///
/// This component renders a `<div>` with the `hero-overlay` class and is often
/// styled with a background color and opacity.
class HeroOverlay extends UiComponent {
  /// Creates a HeroOverlay component.
  ///
  /// - [tag]: The HTML tag for the root element, defaults to 'div'.
  /// - [style]: A list of general utilities. Most commonly used with `BgUtil`
  ///   to set the color and opacity, for example `[BgUtil.opacity50]`.
  /// - Other parameters are inherited from [UiComponent].
  const HeroOverlay({
    super.tag = 'div',
    super.style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.key,
  }) : super(null); // Overlays do not have children.

  @override
  String get baseClass => 'hero-overlay';

  @override
  HeroOverlay copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return HeroOverlay(
      tag: tag,
      style: style,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      key: key ?? this.key,
    );
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/hero/hero.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/hero/hero_style.dart -->
import '../../base/component_style.dart';
import '../../base/style_type.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'hero.dart';

/// A marker interface for any utility that can be passed to a [Hero]'s
/// `style` list.
///
/// This allows for type-safe application of styles. `Hero` has no specific
/// modifiers of its own; this interface is used to allow general utilities
/// (like `BgUtil`, `Size`, etc.) to be applied to it.
abstract class HeroStyling implements Styling {}

/// Defines specific styling options for a [Hero] component.
///
/// This is the concrete implementation class for hero-specific modifiers.
/// It implements the [HeroStyling] interface. Currently, there are no
/// predefined static modifiers for `Hero`, as its styling is compositional,
/// but this class provides a consistent and extensible structure.
class HeroStyle extends ComponentStyle<HeroStyle>
    with Breakpoints<HeroStyle>
    implements HeroStyling {
  /// Constructs a [HeroStyle].
  ///
  /// - [cssClass]: The core CSS class string for this modifier.
  /// - [type]: The [StyleType] categorizing this modifier.
  /// - [modifiers]: An optional list of [PrefixModifier]s for responsive styling.
  const HeroStyle(super.cssClass, {required super.type, super.modifiers});

  /// Creates a new instance of [HeroStyle] with the provided modifiers.
  /// This is an internal method used by the fluent API (`.at()`, `.on()`).
  @override
  HeroStyle create(List<PrefixModifier> modifiers) {
    return HeroStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/hero/hero_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/icon/icon.dart -->
import 'package:jaspr/jaspr.dart';

import '../../base/style_type.dart';
import '../../base/ui_component.dart';
import '../../base/ui_component_attributes.dart';
import 'icon_style.dart';

// It's good practice to have Typography and Sizing utilities available
// for styling icons (color, font-size).
// import '../../base/utilities/typography.dart'; // For text color, font size
// import '../../base/utilities/sizing.dart';    // For explicit width/height if needed

/// A component for displaying icons, typically from an icon font like Material Symbols.
///
/// It renders an HTML `<span>` element with appropriate classes for the icon font
/// and the specified icon name as its text content.
/// Styling (size, color, fill, weight) can be applied via [IconStyling]s or
/// general utility classes.
class Icon extends UiComponent {
  /// Creates an Icon component.
  ///
  /// - [name]: The name of the icon to display (e.g., "home", "settings" for Material Symbols).
  /// - [tag]: The HTML tag for the root element, defaults to 'span'.
  /// - [ariaLabel]: An accessible name for the icon, especially if it's used without visible text.
  ///   If null and [ariaHidden] is false, the icon [name] might be used by assistive tech,
  ///   which may not be ideal.
  /// - [ariaHidden]: If true, hides the icon from assistive technologies. Set to true
  ///   if the icon is purely decorative or if its meaning is conveyed by adjacent text.
  /// - [style]: A list of [IconStyling] (the interface) instances.
  /// - Other parameters are inherited from [UiComponent].
  Icon(
    this.name, {
    super.tag = 'span',
    this.ariaLabel,
    this.ariaHidden,
    List<IconStyling>? style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.key,
  }) : super(
          // The icon name is the direct text child of the span
          [Component.text(name)],
          style: style,
        );

  /// The name or identifier of the icon (e.g., "search", "settings").
  final String name;

  /// An accessible label for the icon. If provided, `aria-hidden` should typically be `false` or null.
  final String? ariaLabel;

  /// If true, the icon will be hidden from assistive technologies (`aria-hidden="true"`).
  /// Useful for decorative icons or when an adjacent text label exists.
  final bool? ariaHidden;

  @override
  String get baseClass => 'material-symbols-rounded'; // Base class for Material Symbols

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);

    if (ariaHidden ?? false) {
      attributes.addAria('hidden', 'true');
      // If hidden, an aria-label is usually not needed or might even be confusing.
      // However, we don't remove a user-provided ariaLabel if ariaHidden is also true.
    } else if (ariaLabel != null && ariaLabel!.isNotEmpty) {
      attributes.addAria('label', ariaLabel!);
    }
    // If neither ariaHidden=true nor ariaLabel is provided, the icon's text content (its name)
    // might be read by screen readers, which can be a fallback but often not optimal.
    // Consider `role="img"` if the icon conveys non-textual information and has an aria-label.
    // if (ariaLabel != null && ariaLabel!.isNotEmpty && ariaHidden != true) {
    //   attributes.addRole('img');
    // }
  }

  @override
  Icon copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return Icon(
      name,
      tag: tag,
      ariaLabel: ariaLabel,
      ariaHidden: ariaHidden,
      style: style as List<IconStyling>?,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      key: key ?? this.key,
    );
  }

  // --- Static Icon Modifiers (Type: IconModifier interface, Instantiating: IconStyleModifier) ---
  // These would correspond to specific Material Symbols CSS styling classes or font variation settings
  // if they are controlled by classes rather than font-variation-settings CSS.

  /// Applies a "filled" style to the icon (if supported by the icon set).
  /// For Material Symbols, this is often controlled by `font-variation-settings: 'FILL' 1;`
  /// or by using a "Filled" variant of the font/icon name.
  /// If DaisyUI/Tailwind provide a utility class for this, we use it.
  /// Assuming a class like `.icon-fill` or similar.
  static const IconStyle fill = IconStyle('filled', type: StyleType.style);

  // Material Symbols weights are typically 100-700.
  // These can be controlled by `font-variation-settings: 'wght' <value>;`
  // If there are utility classes like `font-weight-thin`, `font-weight-bold` from Typography,
  // those should be preferred. These are examples if specific icon classes existed.
  // For Material Symbols, it's often direct CSS or `font-variation-settings`.
  // If `deepyr` aims to abstract `font-variation-settings` via classes, they'd be defined here.

  /// Thin stroke weight for the icon.
  static const IconStyle weightThin = IconStyle('weight-200', type: StyleType.style);

  /// Regular stroke weight for the icon.
  static const IconStyle weightRegular = IconStyle('weight-400', type: StyleType.style);

  /// Bold stroke weight for the icon.
  static const IconStyle weightBold = IconStyle('weight-700', type: StyleType.style);

  // Sizes: DaisyUI/Tailwind text size utilities are typically used for font icons.
  // e.g., Text(modifiers: [Typography.textLg], [Icon(...)]) or Icon(..., modifiers: [Typography.textLg])
  // If you want dedicated Icon.sizeSm, Icon.sizeMd, etc., they would map to text size classes.
  // Your original example had text-xs, text-sm, etc. These should come from Typography utility.

  // Color: Similarly, text color utilities from Typography/Colors should be used.
  // e.g., Icon(..., modifiers: [Colors.textPrimary])
  // Your original example had text-primary etc.
}

<!-- END FILE: packages/deepyr/lib/src/components/icon/icon.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/icon/icon_style.dart -->
import '../../base/component_style.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'icon.dart';

/// Marker interface for any utility that can be passed to an [Icon]'s `modifiers` list.
abstract class IconStyling implements Styling {}

/// Defines specific styling options for an [Icon] component,
/// such as fill state or font weight, often specific to the icon font being used.
/// Implements the [IconStyling] interface.
class IconStyle extends ComponentStyle<IconStyle>
    with Breakpoints<IconStyle>
    implements IconStyling {
  // Implements the IconModifier INTERFACE
  const IconStyle(super.cssClass, {required super.type, super.modifiers});

  @override
  IconStyle create(List<PrefixModifier> modifiers) {
    return IconStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/icon/icon_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/indicator/indicator.dart -->
import 'package:jaspr/jaspr.dart' show Key, Styles;

import '../../../deepyr.dart' show Badge;
import '../../base/style_type.dart';
import '../../base/ui_component.dart';
import '../badge/badge.dart' show Badge;
import 'indicator_style.dart';

/// A component to place a badge or item on the corner of another element.
///
/// The `Indicator` component wraps both the main content and the indicator item.
/// The indicator item itself should be wrapped in an [IndicatorItem] component.
class Indicator extends UiComponent {
  /// Creates an Indicator container.
  ///
  /// - [children]: The content, which should include the main element and one or
  ///   more [IndicatorItem]s.
  /// - [style]: A list of [IndicatorStyling] modifiers to control the
  ///   default position of all indicator items within it.
  /// - Other parameters are inherited from [UiComponent].
  const Indicator(
    super.children, {
    super.tag = 'div',
    List<IndicatorStyling>? style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  }) : super(style: style);

  @override
  String get baseClass => 'indicator';

  @override
  Indicator copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return Indicator(
      children,
      tag: tag,
      style: style as List<IndicatorStyling>?,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }
  // --- Static Style Modifiers ---
  // These can be applied to the Indicator container to set the default
  // position for all IndicatorItems within it.

  /// Positions items at the horizontal start. `indicator-start`
  static const IndicatorStyle start = IndicatorStyle('indicator-start', type: StyleType.layout);

  /// Positions items at the horizontal center. `indicator-center`
  static const IndicatorStyle center = IndicatorStyle('indicator-center', type: StyleType.layout);

  /// Positions items at the horizontal end. `indicator-end`
  static const IndicatorStyle end = IndicatorStyle('indicator-end', type: StyleType.layout);

  /// Positions items at the vertical top. `indicator-top`
  static const IndicatorStyle top = IndicatorStyle('indicator-top', type: StyleType.layout);

  /// Positions items at the vertical middle. `indicator-middle`
  static const IndicatorStyle middle = IndicatorStyle('indicator-middle', type: StyleType.layout);

  /// Positions items at the vertical bottom. `indicator-bottom`
  static const IndicatorStyle bottom = IndicatorStyle('indicator-bottom', type: StyleType.layout);
}

/// An item, such as a [Badge], to be placed on the corner of an element
/// within an [Indicator] container.
///
/// This component applies the `indicator-item` class and can be styled with
/// positional modifiers to override the parent [Indicator]'s settings.
class IndicatorItem extends UiComponent {
  /// Creates an IndicatorItem.
  ///
  /// - [children] or [child]: The component to display as the indicator (e.g., a `Badge`).
  /// - [style]: A list of [IndicatorItemStyling] modifiers to control its position.
  /// - Other parameters are inherited from [UiComponent].
  const IndicatorItem(
    super.children, {
    super.tag = 'div',
    List<IndicatorItemStyling>? style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  }) : super(style: style);

  @override
  String get baseClass => 'indicator-item';

  /// Computes the combined string of CSS classes.
  ///
  /// This overridden method makes the component "smart". It automatically adds
  /// flexbox centering classes if the user provides `IndicatorItem.middle` or
  /// `IndicatorItem.center` styles, abstracting away the implementation detail.
  @override
  String get combinedClasses {
    final baseClasses = <String>[baseClass];
    final utilityClasses = <String>[];
    var hasMiddle = false;
    var hasCenter = false;

    // Process all style modifiers provided by the user.
    if (style != null) {
      for (final s in style!) {
        final sClass = s.toString();
        utilityClasses.add(sClass);
        // Check if any of the styles (including responsive ones) contain
        // the keywords for middle or center positioning.
        if (sClass.contains('indicator-middle')) hasMiddle = true;
        if (sClass.contains('indicator-center')) hasCenter = true;
      }
    }

    // If a middle or center alignment is requested, automatically add
    // the necessary flexbox classes for perfect centering.
    if (hasMiddle || hasCenter) {
      baseClasses.add('flex');
      if (hasMiddle) baseClasses.add('items-center');
      if (hasCenter) baseClasses.add('justify-center');
    }

    // Combine all class groups.
    return <String>[
      ...baseClasses,
      ...utilityClasses,
      if (classes != null) classes!,
    ].where((c) => c.isNotEmpty).join(' ');
  }

  @override
  IndicatorItem copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return IndicatorItem(
      children,
      tag: tag,
      style: style as List<IndicatorItemStyling>?,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }
  // --- Static Style Modifiers ---
  // These can be applied to an IndicatorItem to override the parent Indicator's position.

  /// Positions the item at the horizontal start. `indicator-start`
  static const IndicatorItemStyle start =
      IndicatorItemStyle('indicator-start', type: StyleType.layout);

  /// Positions the item at the horizontal center. `indicator-center`
  static const IndicatorItemStyle center =
      IndicatorItemStyle('indicator-center', type: StyleType.layout);

  /// Positions the item at the horizontal end. `indicator-end`
  static const IndicatorItemStyle end = IndicatorItemStyle('indicator-end', type: StyleType.layout);

  /// Positions the item at the vertical top. `indicator-top`
  static const IndicatorItemStyle top = IndicatorItemStyle('indicator-top', type: StyleType.layout);

  /// Positions the item at the vertical middle. `indicator-middle`
  static const IndicatorItemStyle middle =
      IndicatorItemStyle('indicator-middle', type: StyleType.layout);

  /// Positions the item at the vertical bottom. `indicator-bottom`
  static const IndicatorItemStyle bottom =
      IndicatorItemStyle('indicator-bottom', type: StyleType.layout);
}

<!-- END FILE: packages/deepyr/lib/src/components/indicator/indicator.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/indicator/indicator_style.dart -->
import '../../base/component_style.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'indicator.dart';

/// A marker interface for any utility that can be passed to an [Indicator]'s `style` list.
abstract class IndicatorStyling implements Styling {}

/// Defines specific styling options for an [Indicator] container, such as the
/// position of its indicator items.
class IndicatorStyle extends ComponentStyle<IndicatorStyle>
    with Breakpoints<IndicatorStyle>
    implements IndicatorStyling {
  /// Constructs an [IndicatorStyle].
  const IndicatorStyle(
    super.cssClass, {
    required super.type,
    super.modifiers,
  });

  @override
  IndicatorStyle create(List<PrefixModifier> modifiers) {
    return IndicatorStyle(cssClass, type: type, modifiers: modifiers);
  }
}

/// A marker interface for any utility that can be passed to an [IndicatorItem]'s `style` list.
abstract class IndicatorItemStyling implements Styling {}

/// Defines specific styling options for an [IndicatorItem], primarily its position
/// relative to the parent [Indicator] container.
class IndicatorItemStyle extends ComponentStyle<IndicatorItemStyle>
    with Breakpoints<IndicatorItemStyle>
    implements IndicatorItemStyling {
  /// Constructs an [IndicatorItemStyle].
  const IndicatorItemStyle(
    super.cssClass, {
    required super.type,
    super.modifiers,
  });

  @override
  IndicatorItemStyle create(List<PrefixModifier> modifiers) {
    return IndicatorItemStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/indicator/indicator_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/input/input.dart -->
import 'package:jaspr/jaspr.dart' show Key, Styles;

import '../../base/style_type.dart';
import '../../base/ui_component.dart';
import '../../base/ui_component_attributes.dart';
import 'input_style.dart';

/// A component for user text input, rendering an HTML `<input>` element.
///
/// It supports various styles, sizes, and colors through its `style` property,
/// and common input attributes can be passed directly to the constructor.
class Input extends UiComponent {
  /// Creates an Input component.
  ///
  /// - [type]: The HTML input type (e.g., 'text', 'password', 'email'). Defaults to 'text'.
  /// - [placeholder]: The placeholder text to display in the input.
  /// - [value]: The initial value of the input field.
  /// - [name]: The name of the input, used for form submission.
  /// - [disabled]: If true, the input will be disabled.
  /// - [style]: A list of [InputStyling] instances for styling.
  /// - Event handlers like [onInput] and [onChange] from [UiComponent] are available.
  /// - Other parameters are inherited from [UiComponent].
  const Input({
    this.type = 'text',
    this.placeholder,
    this.value,
    this.name,
    this.disabled = false,
    super.tag = 'input',
    List<InputStyling>? style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.onInput,
    super.onChange,
    super.key,
    this.required = false,
    this.pattern,
    this.minLength,
    this.maxLength,
    this.min,
    this.max,
    this.title,
  }) : super(null, style: style); // Input elements have no children.

  final String type;
  final String? placeholder;
  final String? value;
  final String? name;
  final bool disabled;
  final bool required;
  final String? pattern;
  final int? minLength;
  final int? maxLength;
  final num? min;
  final num? max;
  final String? title;

  @override
  String get baseClass => 'input';

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);
    attributes.add('type', type);
    if (placeholder != null) attributes.add('placeholder', placeholder!);
    if (value != null) attributes.add('value', value!);
    if (name != null) attributes.add('name', name!);
    if (disabled) attributes.add('disabled', '');
    if (required) attributes.add('required', '');
    if (pattern != null) attributes.add('pattern', pattern!);
    if (minLength != null) attributes.add('minlength', minLength!.toString());
    if (maxLength != null) attributes.add('maxlength', maxLength!.toString());
    if (min != null) attributes.add('min', min!.toString());
    if (max != null) attributes.add('max', max!.toString());
    if (title != null) attributes.add('title', title!);
  }

  @override
  String get combinedClasses {
    final classes = super.combinedClasses;
    final needsValidator = required ||
        pattern != null ||
        minLength != null ||
        maxLength != null ||
        min != null ||
        max != null;
    if (needsValidator) {
      return '$classes validator';
    }
    return classes;
  }

  @override
  Input copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return Input(
      type: type,
      placeholder: placeholder,
      value: value,
      name: name,
      disabled: disabled,
      tag: tag,
      style: style as List<InputStyling>?,
      onInput: onInput,
      onChange: onChange,
      required: required,
      pattern: pattern,
      minLength: minLength,
      maxLength: maxLength,
      min: min,
      max: max,
      title: title,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      key: key ?? this.key,
    );
  }

  // --- Static Style Modifiers ---

  /// Adds a border to the input. `input-bordered`
  static const InputStyle bordered = InputStyle('input-bordered', type: StyleType.border);

  /// Ghost style (transparent background). `input-ghost`
  static const InputStyle ghost = InputStyle('input-ghost', type: StyleType.style);

  // Colors
  /// Neutral color. `input-neutral`
  static const InputStyle neutral = InputStyle('input-neutral', type: StyleType.style);

  /// Primary color. `input-primary`
  static const InputStyle primary = InputStyle('input-primary', type: StyleType.style);

  /// Secondary color. `input-secondary`
  static const InputStyle secondary = InputStyle('input-secondary', type: StyleType.style);

  /// Accent color. `input-accent`
  static const InputStyle accent = InputStyle('input-accent', type: StyleType.style);

  /// Info color. `input-info`
  static const InputStyle info = InputStyle('input-info', type: StyleType.style);

  /// Success color. `input-success`
  static const InputStyle success = InputStyle('input-success', type: StyleType.style);

  /// Warning color. `input-warning`
  static const InputStyle warning = InputStyle('input-warning', type: StyleType.style);

  /// Error color. `input-error`
  static const InputStyle error = InputStyle('input-error', type: StyleType.style);

  // Sizes
  /// Extra-small size. `input-xs`
  static const InputStyle xs = InputStyle('input-xs', type: StyleType.sizing);

  /// Small size. `input-sm`
  static const InputStyle sm = InputStyle('input-sm', type: StyleType.sizing);

  /// Medium size (default). `input-md`
  static const InputStyle md = InputStyle('input-md', type: StyleType.sizing);

  /// Large size. `input-lg`
  static const InputStyle lg = InputStyle('input-lg', type: StyleType.sizing);

  /// Extra-large size. `input-xl`
  static const InputStyle xl = InputStyle('input-xl', type: StyleType.sizing);
}

<!-- END FILE: packages/deepyr/lib/src/components/input/input.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/input/input_style.dart -->
import '../../base/component_style.dart';
import '../../base/style_type.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'input.dart';

/// A marker interface for any utility that can be passed to an [Input]'s `style` list.
///
/// This allows for type-safe application of styles for colors, sizes, and variants.
abstract class InputStyling implements Styling {}

/// Defines specific styling options for an [Input] component.
///
/// This is the concrete implementation class for input-specific modifiers.
/// It implements the [InputStyling] interface, making it a valid type for the
/// `style` property of an [Input] component.
class InputStyle extends ComponentStyle<InputStyle>
    with Breakpoints<InputStyle>
    implements InputStyling {
  /// Constructs an [InputStyle].
  ///
  /// - [cssClass]: The core CSS class string for this modifier (e.g., "input-bordered").
  /// - [type]: The [StyleType] categorizing this modifier.
  /// - [modifiers]: An optional list of [PrefixModifier]s for responsive styling.
  const InputStyle(
    super.cssClass, {
    required super.type,
    super.modifiers,
  });

  /// Creates a new instance of [InputStyle] with the provided modifiers.
  @override
  InputStyle create(List<PrefixModifier> modifiers) {
    return InputStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/input/input_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/join/join.dart -->
import 'package:jaspr/jaspr.dart';

import '../../base/style_type.dart';
import '../../base/ui_component.dart';
import 'join_style.dart';

/// A "smart" container for grouping multiple items like buttons or inputs.
///
/// The `Join` component automatically applies the necessary `join-item` class
/// to its direct `UiComponent` children. This creates a seamless, connected group
/// by applying the correct border radius to the first and last items.
///
/// Place your `deepyr` components like
/// `Button`, `Input`, or `Select` directly inside the `Join` component.
///
/// Example:
/// ```dart
/// Join([
///   Button([text('Button 1')]), // Automatically becomes a join-item
///   Button([text('Button 2')]), // Automatically becomes a join-item
/// ])
/// ```
class Join extends UiComponent {
  /// Creates a "smart" Join container component.
  ///
  /// - [children] or [child]: A list of components to be joined. The `Join`
  ///   component will automatically apply the `join-item` class to any direct
  ///   child that is a `deepyr` `UiComponent`.
  /// - [tag]: The HTML tag for the root element, defaults to 'div'.
  /// - [style]: A list of [JoinStyling] instances to control direction
  ///   (e.g., `Join.vertical`).
  /// - Other parameters are inherited from [UiComponent].
  const Join(
    super.children, {
    super.tag = 'div',
    List<JoinStyling>? style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  }) : super(style: style);

  @override
  String get baseClass => 'join';

  /// Overridden build method to intelligently apply the `join-item` class
  /// to all direct `UiComponent` children.
  @override
  Component build(BuildContext context) {
    Component? finalChild;
    List<Component>? finalChildren;

    // Process a list of children if provided.
    if (children != null) {
      finalChildren = children!.map((c) {
        if (c is UiComponent) {
          // Clone the child, merging the 'join-item' class.
          return c.copyWith(classes: 'join-item');
        }
        // Return non-UiComponent children (like text()) unmodified.
        return c;
      }).toList();
    }
    // Process a single child if provided.
    else if (child != null) {
      if (child is UiComponent) {
        finalChild = (child! as UiComponent).copyWith(classes: 'join-item');
      } else {
        finalChild = child;
      }
    }

    // return the final DomComponent with the transformed children.
    return Component.element(
      tag: tag,
      id: id,
      classes: combinedClasses,
      styles: this.css,
      attributes: componentAttributes,
      events: this.events,
      children: finalChildren ?? [?finalChild],
    );
  }

  @override
  Join copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    // Note: The copyWith method creates a new Join component.
    // The new component's build method will then apply the join-item logic
    // to its children. We don't need to transform children here.
    return Join(
      children,
      tag: tag,
      style: style as List<JoinStyling>?,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      key: key ?? this.key,
      child: child,
    );
  }

  // --- Static Join Style Modifiers ---

  /// Arranges the items vertically. `join-vertical`
  static const JoinStyle vertical = JoinStyle(
    'join-vertical',
    type: StyleType.layout,
  );

  /// Arranges the items horizontally (default behavior). `join-horizontal`
  static const JoinStyle horizontal = JoinStyle(
    'join-horizontal',
    type: StyleType.layout,
  );
}

<!-- END FILE: packages/deepyr/lib/src/components/join/join.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/join/join_style.dart -->
import '../../base/component_style.dart';
import '../../base/style_type.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'join.dart';

/// A marker interface for any utility that can be passed to a [Join]'s `style` list.
///
/// This allows for type-safe application of styles, ensuring only relevant modifiers,
/// like direction (`Join.vertical`), can be applied to the container.
abstract class JoinStyling implements Styling {}

/// Defines specific styling options for a [Join] container component, such as its
/// orientation (horizontal or vertical).
///
/// This is the concrete implementation class for join-specific modifiers. It
/// implements the [JoinStyling] interface, making it a valid type for the
/// `style` property of a [Join] component.
class JoinStyle extends ComponentStyle<JoinStyle>
    with Breakpoints<JoinStyle>
    implements JoinStyling {
  /// Constructs a [JoinStyle].
  ///
  /// - [cssClass]: The core CSS class string for this modifier (e.g., "join-vertical").
  /// - [type]: The [StyleType] categorizing this modifier.
  /// - [modifiers]: An optional list of [PrefixModifier]s for responsive styling.
  const JoinStyle(
    super.cssClass, {
    required super.type,
    super.modifiers,
  });

  /// Creates a new instance of [JoinStyle] with the provided modifiers.
  /// This is an internal method used by the fluent API (`.at()`, `.on()`).
  @override
  JoinStyle create(List<PrefixModifier> modifiers) {
    return JoinStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/join/join_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/kbd/kbd.dart -->
import 'package:jaspr/jaspr.dart' show Key, Styles;

import '../../base/style_type.dart';
import '../../base/ui_component.dart';
import 'kbd_style.dart';

/// A component used to display keyboard shortcuts or key presses.
///
/// It renders as an HTML `<kbd>` element with the 'kbd' base class.
/// The `style` list accepts instances of [KbdStyling], allowing for size adjustments.
class Kbd extends UiComponent {
  /// Creates a Kbd component.
  ///
  /// - [children] or [child]: The content to display within the key (e.g., text like "Ctrl", "A", or "⌘").
  /// - [tag]: The HTML tag for the root element, defaults to 'kbd'.
  /// - [style]: A list of [KbdStyling] instances, primarily for setting the size.
  /// - Other parameters are inherited from [UiComponent].
  const Kbd(
    super.children, {
    super.tag = 'kbd',
    List<KbdStyling>? style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  }) : super(style: style);

  @override
  String get baseClass => 'kbd';

  @override
  Kbd copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return Kbd(
      children,
      tag: tag,
      style: style as List<KbdStyling>?,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }

  // --- Static Kbd Style Modifiers ---

  /// Extra-small size. `kbd-xs`
  static const KbdStyle xs = KbdStyle(
    'kbd-xs',
    type: StyleType.sizing,
  );

  /// Small size. `kbd-sm`
  static const KbdStyle sm = KbdStyle(
    'kbd-sm',
    type: StyleType.sizing,
  );

  /// Medium size (default). `kbd-md`
  static const KbdStyle md = KbdStyle(
    'kbd-md',
    type: StyleType.sizing,
  );

  /// Large size. `kbd-lg`
  static const KbdStyle lg = KbdStyle(
    'kbd-lg',
    type: StyleType.sizing,
  );

  /// Extra-large size. `kbd-xl`
  static const KbdStyle xl = KbdStyle(
    'kbd-xl',
    type: StyleType.sizing,
  );
}

<!-- END FILE: packages/deepyr/lib/src/components/kbd/kbd.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/kbd/kbd_style.dart -->
import '../../base/component_style.dart';
import '../../base/style_type.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'kbd.dart';

/// A marker interface for any utility that can be passed to a [Kbd]'s `style` list.
///
/// This allows for type-safe application of styles. Both component-specific styles
/// (like [KbdStyle]) and applicable general utilities can implement this interface.
abstract class KbdStyling implements Styling {}

/// Defines specific styling options for a [Kbd] component, such as its size.
///
/// This is the concrete implementation class for kbd-specific modifiers.
/// It implements the [KbdStyling] interface, making it a valid type for the
/// `style` property of a [Kbd] component.
class KbdStyle extends ComponentStyle<KbdStyle> with Breakpoints<KbdStyle> implements KbdStyling {
  /// Constructs a [KbdStyle].
  ///
  /// - [cssClass]: The core CSS class string for this modifier (e.g., "kbd-lg").
  /// - [type]: The [StyleType] categorizing this modifier.
  /// - [modifiers]: An optional list of [PrefixModifier]s for responsive or state-based styling.
  const KbdStyle(
    super.cssClass, {
    required super.type,
    super.modifiers,
  });

  /// Creates a new instance of [KbdStyle] with the provided modifiers.
  /// This is an internal method used by the fluent API (`.at()`, `.on()`).
  @override
  KbdStyle create(List<PrefixModifier> modifiers) {
    return KbdStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/kbd/kbd_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/label/label.dart -->
import 'package:jaspr/jaspr.dart';

import '../../../deepyr.dart';
import '../../base/style_type.dart';
import '../../base/ui_component.dart';
import 'label_style.dart';

/// An enum defining the contextual container roles a [Label] can adopt
/// based on DaisyUI patterns.
enum LabelContainerType {
  /// Styles the label as a container for an `<input>` element (`class="input"`).
  input('input'),

  /// Styles the label as a container for a `<select>` element (`class="select"`).
  select('select');

  const LabelContainerType(this.cssClass);
  final String cssClass;
}

/// A component that renders an HTML `<label>` element, specifically designed to
/// act as a styled container for form elements as per DaisyUI patterns.
///
/// This component encapsulates patterns like `<label class="input input-bordered">`.
/// Its role is determined by the required [type] parameter.
///
/// **Note:** For a simple, semantic `<label for="...">` used for accessibility,
/// please use Jaspr's built-in `label()` function. This component is for
/// creating styled DaisyUI fields.
class Label extends UiComponent {
  /// Creates a styled `<label>` container for form elements.
  ///
  /// - [children] or [child]: The content of the container, typically an `Input`
  ///   or `Select` component along with its descriptive text.
  /// - [type]: **Required.** The contextual role of the container, which
  ///   determines its base class (e.g., `input` or `select`).
  /// - [isBordered]: If true, applies the corresponding bordered class
  ///   (e.g., `input-bordered`, `select-bordered`). Defaults to `true`.
  /// - [style]: A list of [LabelStyling] modifiers, such as [Label.floating],
  ///   and general layout utilities.
  const Label(
    super.children, {
    required this.type,
    this.isBordered = true,
    List<LabelStyling>? style,
    super.tag = 'label',
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  }) : super(style: style);

  /// The contextual role of the container, which defines its base class.
  final LabelContainerType type;

  /// If true, applies the bordered variation class (e.g., 'input-bordered').
  final bool isBordered;

  /// CSS rules associated with the Label component.
  /// This is automatically collected by the Jaspr build system.
  @css
  static final List<StyleRule> styles = [
    // This rule prevents the default browser focus outline on an <input>
    // or <select> when it is a direct child of a deepyr Label container
    // (which has the .input or .select class). This allows the parent
    // label's :focus-within style from DaisyUI to be the only visible
    // focus indicator, preventing a "double outline" glitch.
    css('.input > input:focus, .select > select:focus').styles(
      raw: {
        'outline': 'none',
      },
    ),
  ];

  @override
  String get baseClass => type.cssClass;

  @override
  String get combinedClasses {
    final effectiveClasses = <String>[
      baseClass,
      if (isBordered) '$baseClass-bordered',
    ];

    final utilityClasses = style?.map((s) => s.toString()).join(' ');
    if (utilityClasses != null && utilityClasses.isNotEmpty) {
      effectiveClasses.add(utilityClasses);
    }

    if (classes != null && classes!.isNotEmpty) {
      effectiveClasses.add(classes!);
    }

    return effectiveClasses.where((c) => c.isNotEmpty).join(' ');
  }

  @override
  Label copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return Label(
      children,
      type: type,
      isBordered: isBordered,
      style: style as List<LabelStyling>?,
      tag: tag,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }

  // --- Static Label Style Modifiers ---

  /// Styles the label as a container for a floating label effect.
  /// The `<span>` text inside will float above the input on focus.
  static const LabelStyle floating = LabelStyle(
    'floating-label',
    type: StyleType.layout,
  );
}

<!-- END FILE: packages/deepyr/lib/src/components/label/label.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/label/label_style.dart -->
import '../../base/component_style.dart';
import '../../base/style_type.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'label.dart';

/// A marker interface for any utility that can be passed to a [Label]'s
/// `style` list.
///
/// This allows for type-safe application of styles. Both component-specific
/// styles (like [LabelStyle]) and general utilities can implement this interface.
abstract class LabelStyling implements Styling {}

/// Defines specific styling options for a [Label] component, such as the
/// floating label effect.
///
/// This is the concrete implementation class for label-specific modifiers. It
/// implements the [LabelStyling] interface, making it a valid type for the
/// `style` property of a [Label] component.
class LabelStyle extends ComponentStyle<LabelStyle>
    with Breakpoints<LabelStyle>
    implements LabelStyling {
  /// Constructs a [LabelStyle].
  ///
  /// - [cssClass]: The core CSS class string for this modifier (e.g., "floating-label").
  /// - [type]: The [StyleType] categorizing this modifier.
  /// - [modifiers]: An optional list of [PrefixModifier]s for responsive styling.
  const LabelStyle(
    super.cssClass, {
    required super.type,
    super.modifiers,
  });

  /// Creates a new instance of [LabelStyle] with the provided modifiers.
  /// This is an internal method used by the fluent API (`.at()`, `.on()`).
  @override
  LabelStyle create(List<PrefixModifier> modifiers) {
    return LabelStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/label/label_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/link/link.dart -->
import 'package:jaspr/jaspr.dart' show Key, Styles;

import '../../base/style_type.dart';
import '../../base/ui_component.dart';
import '../../base/ui_component_attributes.dart';
import 'link_style.dart';

/// A component that styles an element to look like a hyperlink, typically adding an underline.
///
/// It renders as an `<a>` tag by default but can be changed using the `tag` property.
/// This is useful for styling buttons or other elements to look like links.
///
/// Example Usage:
/// ```dart
/// Link(
///   [text('Read more')],
///   href: '/about',
///   style: [Link.primary, Link.hover],
/// )
/// ```
class Link extends UiComponent {
  /// Creates a Link component.
  ///
  /// - [children]: The content of the link, typically text.
  /// - [href]: The URL that the hyperlink points to. Only applicable if the `tag` is 'a'.
  /// - [target]: Specifies where to open the linked document (e.g., '_blank', '_self').
  /// - [tag]: The HTML tag for the root element, defaults to 'a'.
  /// - [style]: A list of [LinkStyling] instances to control the color and hover behavior.
  /// - Other parameters are inherited from [UiComponent].
  const Link(
    super.children, {
    this.href,
    this.target,
    super.tag = 'a',
    List<LinkStyling>? style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  }) : super(style: style);

  /// The URL that the hyperlink points to.
  final String? href;

  /// Specifies where to open the linked document (e.g., `_blank`, `_self`).
  final String? target;

  @override
  String get baseClass => 'link';

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);
    if (href != null) {
      attributes.add('href', href!);
    }
    if (target != null) {
      attributes.add('target', target!);
    }
  }

  @override
  Link copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return Link(
      children,
      href: href,
      target: target,
      tag: tag,
      style: style as List<LinkStyling>?,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }

  // --- Static Style Modifiers ---

  /// Only shows the underline on hover. `link-hover`
  static const LinkStyle hover = LinkStyle('link-hover', type: StyleType.style);

  // Colors
  /// Neutral color. `link-neutral`
  static const LinkStyle neutral = LinkStyle('link-neutral', type: StyleType.style);

  /// Primary color. `link-primary`
  static const LinkStyle primary = LinkStyle('link-primary', type: StyleType.style);

  /// Secondary color. `link-secondary`
  static const LinkStyle secondary = LinkStyle('link-secondary', type: StyleType.style);

  /// Accent color. `link-accent`
  static const LinkStyle accent = LinkStyle('link-accent', type: StyleType.style);

  /// Success color. `link-success`
  static const LinkStyle success = LinkStyle('link-success', type: StyleType.style);

  /// Info color. `link-info`
  static const LinkStyle info = LinkStyle('link-info', type: StyleType.style);

  /// Warning color. `link-warning`
  static const LinkStyle warning = LinkStyle('link-warning', type: StyleType.style);

  /// Error color. `link-error`
  static const LinkStyle error = LinkStyle('link-error', type: StyleType.style);
}

<!-- END FILE: packages/deepyr/lib/src/components/link/link.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/link/link_style.dart -->
import '../../base/component_style.dart';
import '../../base/style_type.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'link.dart';

/// A marker interface for any utility that can be passed to a [Link]'s `style` list.
///
/// This allows for type-safe application of styles for color and hover behavior.
abstract class LinkStyling implements Styling {}

/// Defines specific styling options for a [Link] component.
///
/// This is the concrete implementation class for link-specific modifiers.
/// It implements the [LinkStyling] interface, making it a valid type for the
/// `style` property of a [Link] component.
class LinkStyle extends ComponentStyle<LinkStyle>
    with Breakpoints<LinkStyle>
    implements LinkStyling {
  /// Constructs a [LinkStyle].
  ///
  /// - [cssClass]: The core CSS class string for this modifier (e.g., "link-primary").
  /// - [type]: The [StyleType] categorizing this modifier.
  /// - [modifiers]: An optional list of [PrefixModifier]s for responsive styling.
  const LinkStyle(super.cssClass, {required super.type, super.modifiers});

  /// Creates a new instance of [LinkStyle] with the provided modifiers.
  @override
  LinkStyle create(List<PrefixModifier> modifiers) {
    return LinkStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/link/link_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/loading/loading.dart -->
import 'package:jaspr/jaspr.dart' show Key, Styles;

import '../../base/style_type.dart';
import '../../base/ui_component.dart';
import '../../base/ui_component_attributes.dart';
import 'loading_style.dart';

/// A component that shows an animation to indicate that something is loading.
///
/// It renders an empty `<span>` element with the necessary CSS classes for the
/// animation. The color of the loading indicator is controlled by standard text
/// color utilities (e.g., `TextUtil.primary`).
///
/// Example Usage:
/// ```dart
/// Loading(
///   style: [
///     Loading.spinner,
///     Loading.lg,
///     TextUtil.primary, // Color is applied via text utilities
///   ],
/// )
/// ```
class Loading extends UiComponent {
  /// Creates a Loading component.
  ///
  /// - [style]: A list of [LoadingStyling] instances to control the animation
  ///   type (e.g., `Loading.spinner`) and size (e.g., `Loading.lg`).
  ///   Color should be applied using a text utility like `TextUtil.primary`.
  /// - [ariaLabel]: An accessible name for the loading indicator. Defaults to "loading".
  ///   It's recommended to provide a more descriptive label if possible (e.g., "Loading results...").
  /// - [tag]: The HTML tag for the root element, defaults to 'span'.
  /// - Other parameters are inherited from [UiComponent].
  const Loading({
    List<LoadingStyling>? style,
    this.ariaLabel,
    super.tag = 'span',
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.key,
  }) : super(null, style: style); // Loading elements have no children.

  /// An accessible label for the loading indicator, announced by screen readers.
  final String? ariaLabel;

  @override
  String get baseClass => 'loading';

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);
    // The 'status' role indicates that the content is a live region
    // providing advisory information about the status of a request.
    if (!userProvidedAttributes.containsKey('role')) {
      attributes.addRole('status');
    }
    // Provide a default accessible name, which can be overridden by the user.
    attributes.addAria('label', ariaLabel ?? 'loading');
  }

  @override
  Loading copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return Loading(
      style: style as List<LoadingStyling>?,
      ariaLabel: ariaLabel,
      tag: tag,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      key: key ?? this.key,
    );
  }

  // --- Static Style Modifiers ---

  // Animation Styles
  /// Spinner animation. `loading-spinner`
  static const LoadingStyle spinner = LoadingStyle('loading-spinner', type: StyleType.style);

  /// Dots animation. `loading-dots`
  static const LoadingStyle dots = LoadingStyle('loading-dots', type: StyleType.style);

  /// Ring animation. `loading-ring`
  static const LoadingStyle ring = LoadingStyle('loading-ring', type: StyleType.style);

  /// Ball animation. `loading-ball`
  static const LoadingStyle ball = LoadingStyle('loading-ball', type: StyleType.style);

  /// Bars animation. `loading-bars`
  static const LoadingStyle bars = LoadingStyle('loading-bars', type: StyleType.style);

  /// Infinity animation. `loading-infinity`
  static const LoadingStyle infinity = LoadingStyle('loading-infinity', type: StyleType.style);

  // Sizes
  /// Extra-small size. `loading-xs`
  static const LoadingStyle xs = LoadingStyle('loading-xs', type: StyleType.sizing);

  /// Small size. `loading-sm`
  static const LoadingStyle sm = LoadingStyle('loading-sm', type: StyleType.sizing);

  /// Medium size (default). `loading-md`
  static const LoadingStyle md = LoadingStyle('loading-md', type: StyleType.sizing);

  /// Large size. `loading-lg`
  static const LoadingStyle lg = LoadingStyle('loading-lg', type: StyleType.sizing);

  /// Extra-large size. `loading-xl`
  static const LoadingStyle xl = LoadingStyle('loading-xl', type: StyleType.sizing);
}

<!-- END FILE: packages/deepyr/lib/src/components/loading/loading.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/loading/loading_style.dart -->
import '../../base/component_style.dart';
import '../../base/style_type.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'loading.dart';

/// A marker interface for any utility that can be passed to a [Loading]'s `style` list.
///
/// This allows for type-safe application of styles for animation type and size.
/// Note that color is applied via general text utilities like `TextUtil.primary`.
abstract class LoadingStyling implements Styling {}

/// Defines specific styling options for a [Loading] component.
///
/// This is the concrete implementation class for loading-specific modifiers.
/// It implements the [LoadingStyling] interface, making it a valid type for the
/// `style` property of a [Loading] component.
class LoadingStyle extends ComponentStyle<LoadingStyle>
    with Breakpoints<LoadingStyle>
    implements LoadingStyling {
  /// Constructs a [LoadingStyle].
  ///
  /// - [cssClass]: The core CSS class string for this modifier (e.g., "loading-spinner").
  /// - [type]: The [StyleType] categorizing this modifier.
  /// - [modifiers]: An optional list of [PrefixModifier]s for responsive styling.
  const LoadingStyle(super.cssClass, {required super.type, super.modifiers});

  /// Creates a new instance of [LoadingStyle] with the provided modifiers.
  @override
  LoadingStyle create(List<PrefixModifier> modifiers) {
    return LoadingStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/loading/loading_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/menu/menu.dart -->
import 'package:jaspr/jaspr.dart';

import '../../base/style_type.dart';
import '../../base/styling.dart';
import '../../base/styling_extensions.dart';
import '../../base/ui_component.dart';
import '../../base/ui_component_attributes.dart';
import 'menu_style.dart';

/// A container for a list of navigation links, which can be arranged vertically or horizontally.
///
/// The `Menu` component renders a `<ul>` element and is the main container for
/// [MenuItem], [MenuTitle], and submenu components like [MenuSubmenu]. It applies the necessary
/// base class and ARIA roles for accessibility.
@immutable
class Menu extends UiComponent {
  /// Creates a Menu component.
  ///
  /// - [children]: The content of the menu, which should be a list of
  ///   [MenuItem], [MenuTitle], or submenu components.
  /// - [tag]: The HTML tag for the root element, defaults to 'ul'.
  /// - [style]: A list of [MenuStyling] instances to control size and direction.
  /// - [ariaLabel]: An accessible name for the menu, crucial for screen readers.
  /// - Other parameters are inherited from [UiComponent].
  const Menu(
    super.children, {
    super.tag = 'ul',
    List<MenuStyling>? style,
    this.ariaLabel,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  }) : super(style: style);

  /// An accessible name for the menu container. This is highly recommended for
  /// accessibility, as it describes the purpose of the navigation block to
  /// users of assistive technologies (e.g., "Main navigation", "User settings").
  final String? ariaLabel;

  @override
  String get baseClass => 'menu';

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);
    final isHorizontal =
        style?.any((m) => m is MenuStyle && m.cssClass == Menu.horizontal.cssClass) ?? false;
    if (isHorizontal) {
      attributes
        ..addRole('menubar')
        ..addAria('orientation', 'horizontal');
    } else {
      attributes
        ..addRole('menu')
        ..addAria('orientation', 'vertical');
    }
    if (ariaLabel != null && ariaLabel!.isNotEmpty) {
      attributes.addAria('label', ariaLabel!);
    }
  }

  @override
  Menu copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return Menu(
      children,
      tag: tag,
      style: style as List<MenuStyling>?,
      ariaLabel: ariaLabel,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }

  /// Extra small menu size. `menu-xs`
  static const MenuStyle xs = MenuStyle('menu-xs', type: StyleType.sizing);

  /// Small menu size. `menu-sm`
  static const MenuStyle sm = MenuStyle('menu-sm', type: StyleType.sizing);

  /// Medium menu size (default). `menu-md`
  static const MenuStyle md = MenuStyle('menu-md', type: StyleType.sizing);

  /// Large menu size. `menu-lg`
  static const MenuStyle lg = MenuStyle('menu-lg', type: StyleType.sizing);

  /// Extra large menu size. `menu-xl`
  static const MenuStyle xl = MenuStyle('menu-xl', type: StyleType.sizing);

  /// Vertical menu layout (default). `menu-vertical`
  static const MenuStyle vertical = MenuStyle('menu-vertical', type: StyleType.layout);

  /// Horizontal menu layout. `menu-horizontal`
  static const MenuStyle horizontal = MenuStyle('menu-horizontal', type: StyleType.layout);
}

/// A non-interactive title or heading within a [Menu].
///
/// Renders a styled `<li>` element to act as a separator or category header.
@immutable
class MenuTitle extends UiComponent {
  /// Creates a MenuTitle component.
  ///
  /// - [children]: The text content of the title.
  const MenuTitle(
    super.children, {
    super.tag = 'li',
    super.style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  });

  @override
  String get baseClass => 'menu-title';

  @override
  MenuTitle copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return MenuTitle(
      children,
      tag: tag,
      style: style,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }
}

/// An interactive item within a [Menu].
///
/// This component abstracts the common `<li><a>...</a></li>` structure. It renders
/// an `<a>` tag by default, which is styled correctly by the parent `Menu`, and
/// automatically wraps it in an `<li>`. Use `onClick` for button-like behavior.
@immutable
class MenuItem extends UiComponent {
  /// Creates an interactive menu item.
  ///
  /// - [children]: The content of the item, like text and icons.
  /// - [href]: If provided, the item will be a standard anchor link.
  /// - [isActive]: If true, applies active styling to the item.
  /// - [isDisabled]: If true, applies disabled styling and semantics.
  /// - [onClick]: Callback for when the item is clicked.
  const MenuItem(
    super.children, {
    this.href,
    this.isActive = false,
    this.isDisabled = false,
    super.onClick,
    super.style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  }) : super(tag: 'a');

  /// The URL the item links to. Renders an `href` attribute.
  final String? href;

  /// Whether the item should be styled as active.
  final bool isActive;

  /// Whether the item should be styled as disabled and non-interactive.
  final bool isDisabled;

  @override
  String get baseClass => ''; // The `<a>` tag has no base class.

  @override
  String get combinedClasses {
    final effectiveClasses = <String>[];
    if (isActive) effectiveClasses.add('menu-active');
    if (classes != null) effectiveClasses.add(classes!);
    return effectiveClasses.join(' ');
  }

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);
    if (href != null) attributes.add('href', href!);
    attributes.addRole('menuitem');
  }

  @override
  Component build(BuildContext context) {
    return li(
      classes: isDisabled ? 'menu-disabled' : null,
      attributes: {'role': 'presentation'},
      [super.build(context)],
    );
  }

  @override
  MenuItem copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return MenuItem(
      children,
      href: href,
      isActive: isActive,
      isDisabled: isDisabled,
      onClick: onClick,
      style: style,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }
}

/// A collapsible submenu using `<details>` and `<summary>`.
///
/// This component abstracts the `<li><details>...</details></li>` structure for
/// creating native, accessible submenus.
@immutable
class MenuSubmenu extends UiComponent {
  /// Creates a collapsible submenu.
  ///
  /// - [label]: The visible part of the submenu that acts as the trigger.
  /// - [children]: A list of `MenuItem`s to show when the submenu is open.
  /// - [initiallyOpen]: Whether the submenu is open by default.
  /// - [ulStyle]: A list of Deepyr styling utilities to apply to the inner `<ul>` element.
  ///   This is used to control background, padding, width, etc., of the dropdown panel.
  const MenuSubmenu({
    required List<Component> children,
    required this.label,
    this.initiallyOpen = false,
    this.ulStyle,
    super.id,
    super.classes,
    super.key,
  }) : super(children, tag: 'details');

  /// The content of the `<summary>` element that users click to toggle the submenu.
  final Component label;

  /// If true, the submenu will be open when first rendered.
  final bool initiallyOpen;

  /// Styling for the inner `<ul>` element of the submenu.
  final List<Styling>? ulStyle;

  @override
  String get baseClass => '';

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);
    if (initiallyOpen) attributes.add('open', '');
  }

  @override
  Component build(BuildContext context) {
    return li(
      attributes: {'role': 'presentation'},
      [
        Component.element(
          tag: tag, // Renders <details>
          id: id,
          classes: combinedClasses,
          attributes: componentAttributes,
          children: [
            summary([label]),
            ul(
              children ?? [?child],
              // Apply the ulStyle classes to the <ul> element.
              classes: ulStyle?.toClasses(),
            ),
          ],
        ),
      ],
    );
  }

  @override
  MenuSubmenu copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    // This copyWith implementation might need ulStyle if it were to be modified by a parent.
    // For now, it preserves the original instance's properties.
    return MenuSubmenu(
      children: children ?? [],
      label: label,
      initiallyOpen: initiallyOpen,
      ulStyle: ulStyle,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      key: key ?? this.key,
    );
  }
}

/// A hoverable submenu that expands on mouseover, used in horizontal menus.
@immutable
class MenuHoverSubmenu extends UiComponent {
  /// Creates a hoverable submenu.
  ///
  /// - [label]: The visible part of the submenu trigger.
  /// - [children]: A list of `MenuItem`s to show on hover.
  /// - [ulStyle]: A list of Deepyr styling utilities to apply to the inner `<ul>` element.
  const MenuHoverSubmenu({
    required List<Component> children,
    required this.label,
    this.ulStyle,
    super.id,
    super.classes,
    super.key,
  }) : super(children, tag: 'li');

  final Component label;

  /// Styling for the inner `<ul>` element of the submenu.
  final List<Styling>? ulStyle;

  @override
  String get baseClass => '';

  @override
  Component build(BuildContext context) {
    return Component.element(
      tag: tag, // Renders the `<li>`
      id: id,
      classes: combinedClasses,
      attributes: componentAttributes,
      children: [
        a([label], href: '#'), // The trigger is now a proper anchor
        ul(
          children ?? [?child],
          // Apply the ulStyle classes to the <ul> element.
          classes: ulStyle?.toClasses(),
        ),
      ],
    );
  }

  @override
  MenuHoverSubmenu copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return MenuHoverSubmenu(
      children: children ?? [],
      label: label,
      ulStyle: ulStyle,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      key: key ?? this.key,
    );
  }
}

/// The trigger element for a JavaScript-controlled collapsible submenu.
@immutable
class MenuDropdownToggle extends UiComponent {
  /// Creates a toggle for a JS-controlled dropdown menu.
  const MenuDropdownToggle(
    super.children, {
    super.tag = 'span',
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
    super.onClick,
  }) : super();

  @override
  String get baseClass => 'menu-dropdown-toggle';

  @override
  MenuDropdownToggle copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return MenuDropdownToggle(
      children,
      tag: tag,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      onClick: onClick,
      key: key ?? this.key,
    );
  }
}

/// The content element for a JavaScript-controlled collapsible submenu.
@immutable
class MenuDropdownContent extends UiComponent {
  /// Creates the content container for a JS-controlled dropdown menu.
  const MenuDropdownContent(
    super.children, {
    super.tag = 'ul',
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  }) : super();

  @override
  String get baseClass => 'menu-dropdown';

  @override
  MenuDropdownContent copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return MenuDropdownContent(
      children,
      tag: tag,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/menu/menu.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/menu/menu_item_style.dart -->
import '../../../deepyr.dart' show MenuItem, MenuTitle;
import '../../base/component_style.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'menu.dart' show MenuItem, MenuTitle;

/// Marker interface for any utility that can be passed to a menu item's
/// (like [MenuItem], [MenuTitle]) `modifiers` list.
abstract class MenuItemStyling implements Styling {}

/// Defines specific styling and state options for menu items (`<li>` tags).
/// Implements the [MenuItemStyling] interface.
class MenuItemStyle extends ComponentStyle<MenuItemStyle>
    with Breakpoints<MenuItemStyle>
    implements MenuItemStyling {
  const MenuItemStyle(
    super.cssClass, {
    required super.type,
    super.modifiers,
  });

  @override
  MenuItemStyle create(List<PrefixModifier> modifiers) {
    return MenuItemStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/menu/menu_item_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/menu/menu_style.dart -->
import '../../base/component_style.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'menu.dart';

/// Marker interface for any utility that can be passed to a [Menu]'s `modifiers` list.
abstract class MenuStyling implements Styling {}

/// Defines specific styling, sizing, and layout options for a [Menu] container component.
/// Implements the [MenuStyling] interface.
class MenuStyle extends ComponentStyle<MenuStyle>
    with Breakpoints<MenuStyle>
    implements MenuStyling {
  const MenuStyle(super.cssClass, {required super.type, super.modifiers});

  @override
  MenuStyle create(List<PrefixModifier> modifiers) {
    return MenuStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/menu/menu_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/modal/modal.dart -->
import 'package:jaspr/jaspr.dart' show Key, Styles;

import '../../base/style_type.dart';
import '../../base/ui_component.dart';
import '../../base/ui_component_attributes.dart';
import 'modal_style.dart';

/// A modal component that shows a dialog or box when triggered.
///
/// The Modal component supports multiple activation methods:
/// 1. **HTML `<dialog>` element (recommended):**
///    Set `tag: 'dialog'` and use JavaScript `showModal()` and `close()` methods.
/// 2. **Checkbox method (legacy):**
///    Use a hidden checkbox with `modal-toggle` class to control the modal state.
/// 3. **Anchor links method (legacy):**
///    Use URL anchors to show/hide the modal.
///
/// Example usage:
/// ```dart
/// // Method 1: Dialog (recommended)
/// Modal(
///   [
///     ModalBox([
///       h3([text('Hello!')]),
///       p([text('Press ESC key or click the button below to close')]),
///       ModalAction([
///         form(attributes: {'method': 'dialog'}, [
///           Button([text('Close')]),
///         ]),
///       ]),
///     ]),
///   ],
///   tag: 'dialog',
///   id: 'my_modal_1',
/// )
/// ```
class Modal extends UiComponent {
  /// Creates a Modal component.
  ///
  /// - [children]: The content of the modal, typically containing [ModalBox].
  /// - [tag]: The HTML tag, defaults to 'div'. Use 'dialog' for the recommended method.
  /// - [style]: A list of [ModalStyling] instances for positioning and behavior.
  /// - [role]: ARIA role, defaults to 'dialog' when tag is not 'dialog'.
  /// - Other parameters are inherited from [UiComponent].
  const Modal(
    super.children, {
    super.tag = 'div',
    List<ModalStyling>? style,
    this.role,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  }) : super(style: style);

  /// Optional ARIA role for the modal.
  final String? role;

  @override
  String get baseClass => 'modal';

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);

    // Set ARIA role if not using dialog element
    if (role != null) {
      attributes.addRole(role!);
    } else if (tag != 'dialog') {
      attributes.addRole('dialog');
    }
  }

  @override
  Modal copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return Modal(
      children,
      tag: tag,
      style: style as List<ModalStyling>?,
      role: role,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }

  // --- Static Modal Modifiers (Placement & Behavior) ---

  /// Moves the modal to the top of the screen. `modal-top`
  static const ModalStyle top = ModalStyle('modal-top', type: StyleType.layout);

  /// Moves the modal to the middle of the screen (default). `modal-middle`
  static const ModalStyle middle = ModalStyle('modal-middle', type: StyleType.layout);

  /// Moves the modal to the bottom of the screen. `modal-bottom`
  static const ModalStyle bottom = ModalStyle('modal-bottom', type: StyleType.layout);

  /// Moves the modal to the start horizontally. `modal-start`
  static const ModalStyle start = ModalStyle('modal-start', type: StyleType.layout);

  /// Moves the modal to the end horizontally. `modal-end`
  static const ModalStyle end = ModalStyle('modal-end', type: StyleType.layout);

  /// Keeps the modal open (can be controlled via JavaScript). `modal-open`
  static const ModalStyle open = ModalStyle('modal-open', type: StyleType.state);
}

/// The content container of a modal.
///
/// Typically contains the main content, title, and body text of the modal.
/// Should be placed as a child of [Modal].
class ModalBox extends UiComponent {
  /// Creates a ModalBox component.
  ///
  /// - [children]: The content to display within the modal box.
  /// - [tag]: The HTML tag, defaults to 'div'.
  /// - [styles]: A list of general utility modifiers for styling.
  /// - Other parameters are inherited from [UiComponent].
  const ModalBox(
    super.children, {
    super.tag = 'div',
    super.style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  });

  @override
  String get baseClass => 'modal-box';
  @override
  ModalBox copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return ModalBox(
      children,
      tag: tag,
      style: style,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }
}

/// The action area of a modal, typically containing buttons.
///
/// Usually placed at the bottom of [ModalBox] and contains buttons
/// like "OK", "Cancel", "Close", etc.
class ModalAction extends UiComponent {
  /// Creates a ModalAction component.
  ///
  /// - [children]: The action elements, typically buttons.
  /// - [tag]: The HTML tag, defaults to 'div'.
  /// - [styles]: A list of general utility modifiers for styling.
  /// - Other parameters are inherited from [UiComponent].
  const ModalAction(
    super.children, {
    super.tag = 'div',
    super.style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  });

  @override
  String get baseClass => 'modal-action';

  @override
  ModalAction copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return ModalAction(
      children,
      tag: tag,
      style: style,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }
}

/// A backdrop that covers the screen when the modal is open.
///
/// When clicked, it can close the modal. Used primarily with the checkbox
/// and anchor link methods. For dialog method, use a form with method="dialog".
class ModalBackdrop extends UiComponent {
  /// Creates a ModalBackdrop component.
  ///
  /// - [children]: Optional content, typically just text like "Close".
  /// - [tag]: The HTML tag, defaults to 'label' for checkbox method, 'div' for others.
  /// - [htmlFor]: The 'for' attribute, used with checkbox method to target the checkbox ID.
  /// - [styles]: A list of general utility modifiers for styling.
  /// - Other parameters are inherited from [UiComponent].
  const ModalBackdrop(
    super.children, {
    super.tag = 'label',
    this.htmlFor,
    super.style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  });

  /// The HTML 'for' attribute, used with checkbox method.
  final String? htmlFor;

  @override
  String get baseClass => 'modal-backdrop';

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);

    if (htmlFor != null && tag == 'label') {
      attributes.add('for', htmlFor!);
    }
  }

  @override
  ModalBackdrop copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return ModalBackdrop(
      children,
      tag: tag,
      htmlFor: htmlFor,
      style: style,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }
}

/// A hidden checkbox that controls the modal state (legacy method).
///
/// Used with the checkbox method where labels toggle the checkbox
/// to open/close the modal.
class ModalToggle extends UiComponent {
  /// Creates a ModalToggle component.
  ///
  /// - [id]: Required unique ID that labels will reference.
  /// - [styles]: A list of general utility modifiers.
  /// - Other parameters are inherited from [UiComponent].
  ModalToggle({
    required String id,
    super.style,
    super.classes,
    super.css,
    super.attributes,
    super.key,
  }) : super(
          [], // No children for input element
          tag: 'input',
          id: id,
        );

  @override
  String get baseClass => 'modal-toggle';

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);
    attributes.add('type', 'checkbox');
  }

  @override
  ModalToggle copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return ModalToggle(
      id: id ?? this.id!,
      style: style,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      key: key ?? this.key,
    );
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/modal/modal.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/modal/modal_style.dart -->
import '../../base/component_style.dart';
import '../../base/style_type.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'modal.dart';

/// Marker interface for any utility that can be passed to a [Modal]'s `modifiers` list.
abstract class ModalStyling implements Styling {}

/// Defines specific styling, positioning, and behavioral options for a [Modal] container component.
/// Implements the [ModalStyling] interface.
///
/// This class is used to create concrete instances of modal-specific modifiers.
/// The static definitions for these modifiers (e.g., `Modal.top`) are typically
/// located within the `Modal` component class itself for easier discovery.
class ModalStyle extends ComponentStyle<ModalStyle>
    with Breakpoints<ModalStyle>
    implements ModalStyling {
  /// Constructs a [ModalStyle].
  ///
  /// [cssClass]: The core CSS class string (e.g., "modal-top").
  /// [type]: The [StyleType] categorizing this modifier.
  /// [modifiers]: An optional list of [PrefixModifier]s already applied.
  const ModalStyle(super.cssClass, {required super.type, super.modifiers});

  @override
  ModalStyle create(List<PrefixModifier> modifiers) {
    return ModalStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/modal/modal_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/navbar/navbar.dart -->
import 'package:jaspr/jaspr.dart' show Key, Styles;

import '../../base/ui_component.dart';
import '../../base/ui_component_attributes.dart';
import 'navbar_style.dart';

/// A navigation bar component, typically placed at the top of a page or section.
/// It provides a container for branding, navigation links, and actions.
///
/// Its direct children are usually [NavbarStart], [NavbarCenter], and [NavbarEnd]
/// to structure its content.
class Navbar extends UiComponent {
  /// Creates a Navbar component.
  ///
  /// - [children]: Typically a combination of [NavbarStart], [NavbarCenter],
  ///   and [NavbarEnd] components to structure the navbar content.
  /// - [tag]: The HTML tag for the root element, defaults to 'div'.
  /// - [style]: A list of [NavbarStyle] (the interface) instances.
  ///   These are usually general utilities like `BgUtil.primary`, `Effects.shadowLg`.
  /// - [ariaLabel]: An accessible name for the navigation bar (e.g., "Main navigation").
  ///   **It's highly recommended to provide a specific and descriptive label.**
  /// - Other parameters are inherited from [UiComponent].
  const Navbar(
    super.children, {
    super.tag = 'div',
    List<NavbarStyling>? super.style,
    this.ariaLabel, // Default removed, encourage user to set it.
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  });

  /// An accessible name for the navigation bar. Important for assistive technologies.
  /// Example: "Main navigation", "Secondary navigation", "Site navigation".
  final String? ariaLabel;

  @override
  String get baseClass => 'navbar';

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);
    attributes.addRole('navigation');
    if (ariaLabel != null && ariaLabel!.isNotEmpty) {
      attributes.addAria('label', ariaLabel!);
    } else {
      // Consider logging a warning if no ariaLabel is provided in dev mode.
      // print("Warning: Navbar created without an 'ariaLabel'. This is important for accessibility.");
    }
  }

  @override
  Navbar copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return Navbar(
      children,
      tag: tag,
      style: style as List<NavbarStyling>?,
      ariaLabel: ariaLabel,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }
  // No static NavbarStyleModifiers are defined from navbar.txt as 'navbar' itself is the main class.
  // Other styles (colors, shadow) come from general utilities.
}

/// Represents the starting section (typically left-aligned or top for vertical) of a [Navbar].
/// Used for branding, logos, or hamburger menus.
/// Renders as an HTML `<div>` with the 'navbar-start' class.
class NavbarStart extends UiComponent {
  /// Creates a NavbarStart section.
  const NavbarStart(
    super.children, {
    super.tag = 'div',
    super.style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  });

  @override
  String get baseClass => 'navbar-start';

  @override
  NavbarStart copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return NavbarStart(
      children,
      tag: tag,
      style: style,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }
}

/// Represents the center section of a [Navbar].
/// Used for primary navigation links or titles.
/// Renders as an HTML `<div>` with the 'navbar-center' class.
class NavbarCenter extends UiComponent {
  /// Creates a NavbarCenter section.
  const NavbarCenter(
    super.children, {
    super.tag = 'div',
    super.style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  });

  @override
  String get baseClass => 'navbar-center';

  @override
  NavbarCenter copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return NavbarCenter(
      children,
      tag: tag,
      style: style,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }
}

/// Represents the ending section (typically right-aligned or bottom for vertical) of a [Navbar].
/// Used for action items, user profile, or secondary navigation.
/// Renders as an HTML `<div>` with the 'navbar-end' class.
class NavbarEnd extends UiComponent {
  /// Creates a NavbarEnd section.
  const NavbarEnd(
    super.children, {
    super.tag = 'div',
    super.style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  });

  @override
  String get baseClass => 'navbar-end';

  @override
  NavbarEnd copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return NavbarEnd(
      children,
      tag: tag,
      style: style,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/navbar/navbar.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/navbar/navbar_style.dart -->
import '../../base/component_style.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'navbar.dart';

/// Marker interface for any utility that can be passed to a [Navbar]'s `modifiers` list.
abstract class NavbarStyling implements Styling {}

/// Defines specific styling or behavioral options for a [Navbar] container component,
/// if any are introduced by DaisyUI beyond its base class.
/// Implements the [NavbarStyling] interface.
class NavbarStyle extends ComponentStyle<NavbarStyle>
    with Breakpoints<NavbarStyle>
    implements NavbarStyling {
  const NavbarStyle(super.cssClass, {required super.type, super.modifiers});

  @override
  NavbarStyle create(List<PrefixModifier> modifiers) {
    return NavbarStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/navbar/navbar_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/progress/progress.dart -->
import 'package:jaspr/jaspr.dart' show Key, Styles;

import '../../base/style_type.dart';
import '../../base/ui_component.dart';
import '../../base/ui_component_attributes.dart';
import 'progress_style.dart';

/// A component to show the progress of a task or the passing of time.
///
/// It renders a semantic `<progress>` HTML element. The component can be either
/// determinate or indeterminate.
///
/// - **Determinate:** Provide a `value` and `max`.
/// - **Indeterminate:** Omit the `value` (or pass `null`). The browser will
///   render a waiting/indeterminate animation.
///
/// Example Usage:
/// ```dart
/// // Determinate progress bar at 40%
/// Progress(
///   value: 40,
///   max: 100,
///   style: [Progress.primary, Sizing.w(56)],
/// )
///
/// // Indeterminate progress bar
/// Progress(
///   style: [Sizing.w(56)],
/// )
/// ```
class Progress extends UiComponent {
  /// Creates a Progress component.
  ///
  /// - [value]: The current progress value. If `null`, the progress bar is
  ///   indeterminate.
  /// - [max]: The maximum value of the progress bar. Defaults to `100`.
  /// - [style]: A list of [ProgressStyling] instances to control the color.
  ///   Size should be applied using a general utility like `Sizing.w(56)`.
  /// - [tag]: The HTML tag for the root element, defaults to 'progress'.
  /// - Other parameters are inherited from [UiComponent].
  const Progress({
    this.value,
    this.max = 100,
    super.tag = 'progress',
    List<ProgressStyling>? style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.key,
  }) : super(null, style: style); // Progress elements have no children.

  /// The current value of the progress bar. If null, the bar is indeterminate.
  final double? value;

  /// The maximum value, representing completion.
  final double max;

  @override
  String get baseClass => 'progress';

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);
    // The native <progress> element has implicit accessibility roles.
    // We only need to provide the value and max attributes.
    if (value != null) {
      attributes.add('value', value!.toString());
    }
    attributes.add('max', max.toString());
  }

  @override
  Progress copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return Progress(
      value: value,
      max: max,
      tag: tag,
      style: style as List<ProgressStyling>?,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      key: key ?? this.key,
    );
  }

  // --- Static Style Modifiers ---

  // Colors
  /// Neutral color. `progress-neutral`
  static const ProgressStyle neutral = ProgressStyle('progress-neutral', type: StyleType.style);

  /// Primary color. `progress-primary`
  static const ProgressStyle primary = ProgressStyle('progress-primary', type: StyleType.style);

  /// Secondary color. `progress-secondary`
  static const ProgressStyle secondary = ProgressStyle('progress-secondary', type: StyleType.style);

  /// Accent color. `progress-accent`
  static const ProgressStyle accent = ProgressStyle('progress-accent', type: StyleType.style);

  /// Info color. `progress-info`
  static const ProgressStyle info = ProgressStyle('progress-info', type: StyleType.style);

  /// Success color. `progress-success`
  static const ProgressStyle success = ProgressStyle('progress-success', type: StyleType.style);

  /// Warning color. `progress-warning`
  static const ProgressStyle warning = ProgressStyle('progress-warning', type: StyleType.style);

  /// Error color. `progress-error`
  static const ProgressStyle error = ProgressStyle('progress-error', type: StyleType.style);
}

<!-- END FILE: packages/deepyr/lib/src/components/progress/progress.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/progress/progress_style.dart -->
import '../../base/component_style.dart';
import '../../base/style_type.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'progress.dart';

/// A marker interface for any utility that can be passed to a [Progress]'s `style` list.
///
/// This allows for type-safe application of styles for color.
/// Note that size is applied via general utilities like `Sizing.w()`.
abstract class ProgressStyling implements Styling {}

/// Defines specific styling options for a [Progress] component.
///
/// This is the concrete implementation class for progress-specific modifiers.
/// It implements the [ProgressStyling] interface, making it a valid type for the
/// `style` property of a [Progress] component.
class ProgressStyle extends ComponentStyle<ProgressStyle>
    with Breakpoints<ProgressStyle>
    implements ProgressStyling {
  /// Constructs a [ProgressStyle].
  ///
  /// - [cssClass]: The core CSS class string for this modifier (e.g., "progress-primary").
  /// - [type]: The [StyleType] categorizing this modifier.
  /// - [modifiers]: An optional list of [PrefixModifier]s for responsive styling.
  const ProgressStyle(super.cssClass, {required super.type, super.modifiers});

  /// Creates a new instance of [ProgressStyle] with the provided modifiers.
  @override
  ProgressStyle create(List<PrefixModifier> modifiers) {
    return ProgressStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/progress/progress_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/radio/radio.dart -->
import 'package:jaspr/jaspr.dart'
    show BuildContext, Component, EventCallback, Key, Styles, ValueChanged, kIsWeb;
import 'package:universal_web/web.dart' show Event, HTMLInputElement;

import '../../base/style_type.dart';
import '../../base/ui_component.dart';
import '../../base/ui_component_attributes.dart';
import '../../base/ui_events.dart';
import 'radio_style.dart';

/// A radio button component that allows users to select one option from a group.
/// It renders an `<input type="radio">`.
///
/// The `Radio` component is a **controlled component** and is generic over the type `T`
/// of its value for type safety.
///
/// Its state is managed by a parent component, which holds the currently selected
/// value for the entire group (`groupValue`). The `Radio` determines if it is
/// checked by comparing its own `value` to the `groupValue`. When clicked, it
/// notifies the parent of the selection via the `onSelect` callback.
///
/// Example of state management in a `StatefulComponent`:
/// ```dart
/// enum Flavor { vanilla, chocolate, strawberry }
///
/// class MyFormState extends State<MyForm> {
///   Flavor _selectedFlavor = Flavor.vanilla;
///
///   @override
///   Component build(BuildContext context) {
///     for (final flavor in Flavor.values) {
///       return Radio<Flavor>(
///         value: flavor,
///         groupValue: _selectedFlavor,
///         name: 'flavor-group',
///         onSelect: (newValue) {
///           setState(() => _selectedFlavor = newValue);
///         },
///       );
///     }
///   }
/// }
/// ```
class Radio<T> extends UiComponent {
  /// Creates a Radio button component.
  ///
  /// - [value]: The unique value of type `T` that this radio button represents.
  /// - [groupValue]: The currently selected value of type `T` for the entire radio group.
  ///   The radio button is considered 'checked' if `value == groupValue`.
  /// - [name]: The HTML `name` attribute, which must be the same for all radio
  ///   buttons in a group to ensure they are mutually exclusive.
  /// - [onSelect]: A callback that fires when the user selects this radio button.
  ///   It receives the `value` of this component.
  /// - [disabled]: If true, the radio button will be non-interactive.
  /// - [style]: A list of [RadioStyling] instances for styling.
  /// - Other parameters are inherited from [UiComponent].
  const Radio({
    required this.value,
    required this.groupValue,
    required this.name,
    this.onSelect,
    this.disabled = false,
    super.tag = 'input',
    List<RadioStyling>? style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.eventHandlers,
    super.key,
  }) : super(null, style: style); // Radio elements have no children.

  /// The unique value this radio button represents within its group.
  final T value;

  /// The currently selected value for the entire radio group.
  final T groupValue;

  /// The name for the radio button group.
  final String name;

  /// Callback function invoked when this radio button is selected.
  final ValueChanged<T>? onSelect;

  /// If true, the radio button is non-interactive.
  final bool disabled;

  /// Internally computed checked state.
  bool get isChecked => value == groupValue;

  @override
  String get baseClass => 'radio';

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);
    attributes
      ..add('type', 'radio')
      ..add('name', name)
      // The HTML value attribute is always a string.
      ..add('value', value.toString());
    if (isChecked) {
      attributes.add('checked', '');
    }
    if (disabled) {
      attributes.add('disabled', '');
    }
  }

  @override
  Radio<T> copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Map<String, List<UiEventHandler>>? eventHandlers,
    Key? key,
  }) {
    // This copyWith implementation is complex due to generics and required fields.
    // It is provided for completeness of the UiComponent contract but may need
    // adjustments based on specific use cases for copying Radio components.
    return Radio<T>(
      value: value,
      groupValue: groupValue,
      name: name,
      onSelect: onSelect,
      disabled: disabled,
      tag: tag,
      style: style as List<RadioStyling>?,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      eventHandlers: eventHandlers ?? this.eventHandlers,
      key: key ?? this.key,
    );
  }

  @override
  Component build(BuildContext context) {
    final eventMap = Map<String, EventCallback>.from(events);

    // The 'change' event fires when a radio button is selected.
    eventMap['change'] = (dynamic event) {
      // Guard for web-only execution.
      if (kIsWeb) {
        // Use explicit casting for type safety and to avoid analyzer warnings.
        final target = (event as Event).target! as HTMLInputElement;
        // Only trigger the callback if this radio button just became checked.
        if (target.checked) {
          onSelect?.call(value);
        }
      }
    };

    return Component.element(
      tag: tag,
      id: id,
      classes: combinedClasses,
      styles: css,
      attributes: componentAttributes,
      events: eventMap,
    );
  }

  // --- Static Style Modifiers ---

  // Colors
  /// Applies the primary theme color. `radio-primary`
  static const RadioStyle primary = RadioStyle('radio-primary', type: StyleType.style);

  /// Applies the secondary theme color. `radio-secondary`
  static const RadioStyle secondary = RadioStyle('radio-secondary', type: StyleType.style);

  /// Applies the accent theme color. `radio-accent`
  static const RadioStyle accent = RadioStyle('radio-accent', type: StyleType.style);

  /// Applies the neutral theme color. `radio-neutral`
  static const RadioStyle neutral = RadioStyle('radio-neutral', type: StyleType.style);

  /// Applies the success theme color, typically green. `radio-success`
  static const RadioStyle success = RadioStyle('radio-success', type: StyleType.style);

  /// Applies the warning theme color, typically yellow or orange. `radio-warning`
  static const RadioStyle warning = RadioStyle('radio-warning', type: StyleType.style);

  /// Applies the info theme color, typically light blue. `radio-info`
  static const RadioStyle info = RadioStyle('radio-info', type: StyleType.style);

  /// Applies the error theme color, typically red. `radio-error`
  static const RadioStyle error = RadioStyle('radio-error', type: StyleType.style);

  // Sizes
  /// Renders an extra-small radio button. `radio-xs`
  static const RadioStyle xs = RadioStyle('radio-xs', type: StyleType.sizing);

  /// Renders a small radio button. `radio-sm`
  static const RadioStyle sm = RadioStyle('radio-sm', type: StyleType.sizing);

  /// Renders a medium-sized radio button (default size). `radio-md`
  static const RadioStyle md = RadioStyle('radio-md', type: StyleType.sizing);

  /// Renders a large radio button. `radio-lg`
  static const RadioStyle lg = RadioStyle('radio-lg', type: StyleType.sizing);

  /// Renders an extra-large radio button. `radio-xl`
  static const RadioStyle xl = RadioStyle('radio-xl', type: StyleType.sizing);
}

<!-- END FILE: packages/deepyr/lib/src/components/radio/radio.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/radio/radio_style.dart -->
import '../../base/component_style.dart';
import '../../base/style_type.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'radio.dart';

/// A marker interface for any utility that can be passed to a [Radio]'s `style` list.
///
/// This allows for type-safe application of styles for colors and sizes.
abstract class RadioStyling implements Styling {}

/// Defines specific styling options for a [Radio] component.
///
/// This is the concrete implementation class for radio-button-specific modifiers.
/// It implements the [RadioStyling] interface, making it a valid type for the
/// `style` property of a [Radio] component.
class RadioStyle extends ComponentStyle<RadioStyle>
    with Breakpoints<RadioStyle>
    implements RadioStyling {
  /// Constructs a [RadioStyle].
  ///
  /// - [cssClass]: The core CSS class string for this modifier (e.g., "radio-primary").
  /// - [type]: The [StyleType] categorizing this modifier.
  /// - [modifiers]: An optional list of [PrefixModifier]s for responsive styling.
  const RadioStyle(super.cssClass, {required super.type, super.modifiers});

  /// Creates a new instance of [RadioStyle] with the provided modifiers.
  @override
  RadioStyle create(List<PrefixModifier> modifiers) {
    return RadioStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/radio/radio_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/range/range.dart -->
import 'package:jaspr/jaspr.dart'
    show BuildContext, Component, EventCallback, Key, Styles, ValueChanged, kIsWeb;
import 'package:universal_web/web.dart' show Event, HTMLInputElement;

import '../../base/style_type.dart';
import '../../base/ui_component.dart';
import '../../base/ui_component_attributes.dart';
import 'range_style.dart';

/// A range slider component used to select a value by sliding a handle.
/// It renders an `<input type="range">`.
///
/// The `Range` is a **controlled component**. Its state is not managed internally.
/// You must provide its current `value` and handle state changes with the
/// [onValueChanged] callback. This callback provides the new value as a `double`,
/// abstracting away the string parsing from the DOM event.
///
/// Example of state management in a `StatefulComponent`:
/// ```dart
/// class VolumeControl extends StatefulComponent {
///   @override
///   State<VolumeControl> createState() => _VolumeControlState();
/// }
///
/// class _VolumeControlState extends State<VolumeControl> {
///   double _volume = 40.0;
///
///   @override
///   Component build(BuildContext context) {
///     return Range(
///       value: _volume,
///       onValueChanged: (newValue) {
///         setState(() => _volume = newValue);
///       },
///       min: 0,
///       max: 100,
///       step: 10,
///       style: [Range.primary],
///     );
///     return p([text('Volume: \${_volume.toInt()}%')]);
///   }
/// }
/// ```
class Range extends UiComponent {
  /// Creates a Range slider component.
  ///
  /// - [value]: The current numerical value of the slider.
  /// - [onValueChanged]: A callback that fires when the slider's value changes
  ///   (e.g., while dragging). It receives the new value as a `double`.
  /// - [min]: The minimum value of the range. Defaults to `0`.
  /// - [max]: The maximum value of the range. Defaults to `100`.
  /// - [step]: The stepping interval. If null, the slider moves smoothly.
  /// - [disabled]: If true, the range slider will be non-interactive.
  /// - [style]: A list of [RangeStyling] instances for styling.
  /// - Other parameters are inherited from [UiComponent].
  const Range({
    this.value = 0,
    this.onValueChanged,
    this.min = 0,
    this.max = 100,
    this.step,
    this.disabled = false,
    super.tag = 'input',
    List<RangeStyling>? style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.key,
  }) : super(null, style: style); // Range elements have no children.

  /// The current value of the slider.
  final double value;

  /// Callback function invoked when the slider's value changes.
  final ValueChanged<double>? onValueChanged;

  /// The minimum value of the slider.
  final double min;

  /// The maximum value of the slider.
  final double max;

  /// The granularity that the value must adhere to.
  final double? step;

  /// If true, the slider is non-interactive.
  final bool disabled;

  @override
  String get baseClass => 'range';

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);
    attributes
      ..add('type', 'range')
      ..add('value', value.toString())
      ..add('min', min.toString())
      ..add('max', max.toString());
    if (step != null) {
      attributes.add('step', step!.toString());
    }
    if (disabled) {
      attributes.add('disabled', '');
    }
  }

  @override
  Range copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return Range(
      value: value,
      onValueChanged: onValueChanged,
      min: min,
      max: max,
      step: step,
      disabled: disabled,
      tag: tag,
      style: style as List<RangeStyling>?,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      key: key ?? this.key,
    );
  }

  @override
  Component build(BuildContext context) {
    final eventMap = Map<String, EventCallback>.from(events);

    if (onValueChanged != null) {
      // The 'input' event fires continuously as the user drags the slider.
      eventMap['input'] = (dynamic rawEvent) {
        if (kIsWeb) {
          final target = (rawEvent as Event).target! as HTMLInputElement;
          // The value from a range input is always a string, so we parse it.
          final newValue = double.tryParse(target.value);
          if (newValue != null) {
            onValueChanged!(newValue);
          }
        }
      };
    }

    return Component.element(
      tag: tag,
      id: id,
      classes: combinedClasses,
      styles: css,
      attributes: componentAttributes,
      events: eventMap,
    );
  }

  // --- Static Style Modifiers ---

  // Colors
  /// Neutral color. `range-neutral`
  static const RangeStyle neutral = RangeStyle('range-neutral', type: StyleType.style);

  /// Primary color. `range-primary`
  static const RangeStyle primary = RangeStyle('range-primary', type: StyleType.style);

  /// Secondary color. `range-secondary`
  static const RangeStyle secondary = RangeStyle('range-secondary', type: StyleType.style);

  /// Accent color. `range-accent`
  static const RangeStyle accent = RangeStyle('range-accent', type: StyleType.style);

  /// Success color. `range-success`
  static const RangeStyle success = RangeStyle('range-success', type: StyleType.style);

  /// Warning color. `range-warning`
  static const RangeStyle warning = RangeStyle('range-warning', type: StyleType.style);

  /// Info color. `range-info`
  static const RangeStyle info = RangeStyle('range-info', type: StyleType.style);

  /// Error color. `range-error`
  static const RangeStyle error = RangeStyle('range-error', type: StyleType.style);

  // Sizes
  /// Extra-small size. `range-xs`
  static const RangeStyle xs = RangeStyle('range-xs', type: StyleType.sizing);

  /// Small size. `range-sm`
  static const RangeStyle sm = RangeStyle('range-sm', type: StyleType.sizing);

  /// Medium size (default). `range-md`
  static const RangeStyle md = RangeStyle('range-md', type: StyleType.sizing);

  /// Large size. `range-lg`
  static const RangeStyle lg = RangeStyle('range-lg', type: StyleType.sizing);

  /// Extra-large size. `range-xl`
  static const RangeStyle xl = RangeStyle('range-xl', type: StyleType.sizing);
}

<!-- END FILE: packages/deepyr/lib/src/components/range/range.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/range/range_style.dart -->
import '../../base/component_style.dart';
import '../../base/style_type.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'range.dart';

/// A marker interface for any utility that can be passed to a [Range]'s `style` list.
///
/// This allows for type-safe application of styles for colors and sizes.
abstract class RangeStyling implements Styling {}

/// Defines specific styling options for a [Range] component.
///
/// This is the concrete implementation class for range-specific modifiers.
/// It implements the [RangeStyling] interface, making it a valid type for the
/// `style` property of a [Range] component.
class RangeStyle extends ComponentStyle<RangeStyle>
    with Breakpoints<RangeStyle>
    implements RangeStyling {
  /// Constructs a [RangeStyle].
  ///
  /// - [cssClass]: The core CSS class string for this modifier (e.g., "range-primary").
  /// - [type]: The [StyleType] categorizing this modifier.
  /// - [modifiers]: An optional list of [PrefixModifier]s for responsive styling.
  const RangeStyle(super.cssClass, {required super.type, super.modifiers});

  /// Creates a new instance of [RangeStyle] with the provided modifiers.
  @override
  RangeStyle create(List<PrefixModifier> modifiers) {
    return RangeStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/range/range_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/select/select.dart -->
import 'package:jaspr/jaspr.dart' show Key, Styles;

import '../../base/style_type.dart';
import '../../base/ui_component.dart';
import '../../base/ui_component_attributes.dart';
import 'select_style.dart';

/// A dropdown select component, rendering an HTML `<select>` element.
///
/// Its children should be a list of Jaspr `option()` components.
class Select extends UiComponent {
  /// Creates a Select component.
  ///
  /// - [children]: A list of `option()` components to populate the dropdown.
  /// - [name]: The name of the select element, used for form submission.
  /// - [disabled]: If true, the select dropdown will be disabled.
  /// - [style]: A list of [SelectStyling] instances for styling.
  /// - [onChange]: Event handler for when the selected value changes.
  /// - Other parameters are inherited from [UiComponent].
  const Select(
    super.children, {
    this.name,
    this.disabled = false,
    super.tag = 'select',
    List<SelectStyling>? style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.onChange,
    super.key,
  }) : super(style: style);

  final String? name;
  final bool disabled;

  @override
  String get baseClass => 'select';

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);
    if (name != null) {
      attributes.add('name', name!);
    }
    if (disabled) {
      attributes.add('disabled', '');
    }
  }

  @override
  Select copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return Select(
      children,
      name: name,
      disabled: disabled,
      tag: tag,
      style: style as List<SelectStyling>?,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      onChange: onChange,
      key: key ?? this.key,
    );
  }

  // --- Static Style Modifiers ---

  /// Adds a border to the select. `select-bordered`
  static const SelectStyle bordered = SelectStyle('select-bordered', type: StyleType.border);

  /// Ghost style (transparent background). `select-ghost`
  static const SelectStyle ghost = SelectStyle('select-ghost', type: StyleType.style);

  // Colors
  /// Neutral color. `select-neutral`
  static const SelectStyle neutral = SelectStyle('select-neutral', type: StyleType.style);

  /// Primary color. `select-primary`
  static const SelectStyle primary = SelectStyle('select-primary', type: StyleType.style);

  /// Secondary color. `select-secondary`
  static const SelectStyle secondary = SelectStyle('select-secondary', type: StyleType.style);

  /// Accent color. `select-accent`
  static const SelectStyle accent = SelectStyle('select-accent', type: StyleType.style);

  /// Info color. `select-info`
  static const SelectStyle info = SelectStyle('select-info', type: StyleType.style);

  /// Success color. `select-success`
  static const SelectStyle success = SelectStyle('select-success', type: StyleType.style);

  /// Warning color. `select-warning`
  static const SelectStyle warning = SelectStyle('select-warning', type: StyleType.style);

  /// Error color. `select-error`
  static const SelectStyle error = SelectStyle('select-error', type: StyleType.style);

  // Sizes
  /// Extra-small size. `select-xs`
  static const SelectStyle xs = SelectStyle('select-xs', type: StyleType.sizing);

  /// Small size. `select-sm`
  static const SelectStyle sm = SelectStyle('select-sm', type: StyleType.sizing);

  /// Medium size (default). `select-md`
  static const SelectStyle md = SelectStyle('select-md', type: StyleType.sizing);

  /// Large size. `select-lg`
  static const SelectStyle lg = SelectStyle('select-lg', type: StyleType.sizing);

  /// Large size. `select-xl`
  static const SelectStyle xl = SelectStyle('select-xl', type: StyleType.sizing);
}

<!-- END FILE: packages/deepyr/lib/src/components/select/select.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/select/select_style.dart -->
import '../../base/component_style.dart';
import '../../base/style_type.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'select.dart';

/// A marker interface for any utility that can be passed to a [Select]'s `style` list.
///
/// This allows for type-safe application of styles for colors, sizes, and variants.
abstract class SelectStyling implements Styling {}

/// Defines specific styling options for a [Select] component.
///
/// This is the concrete implementation class for select-specific modifiers.
/// It implements the [SelectStyling] interface, making it a valid type for the
/// `style` property of a [Select] component.
class SelectStyle extends ComponentStyle<SelectStyle>
    with Breakpoints<SelectStyle>
    implements SelectStyling {
  /// Constructs a [SelectStyle].
  ///
  /// - [cssClass]: The core CSS class string for this modifier (e.g., "select-bordered").
  /// - [type]: The [StyleType] categorizing this modifier.
  /// - [modifiers]: An optional list of [PrefixModifier]s for responsive styling.
  const SelectStyle(
    super.cssClass, {
    required super.type,
    super.modifiers,
  });

  /// Creates a new instance of [SelectStyle] with the provided modifiers.
  @override
  SelectStyle create(List<PrefixModifier> modifiers) {
    return SelectStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/select/select_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/skeleton/skeleton.dart -->
import 'package:jaspr/jaspr.dart' show Key, Styles;

import '../../base/ui_component.dart';
import 'skeleton_style.dart';

/// A component that displays a placeholder preview of your content before it loads.
///
/// The `Skeleton` component renders an HTML `<div>` (by default) with the `skeleton`
/// base class, which creates a shimmering animation effect. Its dimensions and shape
/// are controlled by applying general-purpose utility classes from the `deepyr`
/// library, such as `Size` and `Effects`.
///
/// It does not have any component-specific style modifiers; all styling is
/// applied via the `style` property using general utilities.
///
/// Example Usage:
/// ```dart
/// // A simple rectangular skeleton placeholder
/// Skeleton(
///   style: [Size.w(32), Size.h(32)],
/// ),
///
/// // A circular skeleton placeholder
/// Skeleton(
///   style: [Size.w(16), Size.h(16), Effects.roundedFull],
/// ),
///
/// // Composing multiple skeletons to create a UI placeholder
/// Container(
///   style: [Layout.flex, Layout.flexCol, Layout.gap(4)],
///   [
///     Skeleton(style: [Size.h(4), Size.w(28)]),
///     Skeleton(style: [Size.h(4), Size.wFull]),
///     Skeleton(style: [Size.h(4), Size.wFull]),
///   ],
/// )
/// ```
class Skeleton extends UiComponent {
  /// Creates a Skeleton component.
  ///
  /// - [tag]: The HTML tag for the root element, defaults to 'div'.
  /// - [style]: A list of [SkeletonStyling] instances. This is where you apply
  ///   general utilities like `Size.w()`, `Size.h()`, and `Effects.roundedFull`
  ///   to define the shape and dimensions of the skeleton placeholder.
  /// - Other parameters are inherited from [UiComponent].
  const Skeleton({
    super.tag = 'div',
    List<SkeletonStyling>? style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.key,
  }) : super(
          null, // Skeletons typically have no children.
          style: style,
        );

  @override
  String get baseClass => 'skeleton';

  @override
  Skeleton copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return Skeleton(
      tag: tag,
      style: style as List<SkeletonStyling>?,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      key: key ?? this.key,
    );
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/skeleton/skeleton.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/skeleton/skeleton_style.dart -->
import '../../base/component_style.dart';
import '../../base/style_type.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'skeleton.dart';

/// A marker interface for any utility that can be passed to a [Skeleton]'s
/// `style` list.
///
/// This allows for type-safe application of styles. `Skeleton` has no specific
/// modifiers of its own, so this interface is primarily used to allow general
/// utilities (like `Size`, `Effects`, etc.) to be applied to it.
abstract class SkeletonStyling implements Styling {}

/// Defines specific styling options for a [Skeleton] component.
///
/// This is the concrete implementation class for skeleton-specific modifiers.
/// It implements the [SkeletonStyling] interface. Currently, there are no
/// predefined static modifiers for `Skeleton`, but this class provides a
/// consistent and extensible structure.
class SkeletonStyle extends ComponentStyle<SkeletonStyle>
    with Breakpoints<SkeletonStyle>
    implements SkeletonStyling {
  /// Constructs a [SkeletonStyle].
  ///
  /// - [cssClass]: The core CSS class string for this modifier.
  /// - [type]: The [StyleType] categorizing this modifier.
  /// - [modifiers]: An optional list of [PrefixModifier]s for responsive styling.
  const SkeletonStyle(super.cssClass, {required super.type, super.modifiers});

  /// Creates a new instance of [SkeletonStyle] with the provided modifiers.
  /// This is an internal method used by the fluent API (`.at()`, `.on()`).
  @override
  SkeletonStyle create(List<PrefixModifier> modifiers) {
    return SkeletonStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/skeleton/skeleton_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/swap/swap.dart -->
import 'package:jaspr/jaspr.dart' hide css;
import 'package:universal_web/web.dart';

import '../../base/style_type.dart';
import '../../base/ui_component.dart';
import '../../base/ui_component_attributes.dart';
import 'swap_style.dart';

// Example for helpers, assuming Icon component exists
// import '../icon.dart'; // If Icon is a separate component in your library

/// A component that toggles between two visual states ("on" and "off")
/// when an internal checkbox is toggled. It can also represent an indeterminate state.
///
/// The `styles` list accepts [SwapStyling] (the interface) instances,
/// which includes specific swap animations (like [Swap.rotate]) and general utilities.
class Swap extends UiComponent {
  /// Creates a Swap component.
  ///
  /// - [onContent]: The [Component] to display when the swap is in the "on" (checked) state.
  /// - [offContent]: The [Component] to display when the swap is in the "off" (unchecked) state.
  /// - [tag]: The HTML tag for the root element, defaults to 'label' to associate with the internal checkbox.
  /// - [indeterminateContent]: Optional [Component] to display when the swap is in an indeterminate state.
  /// - [checked]: If true, the swap is initially in the "on" state.
  /// - [indeterminate]: If true, the swap is initially in the indeterminate state.
  ///   Note: An indeterminate checkbox is visually distinct but its value when submitted in a form is usually `false`.
  /// - [style]: A list of [SwapStyling] (the interface) instances.
  /// - [onToggle]: Callback function that is invoked when the swap state changes (checked/unchecked).
  ///   Receives the new checked state as a boolean.
  /// - Other parameters are inherited from [UiComponent].
  const Swap({
    required this.onContent,
    required this.offContent,
    super.tag = 'label',
    this.indeterminateContent,
    this.checked = false,
    this.indeterminate = false,
    List<SwapStyling>? style,
    this.onToggle,
    super.id, // ID for the label, can be used with 'for' if checkbox ID is known/set
    super.classes,
    super.css,
    super.attributes,
    super.onClick, // onClick on the label itself
    super.key,
  }) : super(
         null, // Children are managed internally in the build method
         style: style,
       );

  /// The content to display when the swap is in the "on" (checked) state.
  final Component onContent;

  /// The content to display when the "off" (unchecked) state.
  final Component offContent;

  /// Optional content to display when the swap is in an indeterminate state.
  final Component? indeterminateContent;

  /// Initial checked state.
  final bool checked;

  /// Initial indeterminate state.
  final bool indeterminate;

  /// Callback when the toggle state changes. `void Function(bool isChecked)`
  final ValueChanged<bool>? onToggle;

  @override
  String get baseClass => 'swap'; // DaisyUI base class

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);
    // The <label> tag for 'swap' doesn't typically require specific ARIA roles
    // beyond what its association with the checkbox provides.
    // If the checkbox ID were known and stable, `attributes.add('for', checkboxId)` could be set here.
    // However, managing the checkbox ID centrally can be tricky if `id` prop is for the label.

    // Check for active state modifier to potentially set aria-pressed or similar,
    // though 'swap-active' mainly controls visibility of on/off content via CSS.
    // final List<SwapStyleModifier> styleModifiers =
    //     this.modifiers?.whereType<SwapStyleModifier>().toList() ?? [];
    // if (styleModifiers.contains(Swap.active)) {
    //    // This state is usually controlled by the internal checkbox's :checked state
    // }
  }

  @override
  Swap copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return Swap(
      onContent: onContent,
      offContent: offContent,
      tag: tag,
      indeterminateContent: indeterminateContent,
      checked: checked,
      indeterminate: indeterminate,
      style: style as List<SwapStyling>?,
      onToggle: onToggle,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      onClick: onClick,
      key: key ?? this.key,
    );
  }

  @override
  Component build(BuildContext context) {
    // Generate a unique ID for the checkbox if no main ID is provided for the label
    // to ensure the label's 'for' attribute (if used) could point to it.
    // However, direct nesting of the input within the label often makes 'for' unnecessary.
    final checkboxId = id != null ? '${id}_checkbox' : 'swap_checkbox_${key.hashCode}';

    final swapChildren = <Component>[
      // Hidden checkbox for controlling state.
      // The `onChange` handler for this input will trigger `onToggle`.
      input(
        type: InputType.checkbox,
        id: checkboxId, // ID for potential 'for' attribute on label
        attributes: <String, String>{
          if (checked && !indeterminate)
            'checked': '', // 'checked' attribute makes it visually checked
          // 'indeterminate' is a JS property, not an HTML attribute for initial state.
          // It needs to be set via JS after the element is in the DOM.
          // For a purely declarative Jaspr component, simulating indeterminate
          // visually might require CSS if JS manipulation is avoided here.
          // DaisyUI's `swap-indeterminate` class handles the visual state when `indeterminate` prop is true.
        },
        events: onToggle != null
            ? <String, EventCallback>{
                'change': (dynamic rawEvent) {
                  if (kIsWeb) {
                    final target = (rawEvent as Event).target! as HTMLInputElement;
                    onToggle!(target.checked);
                  }
                },
              }
            : null,
      ),

      // "On" state content
      div(classes: 'swap-on', <Component>[onContent]),

      // "Off" state content
      div(classes: 'swap-off', <Component>[offContent]),
    ];

    // Optional indeterminate state content. DaisyUI uses a sibling `swap-indeterminate`
    // and controls its visibility along with swap-on/off based on checkbox state
    // and potentially the presence of `swap-active` on the main `swap` element.
    // The `indeterminate` JS property on the checkbox is what truly makes it indeterminate.
    if (indeterminate && indeterminateContent != null) {
      swapChildren.add(div(classes: 'swap-indeterminate', <Component>[indeterminateContent!]));
    }

    return Component.element(
      tag: tag, // Should be 'label' for accessibility with the checkbox
      id: id,
      // If tag is 'label', 'for' attribute can be added to link to checkbox
      // attributes: tag == 'label' ? {'for': checkboxId, ...componentAttributes} : componentAttributes,
      // For simplicity, direct nesting of input in label usually works.
      // The `componentAttributes` getter will be called.
      attributes: componentAttributes,
      classes:
          combinedClasses, // Includes 'swap' and potentially 'swap-active' if `indeterminate` is true for styling
      styles: css,
      events: this.events, // For onClick on the label itself
      children: swapChildren,
    );
  }

  // --- Static Swap Modifiers (Type: SwapModifier interface, Instantiating: SwapStyleModifier) ---

  /// Applies if the swap is in the "on" state.
  /// Often controlled by the internal checkbox's `:checked` pseudo-class,
  /// but `swap-active` can be used to force the "on" state penampilan.
  /// If `indeterminate` is true, `swap-active` might also be needed for `swap-indeterminate` visibility.
  static const SwapStyle active = SwapStyle('swap-active', type: StyleType.state);

  // Animation effect modifiers
  /// Applies a rotation animation on toggle. `swap-rotate`
  static const SwapStyle rotate = SwapStyle(
    'swap-rotate',
    type: StyleType.effect,
  ); // Was .additional
  /// Applies a flip animation on toggle. `swap-flip`
  static const SwapStyle flip = SwapStyle(
    'swap-flip',
    type: StyleType.effect,
  ); // Was .additional
}

<!-- END FILE: packages/deepyr/lib/src/components/swap/swap.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/swap/swap_style.dart -->
import '../../base/component_style.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'swap.dart';

/// Marker interface for any utility that can be passed to a [Swap]'s `modifiers` list.
abstract class SwapStyling implements Styling {}

/// Defines specific styling, animation, and state options for a [Swap] component.
/// Implements the [SwapStyling] interface.
class SwapStyle extends ComponentStyle<SwapStyle>
    with Breakpoints<SwapStyle>
    implements SwapStyling {
  const SwapStyle(super.cssClass, {required super.type, super.modifiers});

  @override
  SwapStyle create(List<PrefixModifier> modifiers) {
    return SwapStyle(cssClass, type: type, modifiers: modifiers);
  }

  // Static constants will be moved to the Swap class.
}

<!-- END FILE: packages/deepyr/lib/src/components/swap/swap_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/tabs/tab_style.dart -->
import '../../base/component_style.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'tabs.dart';

/// Marker interface for any utility that can be passed to an individual [Tab]'s `modifiers` list.
abstract class TabStyling implements Styling {}

/// Defines specific styling and state options for an individual [Tab] component.
/// Implements the [TabStyling] interface.
class TabStyle extends ComponentStyle<TabStyle>
    with Breakpoints<TabStyle>
    implements TabStyling {
  // Implements the TabModifier INTERFACE
  const TabStyle(super.cssClass, {required super.type, super.modifiers});

  @override
  TabStyle create(List<PrefixModifier> modifiers) {
    return TabStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/tabs/tab_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/tabs/tabs.dart -->
import 'package:jaspr/jaspr.dart' show BuildContext, Component, Key, Styles;

import '../../base/style_type.dart';
import '../../base/styling.dart' show Styling;
import '../../base/ui_component.dart';
import '../../base/ui_component_attributes.dart';
import 'tab_style.dart';
import 'tabs_style.dart';

/// A container for a set of [Tab] components, allowing users to switch between
/// different views or sections of content.
///
/// The `styles` list accepts [TabsStyling] (the interface) instances,
/// which includes specific tabs container styles (like [Tabs.border], [Tabs.lifted])
/// and general utility classes.
/// It should typically render as an HTML `<div>` with `role="tablist"`.
class Tabs extends UiComponent {
  /// Creates a Tabs container component.
  ///
  /// - [children]: A list of [Tab] components, or for radio-tab patterns,
  ///   a sequence of input/TabContent pairs.
  /// - [tag]: The HTML tag for the root element, defaults to 'div'.
  /// - [style]: A list of [TabsStyling] (the interface) instances.
  /// - [ariaLabel]: An accessible name for the tab list (e.g., "Content sections").
  /// - Other parameters are inherited from [UiComponent].
  const Tabs(
    super.children, {
    super.tag = 'div',
    List<TabsStyling>? style,
    this.ariaLabel,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  }) : super(style: style);

  /// An accessible name for the tab list.
  final String? ariaLabel;

  @override
  String get baseClass => 'tabs'; // DaisyUI base class

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);
    attributes.addRole('tablist');
    if (ariaLabel != null && ariaLabel!.isNotEmpty) {
      attributes.addAria('label', ariaLabel!);
    }

    // Determine orientation based on modifiers if needed, though default is horizontal
    // bool isBottom = modifiers?.any((m) => m is TabsStyleModifier && m.cssClass == Tabs.bottom.cssClass) ?? false;
    // attributes.addAria('orientation', isBottom ? 'vertical' : 'horizontal'); // Simplified, check DaisyUI actual behavior for orientation based on bottom
    attributes.addAria('orientation', 'horizontal'); // Default for tabs
  }

  @override
  Tabs copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return Tabs(
      children,
      tag: tag,
      style: style as List<TabsStyling>?,
      ariaLabel: ariaLabel,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }
  // --- Static Tabs Modifiers ---

  /// Bottom border style for tabs. `tabs-border`
  static const TabsStyle border = TabsStyle(
    'tabs-border',
    type: StyleType.style,
  );

  /// Lifted tabs style. `tabs-lift`
  static const TabsStyle lift = TabsStyle(
    'tabs-lift',
    type: StyleType.style,
  );

  /// Boxed tabs style. `tabs-box`
  static const TabsStyle box = TabsStyle(
    'tabs-box',
    type: StyleType.style,
  );

  // Placement
  /// Puts tab buttons on top of the tab-content (default). `tabs-top`
  static const TabsStyle top = TabsStyle(
    'tabs-top',
    type: StyleType.layout,
  );

  /// Puts tabs under the tab-content. `tabs-bottom`
  static const TabsStyle bottom = TabsStyle(
    'tabs-bottom',
    type: StyleType.layout,
  );

  // Sizes
  /// Extra small tabs size. `tabs-xs`
  static const TabsStyle xs = TabsStyle(
    'tabs-xs',
    type: StyleType.sizing,
  );

  /// Small tabs size. `tabs-sm`
  static const TabsStyle sm = TabsStyle(
    'tabs-sm',
    type: StyleType.sizing,
  );

  /// Medium tabs size (default). `tabs-md`
  static const TabsStyle md = TabsStyle(
    'tabs-md',
    type: StyleType.sizing,
  );

  /// Large tabs size. `tabs-lg`
  static const TabsStyle lg = TabsStyle(
    'tabs-lg',
    type: StyleType.sizing,
  );

  /// Extra large tabs size. `tabs-xl`
  static const TabsStyle xl = TabsStyle(
    'tabs-xl',
    type: StyleType.sizing,
  );
}

/// Represents an individual tab item within a [Tabs] container.
///
/// It typically renders as an HTML `<a>` or `<button>` element with `role="tab"`.
/// The `modifiers` list accepts [TabStyling] (the interface) instances.
/// An active tab should have the `Tab.active` modifier or `isActive` set to true.
class Tab extends UiComponent {
  /// Creates a Tab component.
  ///
  /// - [children] or [child]: The label or content of the tab. For radio input tabs,
  ///   this is usually null, and `ariaLabel` is used for the visible text.
  /// - [tag]: The HTML tag, defaults to 'button'. Can be 'a' for links, or 'input' for radio tabs.
  /// - [isActive]: If true, this tab is marked as active (applies `Tab.active` modifier and `aria-selected`).
  /// - [isDisabled]: If true, this tab is marked as disabled (applies `Tab.disabled` modifier and `aria-disabled`).
  /// - [controlsPanelId]: The ID of the tab panel this tab controls (for `aria-controls`).
  /// - [styles]: A list of [TabStyling] (the interface) instances.
  /// - [customStyles]: A Jaspr [Styles] object for applying raw CSS, primarily for
  ///   custom properties (variables) like `--tab-bg` to override theme colors.
  /// - [onClick]: Callback for when the tab is clicked.
  /// - For radio input tabs (`tag == 'input'`):
  ///   - `name`: The name for the radio group.
  ///   - `ariaLabel`: The visible label for the radio tab.
  ///   - `isChecked`: If this radio tab is checked.
  /// - Other parameters are inherited from [UiComponent].
  const Tab(
    super.children, {
    super.tag = 'button',
    this.isActive = false,
    this.isDisabled = false,
    this.controlsPanelId,
    List<TabStyling>? styles,
    this.customStyles,
    this.name,
    this.ariaLabel,
    this.isChecked,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.onClick,
    super.child,
    super.key,
  }) : _initialModifiers = styles,
       super(style: styles);

  /// Whether this tab is currently active.
  final bool isActive;

  /// Whether this tab is disabled.
  final bool isDisabled;

  /// The ID of the tab panel element that this tab controls.
  final String? controlsPanelId;

  /// A Jaspr [Styles] object for applying raw CSS properties.
  /// This is the recommended way to apply DaisyUI CSS custom properties
  /// (variables) like `--tab-bg` or `--tab-border-color` to override the
  /// theme for a specific tab.
  ///
  /// Example:
  /// ```dart
  /// Tab(
  ///   [text('Custom Tab')],
  ///   isActive: true,
  ///   customStyles: Styles(raw: {
  ///     '--tab-bg': 'orange',
  ///     '--tab-border-color': 'red',
  ///   }),
  /// )
  /// ```
  final Styles? customStyles;

  /// The HTML `name` attribute, used when `tag` is 'input' (e.g., for radio button groups).
  final String? name;

  /// The `aria-label` attribute. For radio tabs, this is used by DaisyUI as the visible label.
  final String? ariaLabel;

  /// For radio tabs (`tag == 'input'`, `type == 'radio'`), determines if it's checked.
  final bool? isChecked;

  final List<TabStyling>? _initialModifiers;

  @override
  String get baseClass => 'tab';

  @override
  String get combinedClasses {
    final effectiveClasses = <String>[baseClass];

    if (_initialModifiers != null) {
      for (final modifier in _initialModifiers) {
        effectiveClasses.add(modifier.toString());
      }
    }

    if (isActive) {
      effectiveClasses.add(Tab.active.toString());
    }
    if (isDisabled) {
      effectiveClasses.add(Tab.disabled.toString());
    }

    if (classes != null && classes!.isNotEmpty) {
      effectiveClasses.add(classes!);
    }
    return effectiveClasses.where((c) => c.isNotEmpty).join(' ');
  }

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);

    if (tag == 'input') {
      attributes.add(
        'type',
        'radio',
      ); // Assuming 'input' tag for Tab means radio for now
      if (name != null) {
        attributes.add('name', name!);
      }
      if (ariaLabel != null) {
        attributes.addAria('label', ariaLabel!);
      }
      if (isChecked ?? false) {
        attributes.add('checked', 'checked');
      }
      // For radio inputs acting as tabs, role="tab" might not be appropriate on the input itself.
      // The label wrapping it, or the visual representation, might get the role.
      // DaisyUI applies .tab class to the input. ARIA role="tab" is on the input in their examples.
      attributes.addRole('tab');
    } else {
      // For button, a, etc.
      attributes
        ..addRole('tab')
        ..addAria('selected', isActive.toString());
      if (isDisabled) {
        attributes.addAria('disabled', 'true');
        // For non-button elements acting as tabs, tabindex might need explicit management
        // if native 'disabled' attribute isn't applicable.
        if (tag != 'button') {
          attributes.add('tabindex', '-1');
        }
      } else {
        attributes.add('tabindex', isActive ? '0' : '-1');
      }
    }

    if (controlsPanelId != null) {
      attributes.addAria('controls', controlsPanelId!);
    }
  }

  @override
  Tab copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
    // Add customStyles to the copyWith method
    Styles? customStyles,
  }) {
    return Tab(
      children,
      tag: tag,
      isActive: isActive,
      isDisabled: isDisabled,
      controlsPanelId: controlsPanelId,
      styles: style as List<TabStyling>?,
      customStyles: customStyles ?? this.customStyles,
      name: name,
      ariaLabel: ariaLabel,
      isChecked: isChecked,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      onClick: onClick,
      child: child,
      key: key ?? this.key,
    );
  }

  @override
  Component build(BuildContext context) {
    return Component.element(
      tag: tag,
      id: id,
      classes: combinedClasses,
      // Combine base `css` with `customStyles`. `customStyles` will take precedence.
      styles: Styles.combine([
        if (css != null) css!,
        if (customStyles != null) customStyles!,
      ]),
      attributes: componentAttributes,
      events: events,
      children: children ?? [?child],
    );
  }

  // --- Static Tab Modifiers ---

  /// Marks the tab as active. `tab-active`
  static const TabStyle active = TabStyle(
    'tab-active',
    type: StyleType.state,
  );

  /// Marks the tab as disabled. `tab-disabled`
  static const TabStyle disabled = TabStyle(
    'tab-disabled',
    type: StyleType.state,
  );
}

/// Represents the content area associated with a tab.
/// Typically renders as an HTML `<div>` with the 'tab-content' class.
class TabContent extends UiComponent {
  /// Creates a TabContent component.
  ///
  /// - [children] or [child]: The content of the tab panel.
  /// - [tag]: The HTML tag for the root element, defaults to 'div'.
  /// - [style]: A list of general [Styling] instances for styling.
  /// - [id]: The ID of this panel, to be referenced by a `Tab`'s `aria-controls`.
  /// - [labelledByTabId]: The ID of the `Tab` that labels this panel (for `aria-labelledby`).
  /// - Other parameters are inherited from [UiComponent].
  const TabContent(
    super.children, {
    super.tag = 'div',
    super.style,
    super.id,
    this.labelledByTabId,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  });

  /// The ID of the tab that labels this panel.
  final String? labelledByTabId;

  @override
  String get baseClass => 'tab-content';

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);
    attributes.addRole('tabpanel');
    if (labelledByTabId != null) {
      attributes.addAria('labelledby', labelledByTabId!);
    }
    // `aria-hidden` or `hidden` attribute would be managed by user/state to show/hide content.
    // attributes.add('tabindex', '0'); // Make panel focusable if it contains interactive content
  }

  @override
  TabContent copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return TabContent(
      children,
      tag: tag,
      style: style,
      id: id ?? this.id,
      labelledByTabId: labelledByTabId,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/tabs/tabs.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/tabs/tabs_style.dart -->
import '../../base/component_style.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'tabs.dart';

/// Marker interface for any utility that can be passed to a [Tabs]'s `modifiers` list.
abstract class TabsStyling implements Styling {}

/// Defines specific styling and sizing options for a [Tabs] container component.
/// Implements the [TabsStyling] interface.
class TabsStyle extends ComponentStyle<TabsStyle>
    with Breakpoints<TabsStyle>
    implements TabsStyling {
  // Implements the TabsModifier INTERFACE
  const TabsStyle(super.cssClass, {required super.type, super.modifiers});

  @override
  TabsStyle create(List<PrefixModifier> modifiers) {
    return TabsStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/tabs/tabs_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/textarea/textarea.dart -->
import 'package:jaspr/jaspr.dart' show Key, Styles, text;

import '../../base/style_type.dart';
import '../../base/ui_component.dart';
import '../../base/ui_component_attributes.dart';
import 'textarea_style.dart';

/// A component for multi-line text input, rendering an HTML `<textarea>` element.
///
/// It supports various styles, sizes, and colors through its `style` property,
/// and common textarea attributes can be passed directly to the constructor.
class Textarea extends UiComponent {
  /// Creates a Textarea component.
  ///
  /// - [value]: The text content to display within the textarea.
  /// - [placeholder]: The placeholder text to display when the textarea is empty.
  /// - [name]: The name of the textarea, used for form submission.
  /// - [disabled]: If true, the textarea will be disabled.
  /// - [rows]: The visible number of lines in a text area.
  /// - [style]: A list of [TextareaStyling] instances for styling.
  /// - Event handlers like [onInput] and [onChange] from [UiComponent] are available.
  /// - Other parameters are inherited from [UiComponent].
  Textarea({
    String? value,
    this.placeholder,
    this.name,
    this.disabled = false,
    this.rows,
    super.tag = 'textarea',
    List<TextareaStyling>? style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.onInput,
    super.onChange,
    super.key,
  })  : _value = value,
        super(value != null ? [text(value)] : null, style: style);

  /// The text content of the textarea.
  final String? _value;

  /// The placeholder text displayed when the textarea is empty.
  final String? placeholder;

  /// The name of the textarea, used in form submissions.
  final String? name;

  /// If true, the textarea is not interactive.
  final bool disabled;

  /// The number of visible text lines for the control.
  final int? rows;

  @override
  String get baseClass => 'textarea';

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);
    if (placeholder != null) attributes.add('placeholder', placeholder!);
    if (name != null) attributes.add('name', name!);
    if (disabled) attributes.add('disabled', '');
    if (rows != null) attributes.add('rows', rows!.toString());
  }

  @override
  Textarea copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return Textarea(
      value: _value,
      placeholder: placeholder,
      name: name,
      disabled: disabled,
      rows: rows,
      tag: tag,
      style: style as List<TextareaStyling>?,
      onInput: onInput,
      onChange: onChange,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      key: key ?? this.key,
    );
  }

  // --- Static Style Modifiers ---

  /// Adds a border to the textarea. `textarea-bordered`
  static const TextareaStyle bordered = TextareaStyle('textarea-bordered', type: StyleType.border);

  /// Ghost style (transparent background). `textarea-ghost`
  static const TextareaStyle ghost = TextareaStyle('textarea-ghost', type: StyleType.style);

  // Colors
  /// Neutral color. `textarea-neutral`
  static const TextareaStyle neutral = TextareaStyle('textarea-neutral', type: StyleType.style);

  /// Primary color. `textarea-primary`
  static const TextareaStyle primary = TextareaStyle('textarea-primary', type: StyleType.style);

  /// Secondary color. `textarea-secondary`
  static const TextareaStyle secondary = TextareaStyle('textarea-secondary', type: StyleType.style);

  /// Accent color. `textarea-accent`
  static const TextareaStyle accent = TextareaStyle('textarea-accent', type: StyleType.style);

  /// Info color. `textarea-info`
  static const TextareaStyle info = TextareaStyle('textarea-info', type: StyleType.style);

  /// Success color. `textarea-success`
  static const TextareaStyle success = TextareaStyle('textarea-success', type: StyleType.style);

  /// Warning color. `textarea-warning`
  static const TextareaStyle warning = TextareaStyle('textarea-warning', type: StyleType.style);

  /// Error color. `textarea-error`
  static const TextareaStyle error = TextareaStyle('textarea-error', type: StyleType.style);

  // Sizes
  /// Extra-small size. `textarea-xs`
  static const TextareaStyle xs = TextareaStyle('textarea-xs', type: StyleType.sizing);

  /// Small size. `textarea-sm`
  static const TextareaStyle sm = TextareaStyle('textarea-sm', type: StyleType.sizing);

  /// Medium size (default). `textarea-md`
  static const TextareaStyle md = TextareaStyle('textarea-md', type: StyleType.sizing);

  /// Large size. `textarea-lg`
  static const TextareaStyle lg = TextareaStyle('textarea-lg', type: StyleType.sizing);

  /// Extra-large size. `textarea-xl`
  static const TextareaStyle xl = TextareaStyle('textarea-xl', type: StyleType.sizing);
}

<!-- END FILE: packages/deepyr/lib/src/components/textarea/textarea.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/textarea/textarea_style.dart -->
import '../../base/component_style.dart';
import '../../base/style_type.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'textarea.dart';

/// A marker interface for any utility that can be passed to a [Textarea]'s `style` list.
///
/// This allows for type-safe application of styles for colors, sizes, and variants.
abstract class TextareaStyling implements Styling {}

/// Defines specific styling options for a [Textarea] component.
///
/// This is the concrete implementation class for textarea-specific modifiers.
/// It implements the [TextareaStyling] interface, making it a valid type for the
/// `style` property of a [Textarea] component.
class TextareaStyle extends ComponentStyle<TextareaStyle>
    with Breakpoints<TextareaStyle>
    implements TextareaStyling {
  /// Constructs a [TextareaStyle].
  ///
  /// - [cssClass]: The core CSS class string for this modifier (e.g., "textarea-bordered").
  /// - [type]: The [StyleType] categorizing this modifier.
  /// - [modifiers]: An optional list of [PrefixModifier]s for responsive styling.
  const TextareaStyle(super.cssClass, {required super.type, super.modifiers});

  /// Creates a new instance of [TextareaStyle] with the provided modifiers.
  @override
  TextareaStyle create(List<PrefixModifier> modifiers) {
    return TextareaStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/textarea/textarea_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/theme_controller/theme_controller.dart -->
import 'package:jaspr/jaspr.dart';

import '../../base/style_type.dart';
import '../../base/ui_component.dart';
import '../../base/ui_component_attributes.dart';
import 'theme_controller_style_modifier.dart';

/// Represents a theme that can be used with DaisyUI.
@immutable
class DaisyTheme {
  /// Creates a custom theme.
  ///
  /// The [value] should correspond to a theme name defined in your tailwind.config.js
  const DaisyTheme.custom(this.value);

  /// Factory for creating a theme from a string value.
  factory DaisyTheme.fromValue(String value) {
    return predefined.firstWhere(
      (theme) => theme.value == value,
      orElse: () => DaisyTheme.custom(value),
    );
  }

  const DaisyTheme._(this.value);

  // Predefined DaisyUI Themes
  static const DaisyTheme light = DaisyTheme._('light');
  static const DaisyTheme dark = DaisyTheme._('dark');
  static const DaisyTheme cupcake = DaisyTheme._('cupcake');
  static const DaisyTheme bumblebee = DaisyTheme._('bumblebee');
  static const DaisyTheme emerald = DaisyTheme._('emerald');
  static const DaisyTheme corporate = DaisyTheme._('corporate');
  static const DaisyTheme synthwave = DaisyTheme._('synthwave');
  static const DaisyTheme retro = DaisyTheme._('retro');
  static const DaisyTheme cyberpunk = DaisyTheme._('cyberpunk');
  static const DaisyTheme valentine = DaisyTheme._('valentine');
  static const DaisyTheme halloween = DaisyTheme._('halloween');
  static const DaisyTheme garden = DaisyTheme._('garden');
  static const DaisyTheme forest = DaisyTheme._('forest');
  static const DaisyTheme aqua = DaisyTheme._('aqua');
  static const DaisyTheme lofi = DaisyTheme._('lofi');
  static const DaisyTheme pastel = DaisyTheme._('pastel');
  static const DaisyTheme fantasy = DaisyTheme._('fantasy');
  static const DaisyTheme wireframe = DaisyTheme._('wireframe');
  static const DaisyTheme black = DaisyTheme._('black');
  static const DaisyTheme luxury = DaisyTheme._('luxury');
  static const DaisyTheme dracula = DaisyTheme._('dracula');
  static const DaisyTheme cmyk = DaisyTheme._('cmyk');
  static const DaisyTheme autumn = DaisyTheme._('autumn');
  static const DaisyTheme business = DaisyTheme._('business');
  static const DaisyTheme acid = DaisyTheme._('acid');
  static const DaisyTheme lemonade = DaisyTheme._('lemonade');
  static const DaisyTheme night = DaisyTheme._('night');
  static const DaisyTheme coffee = DaisyTheme._('coffee');
  static const DaisyTheme winter = DaisyTheme._('winter');
  static const DaisyTheme dim = DaisyTheme._('dim');
  static const DaisyTheme nord = DaisyTheme._('nord');
  static const DaisyTheme sunset = DaisyTheme._('sunset');

  /// A list of all predefined themes.
  static List<DaisyTheme> get predefined => const <DaisyTheme>[
    light,
    dark,
    cupcake,
    bumblebee,
    emerald,
    corporate,
    synthwave,
    retro,
    cyberpunk,
    valentine,
    halloween,
    garden,
    forest,
    aqua,
    lofi,
    pastel,
    fantasy,
    wireframe,
    black,
    luxury,
    dracula,
    cmyk,
    autumn,
    business,
    acid,
    lemonade,
    night,
    coffee,
    winter,
    dim,
    nord,
    sunset,
  ];

  /// Checks if this theme is one of the predefined DaisyUI themes.
  bool get isPredefined => predefined.contains(this);

  /// Checks if this is a custom-defined theme.
  bool get isCustom => !isPredefined;
  final String value;

  @override
  bool operator ==(Object other) =>
      identical(this, other) || other is DaisyTheme && value == other.value;
  @override
  int get hashCode => value.hashCode;
}

/// Abstract base class for DaisyUI theme controller input elements.
///
/// This component renders an HTML `<input>` (checkbox or radio) that, when
/// interacted with, changes the `data-theme` attribute on the `<html>` element,
/// allowing for dynamic theme switching using the `theme-change` JavaScript library.
///
/// The `modifiers` list accepts [ThemeControllerStyling] (the interface) instances.
abstract class ThemeController extends UiComponent {
  /// Creates a ThemeController.
  ///
  /// - [value]: The [DaisyTheme] this controller represents or activates when selected/checked.
  /// - [toggleTheme]: For checkbox/toggle types, the alternative theme it toggles to.
  ///   If null, the checkbox might toggle between `value` and a default (e.g., a browser default or previously set theme).
  /// - [name]: The HTML `name` attribute, crucial for grouping radio buttons.
  /// - [isChecked]: For radio buttons, whether this option is initially selected.
  /// - [defaultChecked]: For checkbox, whether it's initially checked.
  /// - [transitionDuration]: Optional duration for theme transition animations.
  /// - [style]: A list of [ThemeControllerStyling] (the interface) instances.
  /// - [onChange]: Callback for value changes.
  /// - Other parameters from [UiComponent].
  const ThemeController({
    required this.value,
    required this.name,
    this.toggleTheme,
    this.isChecked = false,
    this.defaultChecked = false,
    this.transitionDuration,
    List<ThemeControllerStyling>? style,
    super.tag = 'input',
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.onChange,
    super.key,
  }) : super(null, style: style);

  /// The primary [DaisyTheme] this controller instance represents or sets.
  final DaisyTheme value;

  /// For checkbox-based controllers, this is the theme it toggles to/from.
  /// The `data-toggle-theme` attribute will be set to "[value],[toggleTheme]".
  /// If null, `data-toggle-theme` might just be "[value]".
  final DaisyTheme? toggleTheme;

  /// The HTML `name` attribute for the input element. Essential for radio button groups.
  final String name;

  /// For radio buttons: determines if this radio option is initially selected.
  /// The `checked` HTML attribute will be set if true.
  final bool isChecked;

  /// For checkboxes: determines if the checkbox is initially checked.
  /// The `checked` HTML attribute will be set if true.
  final bool defaultChecked; // Renamed from just 'checked' to avoid conflict

  /// Optional duration for theme transition animations, used for `data-theme-transition`.
  final Duration? transitionDuration;

  @override
  String get baseClass => 'theme-controller';

  /// Must be implemented by subclasses to return "checkbox" or "radio".
  String get inputType;

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);
    attributes.add('type', inputType);
    attributes.add('name', name);
    attributes.add('value', value.value);

    // Handle 'checked' attribute for both radio and checkbox
    if (inputType == 'radio' && isChecked) {
      attributes.add('checked', '');
    } else if (inputType == 'checkbox' && defaultChecked) {
      attributes.add('checked', '');
    }

    // Attributes for theme-change.js
    attributes.addData('act-class', 'ACTIVE');

    var toggleThemeValue = value.value;
    if (toggleTheme != null) {
      toggleThemeValue = '${value.value},${toggleTheme!.value}';
    } else if (inputType == 'checkbox') {
      // If it's a checkbox and no explicit toggleTheme, it implies toggling
      // the current `value` on/off relative to a default or another theme.
      // theme-change.js might need a pair or will toggle this single theme.
      // For simplicity, if only one theme is given to a checkbox, it often means
      // "apply this theme when checked, remove it (or revert to default) when unchecked".
      // The `data-toggle-theme` might just be the single theme name in this case.
    }
    attributes.addData('toggle-theme', toggleThemeValue);

    if (transitionDuration != null) {
      attributes.addData('theme-transition', '${transitionDuration!.inMilliseconds}ms');
    }
  }
}

/// A [ThemeController] rendered as an HTML `<input type="checkbox">`.
/// Can be styled as a standard checkbox or a toggle switch.
class ThemeControllerCheckbox extends ThemeController {
  /// Creates a ThemeControllerCheckbox.
  ///
  /// - [value]: The [DaisyTheme] to apply when checked (or the first theme in a toggle pair).
  /// - [toggleTheme]: The [DaisyTheme] to apply when unchecked (if it's a two-way toggle).
  ///   If null, checking applies `value`, unchecking might revert to a default or remove `value`.
  /// - [name]: The HTML `name` attribute.
  /// - [defaultChecked]: If true, the checkbox is initially checked.
  /// - [modifiers]: List of [ThemeControllerStyling], can include [ThemeControllerCheckbox.toggleStyle].
  /// - Other parameters from [ThemeController].
  const ThemeControllerCheckbox({
    required super.value,
    required super.name,
    super.toggleTheme, // If null, it toggles 'value' on/off
    super.defaultChecked = false,
    super.transitionDuration,
    super.style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.onChange,
    super.key,
  });

  @override
  String get inputType => 'checkbox';

  @override
  ThemeControllerCheckbox copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return ThemeControllerCheckbox(
      value: value,
      name: name,
      toggleTheme: toggleTheme,
      defaultChecked: defaultChecked,
      transitionDuration: transitionDuration,
      style: style as List<ThemeControllerStyling>?,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      onChange: onChange,
      key: key ?? this.key,
    );
  }

  // --- Static ThemeController Modifiers specific to Checkbox rendering ---
  // (Type: ThemeControllerModifier interface, Instantiating: ThemeControllerStyleModifier)

  /// Styles the checkbox as a toggle switch. `toggle`
  static const ThemeControllerStyle toggle = ThemeControllerStyle('toggle', type: StyleType.style);
}

/// A [ThemeController] rendered as an HTML `<input type="radio">`.
/// Typically used in a group where only one theme can be selected.
class ThemeControllerRadio extends ThemeController {
  /// Creates a ThemeControllerRadio.
  ///
  /// - [value]: The [DaisyTheme] this radio button represents and applies when selected.
  /// - [name]: The HTML `name` attribute; must be the same for all radio buttons in a group.
  /// - [isChecked]: If true, this radio button is initially selected.
  /// - [modifiers]: List of [ThemeControllerStyling], can include [ThemeControllerRadio.button].
  /// - Other parameters from [ThemeController].
  const ThemeControllerRadio({
    required super.value,
    // toggleTheme is not typically used with radio buttons as they are mutually exclusive.
    required super.name,
    super.isChecked = false,
    super.transitionDuration,
    super.style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.onChange,
    super.key,
  });

  @override
  String get inputType => 'radio';

  @override
  ThemeControllerRadio copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return ThemeControllerRadio(
      value: value,
      name: name,
      isChecked: isChecked,
      transitionDuration: transitionDuration,
      style: style as List<ThemeControllerStyling>?,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      onChange: onChange,
      key: key ?? this.key,
    );
  }

  // --- Static ThemeController Modifiers specific to Radio rendering ---

  /// Styles the radio input as a button. `btn`
  static const ThemeControllerStyling button = ThemeControllerStyle('btn', type: StyleType.style);
  // Other button styles (btn-primary, btn-sm) would be applied as general utilities if needed,
  // or more specific ThemeControllerStyleModifiers could be created.
}

<!-- END FILE: packages/deepyr/lib/src/components/theme_controller/theme_controller.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/theme_controller/theme_controller_style_modifier.dart -->
import '../../base/component_style.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'theme_controller.dart';

/// Marker interface for any utility that can be passed to a [ThemeController]'s `modifiers` list.
abstract class ThemeControllerStyling implements Styling {}

/// Defines specific styling options for a [ThemeController] component,
/// such as rendering it as a toggle or a button.
/// Implements the [ThemeControllerStyling] interface.
class ThemeControllerStyle extends ComponentStyle<ThemeControllerStyle>
    with Breakpoints<ThemeControllerStyle>
    implements ThemeControllerStyling {
  const ThemeControllerStyle(super.cssClass,
      {required super.type, super.modifiers});

  @override
  ThemeControllerStyle create(List<PrefixModifier> modifiers) {
    return ThemeControllerStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/theme_controller/theme_controller_style_modifier.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/theme_controller/theme_service.dart -->
import 'dart:async';

import 'package:universal_web/web.dart';

// @JS('themeChange')
// external void themeChange();

// @JS('setTheme')
// external void _jsSetTheme(String theme);

/// Service zum Verwalten des UI Themes
/// Theme programmatisch ändern
/// ThemeService.instance.setTheme('dark');
class ThemeService {
  ThemeService._();
  static ThemeService? _instance;
  static ThemeService get instance => _instance ??= ThemeService._();

  bool _initialized = false;

  /// Initialisiert den Theme Service
  /// Lädt das theme-change Script und initialisiert es
  Future<void> initialize() async {
    if (_initialized) return;

    try {
      // Füge theme-change Script hinzu
      final script = document.createElement('script') as HTMLScriptElement;
      script.src = 'https://cdn.jsdelivr.net/npm/theme-change@2.0.2/index.js';
      script.type = 'text/javascript';

      // Warte bis Script geladen ist
      final completer = Completer<void>();
      script.onLoad.listen((_) => completer.complete());
      script.onError.listen(completer.completeError);

      document.head?.appendChild(script);
      await completer.future;

      _initialized = true;
    } catch (e) {
      print('Failed to initialize ThemeService: $e');
      rethrow;
    }
  }

  /// Gibt das aktuelle Theme zurück
  String? getCurrentTheme() {
    return document.documentElement?.getAttribute('data-theme');
  }

  /// Add Theme Persistence:
  static const _themeKey = 'current_theme';

  String? loadSavedTheme() {
    // Using window.localStorage for persistence
    return window.localStorage[_themeKey];
  }

  void saveTheme(String theme) {
    window.localStorage[_themeKey] = theme;
  }

  ///Add System Theme Detection
  bool get systemPrefersDark {
    return window.matchMedia('(prefers-color-scheme: dark)').matches;
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/theme_controller/theme_service.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/toggle/toggle.dart -->
import 'package:jaspr/jaspr.dart'
    show BuildContext, Component, EventCallback, Key, Styles, ValueChanged, kIsWeb;
import 'package:universal_web/web.dart' show Event, HTMLInputElement;

import '../../base/style_type.dart';
import '../../base/ui_component.dart';
import '../../base/ui_component_attributes.dart';
import '../../base/ui_events.dart';
import 'toggle_style.dart';

/// A checkbox styled to look like a switch button.
///
/// The `Toggle` is a **controlled component**. Its state is not managed internally.
/// Instead, you must provide its current state via the [isChecked] property and
/// handle state changes with the [onToggle] callback. This ensures that the UI
/// is always a direct reflection of your application's state.
///
/// Example of state management in a `StatefulComponent`:
/// ```dart
/// class MySettings extends StatefulComponent {
///   bool _notificationsEnabled = true;
///
///   @override
///   State<MySettings> createState() => _MySettingsState();
/// }
///
/// class _MySettingsState extends State<MySettings> {
///   @override
///   Component build(BuildContext context) {
///     return Toggle(
///       isChecked: _notificationsEnabled,
///       onToggle: (newValue) {
///         setState(() => _notificationsEnabled = newValue);
///       },
///       style: [Toggle.primary],
///     );
///   }
/// }
/// ```
class Toggle extends UiComponent {
  /// Creates a Toggle component.
  ///
  /// - [isChecked]: The current checked state of the toggle.
  /// - [onToggle]: A callback that fires when the user clicks the toggle. It
  ///   receives the new potential boolean state. You should use this callback
  ///   to update your application's state.
  /// - [disabled]: If true, the toggle will be non-interactive.
  /// - [indeterminate]: If true, the toggle will be in an indeterminate state.
  ///   **Note:** This property must be managed via JavaScript after the component has
  ///   rendered. See the documentation for an example.
  /// - [style]: A list of [ToggleStyling] instances for styling.
  /// - Other parameters are inherited from [UiComponent].
  const Toggle({
    this.isChecked = false,
    this.onToggle,
    this.disabled = false,
    this.indeterminate = false,
    super.tag = 'input',
    List<ToggleStyling>? style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.eventHandlers,
    super.key,
  }) : super(null, style: style); // Toggle elements have no children.

  /// The current checked state of the toggle.
  final bool isChecked;

  /// Callback function invoked when the toggle's state changes.
  final ValueChanged<bool>? onToggle;

  /// If true, the toggle is non-interactive.
  final bool disabled;

  /// If true, the toggle will be in an indeterminate state.
  /// This is a visual state that is not submitted with the form value and must
  /// be set via JavaScript after the element has rendered.
  final bool indeterminate;

  @override
  String get baseClass => 'toggle';

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);
    attributes.add('type', 'checkbox');
    if (isChecked) {
      attributes.add('checked', '');
    }
    if (disabled) {
      attributes.add('disabled', '');
    }
  }

  @override
  Toggle copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Map<String, List<UiEventHandler>>? eventHandlers,
    Key? key,
  }) {
    return Toggle(
      isChecked: isChecked,
      onToggle: onToggle,
      disabled: disabled,
      indeterminate: indeterminate,
      tag: tag,
      style: style as List<ToggleStyling>?,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      eventHandlers: eventHandlers ?? this.eventHandlers,
      key: key ?? this.key,
    );
  }

  @override
  Component build(BuildContext context) {
    // Start with the standard events from the base class.
    final eventMap = Map<String, EventCallback>.from(events);

    if (onToggle != null) {
      eventMap['change'] = (dynamic event) {
        // Guard for web-only execution to prevent errors during SSR.
        if (kIsWeb) {
          // Use explicit casting (`as`) which is the idiomatic way to handle
          // known event types from JS interop, avoiding analyzer warnings.
          final target = (event as Event).target! as HTMLInputElement;
          onToggle!(target.checked);
        }
      };
    }

    return Component.element(
      tag: tag,
      id: id,
      classes: combinedClasses,
      styles: css,
      attributes: componentAttributes,
      events: eventMap,
      // A toggle has no children.
    );
  }

  // --- Static Style Modifiers ---

  // Colors
  /// Primary color. `toggle-primary`
  static const ToggleStyle primary = ToggleStyle('toggle-primary', type: StyleType.style);

  /// Secondary color. `toggle-secondary`
  static const ToggleStyle secondary = ToggleStyle('toggle-secondary', type: StyleType.style);

  /// Accent color. `toggle-accent`
  static const ToggleStyle accent = ToggleStyle('toggle-accent', type: StyleType.style);

  /// Neutral color. `toggle-neutral`
  static const ToggleStyle neutral = ToggleStyle('toggle-neutral', type: StyleType.style);

  /// Success color. `toggle-success`
  static const ToggleStyle success = ToggleStyle('toggle-success', type: StyleType.style);

  /// Warning color. `toggle-warning`
  static const ToggleStyle warning = ToggleStyle('toggle-warning', type: StyleType.style);

  /// Info color. `toggle-info`
  static const ToggleStyle info = ToggleStyle('toggle-info', type: StyleType.style);

  /// Error color. `toggle-error`
  static const ToggleStyle error = ToggleStyle('toggle-error', type: StyleType.style);

  // Sizes
  /// Extra-small size. `toggle-xs`
  static const ToggleStyle xs = ToggleStyle('toggle-xs', type: StyleType.sizing);

  /// Small size. `toggle-sm`
  static const ToggleStyle sm = ToggleStyle('toggle-sm', type: StyleType.sizing);

  /// Medium size (default). `toggle-md`
  static const ToggleStyle md = ToggleStyle('toggle-md', type: StyleType.sizing);

  /// Large size. `toggle-lg`
  static const ToggleStyle lg = ToggleStyle('toggle-lg', type: StyleType.sizing);

  /// Extra large size. `toggle-xl`
  static const ToggleStyle xl = ToggleStyle('toggle-xl', type: StyleType.sizing);
}

<!-- END FILE: packages/deepyr/lib/src/components/toggle/toggle.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/toggle/toggle_style.dart -->
import '../../base/component_style.dart';
import '../../base/style_type.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'toggle.dart';

/// A marker interface for any utility that can be passed to a [Toggle]'s `style` list.
///
/// This allows for type-safe application of styles for colors and sizes.
abstract class ToggleStyling implements Styling {}

/// Defines specific styling options for a [Toggle] component.
///
/// This is the concrete implementation class for toggle-specific modifiers.
/// It implements the [ToggleStyling] interface, making it a valid type for the
/// `style` property of a [Toggle] component.
class ToggleStyle extends ComponentStyle<ToggleStyle>
    with Breakpoints<ToggleStyle>
    implements ToggleStyling {
  /// Constructs a [ToggleStyle].
  ///
  /// - [cssClass]: The core CSS class string for this modifier (e.g., "toggle-primary").
  /// - [type]: The [StyleType] categorizing this modifier.
  /// - [modifiers]: An optional list of [PrefixModifier]s for responsive styling.
  const ToggleStyle(super.cssClass, {required super.type, super.modifiers});

  /// Creates a new instance of [ToggleStyle] with the provided modifiers.
  @override
  ToggleStyle create(List<PrefixModifier> modifiers) {
    return ToggleStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/toggle/toggle_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/tooltip/tooltip.dart -->
import 'package:jaspr/jaspr.dart';

import '../../base/style_type.dart';
import '../../base/ui_component.dart';
import '../../base/ui_component_attributes.dart';
import 'tooltip_style.dart';

/// A component that shows a message when hovering over an element.
///
/// It acts as a wrapper around the trigger element. The tooltip's content can
/// be provided either as a simple string via the `tip` property (which uses the
/// `data-tip` attribute) or as rich HTML content via the `content` property,
/// which should be a [TooltipContent] component.
class Tooltip extends UiComponent {
  /// Creates a Tooltip component.
  ///
  /// - [children]: The trigger element(s) for the tooltip (e.g., a `Button`).
  /// - [tip]: A simple string to be displayed as the tooltip's content.
  /// - [content]: A [TooltipContent] component for rich HTML content.
  ///   You must provide either `tip` or `content`, but not both.
  /// - [style]: A list of [TooltipStyling] modifiers for color, placement, and behavior.
  /// - Other parameters are inherited from [UiComponent].
  const Tooltip(
    super.children, {
    this.tip,
    this.content,
    super.tag = 'div',
    List<TooltipStyling>? style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.key,
  }) : assert(
         tip == null || content == null,
         'Cannot provide both a text `tip` and rich `content` for a Tooltip.',
       ),
       super(style: style);

  /// The text content to display in the tooltip. This will be rendered
  /// to the `data-tip` attribute.
  final String? tip;

  /// A component, typically [TooltipContent], that holds rich HTML for the tooltip.
  final Component? content;

  @override
  String get baseClass => 'tooltip';

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);
    if (tip != null) {
      attributes.add('data-tip', tip!);
    }
  }

  @override
  Component build(BuildContext context) {
    final effectiveChildren = <Component>[];
    if (content != null) {
      effectiveChildren.add(content!);
    }
    if (children != null) {
      effectiveChildren.addAll(children!);
    }

    return Component.element(
      tag: tag,
      id: id,
      classes: combinedClasses,
      styles: this.css,
      attributes: componentAttributes,
      events: this.events,
      children: effectiveChildren,
    );
  }

  @override
  Tooltip copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return Tooltip(
      children,
      tip: tip,
      content: content,
      tag: tag,
      style: style as List<TooltipStyling>?,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      key: key ?? this.key,
    );
  }

  // --- Static Style Modifiers ---

  /// Forces the tooltip to be always visible. `tooltip-open`
  static const TooltipStyle open = TooltipStyle('tooltip-open', type: StyleType.state);

  // Placement
  /// Positions the tooltip on the top. `tooltip-top` (Default)
  static const TooltipStyle top = TooltipStyle('tooltip-top', type: StyleType.layout);

  /// Positions the tooltip on the bottom. `tooltip-bottom`
  static const TooltipStyle bottom = TooltipStyle('tooltip-bottom', type: StyleType.layout);

  /// Positions the tooltip on the left. `tooltip-left`
  static const TooltipStyle left = TooltipStyle('tooltip-left', type: StyleType.layout);

  /// Positions the tooltip on the right. `tooltip-right`
  static const TooltipStyle right = TooltipStyle('tooltip-right', type: StyleType.layout);

  // Colors
  /// Neutral color. `tooltip-neutral`
  static const TooltipStyle neutral = TooltipStyle('tooltip-neutral', type: StyleType.style);

  /// Primary color. `tooltip-primary`
  static const TooltipStyle primary = TooltipStyle('tooltip-primary', type: StyleType.style);

  /// Secondary color. `tooltip-secondary`
  static const TooltipStyle secondary = TooltipStyle('tooltip-secondary', type: StyleType.style);

  /// Accent color. `tooltip-accent`
  static const TooltipStyle accent = TooltipStyle('tooltip-accent', type: StyleType.style);

  /// Info color. `tooltip-info`
  static const TooltipStyle info = TooltipStyle('tooltip-info', type: StyleType.style);

  /// Success color. `tooltip-success`
  static const TooltipStyle success = TooltipStyle('tooltip-success', type: StyleType.style);

  /// Warning color. `tooltip-warning`
  static const TooltipStyle warning = TooltipStyle('tooltip-warning', type: StyleType.style);

  /// Error color. `tooltip-error`
  static const TooltipStyle error = TooltipStyle('tooltip-error', type: StyleType.style);
}

/// A container for rich HTML content to be used within a [Tooltip].
///
/// This component should be passed to the `content` property of a [Tooltip].
/// It renders a `<div>` with the `tooltip-content` class.
class TooltipContent extends UiComponent {
  /// Creates a TooltipContent container.
  ///
  /// - [children]: The rich HTML content for the tooltip.
  /// - Other parameters are inherited from [UiComponent].
  const TooltipContent(
    super.children, {
    super.tag = 'div',
    super.style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  });

  @override
  String get baseClass => 'tooltip-content';

  @override
  TooltipContent copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return TooltipContent(
      children,
      tag: tag,
      style: style,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/tooltip/tooltip.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/tooltip/tooltip_style.dart -->
import '../../base/component_style.dart';
import '../../base/style_type.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'tooltip.dart';

/// A marker interface for any utility that can be passed to a [Tooltip]'s
/// `style` list. This allows for type-safe application of styles for color,
/// placement, and behavior.
abstract class TooltipStyling implements Styling {}

/// Defines specific styling options for a [Tooltip] component.
///
/// This is the concrete implementation class for tooltip-specific modifiers.
/// It implements the [TooltipStyling] interface, making it a valid type for the
/// `style` property of a [Tooltip] component.
class TooltipStyle extends ComponentStyle<TooltipStyle>
    with Breakpoints<TooltipStyle>
    implements TooltipStyling {
  /// Constructs a [TooltipStyle].
  ///
  /// - [cssClass]: The core CSS class string for this modifier (e.g., "tooltip-primary").
  /// - [type]: The [StyleType] categorizing this modifier.
  /// - [modifiers]: An optional list of [PrefixModifier]s for responsive styling.
  const TooltipStyle(super.cssClass, {required super.type, super.modifiers});

  /// Creates a new instance of [TooltipStyle] with the provided modifiers.
  @override
  TooltipStyle create(List<PrefixModifier> modifiers) {
    return TooltipStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/tooltip/tooltip_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/validator_hint/validator_hint.dart -->
import 'package:jaspr/jaspr.dart' show Key, Styles;

import '../../base/ui_component.dart';
import 'validator_hint_style.dart';

/// A component that displays a validation message for a form field.
///
/// It renders as a `<p>` element with the `validator-hint` base class.
/// According to DaisyUI's CSS, this hint will be invisible by default when
/// placed after an element with the `validator` class, and will become visible
/// automatically when that element becomes invalid (e.g., via the `:invalid`
/// pseudo-class).
class ValidatorHint extends UiComponent {
  /// Creates a ValidatorHint component.
  ///
  /// - [children] or [child]: The validation message to display.
  /// - [tag]: The HTML tag for the root element, defaults to 'p' for semantic
  ///   appropriateness as a descriptive message.
  /// - [style]: A list of [ValidatorHintStyling] instances. For example, use
  ///   `[Layout.hidden]` to prevent the hint from occupying space when invisible.
  /// - Other parameters are inherited from [UiComponent].
  const ValidatorHint(
    super.children, {
    super.tag = 'p',
    List<ValidatorHintStyling>? style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  }) : super(style: style);

  @override
  String get baseClass => 'validator-hint';

  @override
  ValidatorHint copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return ValidatorHint(
      children,
      tag: tag,
      style: style as List<ValidatorHintStyling>?,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/validator_hint/validator_hint.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/components/validator_hint/validator_hint_style.dart -->
import '../../base/component_style.dart';
import '../../base/style_type.dart';
import '../../base/styling.dart';
import '../../base/ui_prefix_modifier.dart';
import 'validator_hint.dart';

/// A marker interface for any utility that can be passed to a [ValidatorHint]'s
/// `style` list.
///
/// This allows for type-safe application of styles. `ValidatorHint` currently
/// has no specific modifiers of its own, so this is used for applying general
/// utilities like `Layout.hidden`.
abstract class ValidatorHintStyling implements Styling {}

/// Defines specific styling options for a [ValidatorHint] component.
///
/// This is the concrete implementation class for validator hint-specific modifiers.
/// It implements the [ValidatorHintStyling] interface. Currently, there are no
/// predefined static modifiers for `ValidatorHint`.
class ValidatorHintStyle extends ComponentStyle<ValidatorHintStyle>
    with Breakpoints<ValidatorHintStyle>
    implements ValidatorHintStyling {
  /// Constructs a [ValidatorHintStyle].
  ///
  /// - [cssClass]: The core CSS class string for this modifier.
  /// - [type]: The [StyleType] categorizing this modifier.
  /// - [modifiers]: An optional list of [PrefixModifier]s for responsive styling.
  const ValidatorHintStyle(
    super.cssClass, {
    required super.type,
    super.modifiers,
  });

  /// Creates a new instance of [ValidatorHintStyle] with the provided modifiers.
  @override
  ValidatorHintStyle create(List<PrefixModifier> modifiers) {
    return ValidatorHintStyle(cssClass, type: type, modifiers: modifiers);
  }
}

<!-- END FILE: packages/deepyr/lib/src/components/validator_hint/validator_hint_style.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/elements/container.dart -->
import 'package:jaspr/jaspr.dart';

import '../base/base_style.dart';
import '../base/styling.dart';
import '../base/ui_component.dart';
import '../base/ui_component_attributes.dart';
import '../base/ui_prefix_modifier.dart';

/// A generic container component, typically rendering as an HTML `<div>`.
///
/// It serves as a versatile building block for layout and grouping content.
/// Styling and layout are primarily controlled by applying general utility classes
/// (instances of [Styling]) through its `styles` property.
///
/// Use the [Container.responsive] factory for a convenient way to apply
/// different modifiers at various breakpoints.
class Container extends UiComponent {
  /// Creates a generic Container component.
  ///
  /// - [children] or [child]: The content to be placed within the container.
  /// - [tag]: The HTML tag for the container element, defaults to 'div'.
  /// - [styles]: A list of general [Styling] instances for styling
  ///   and layout (e.g., Spacing, Sizing, Flex, Background).
  /// - Other parameters are inherited from [UiComponent].
  const Container(
    super.children, {
    super.tag = 'div',
    super.style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.onClick, // If the container itself needs to be clickable
    super.key,
  });

  @override
  String get baseClass => ''; // Container itself has no specific DaisyUI base class

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);
    // A generic container typically doesn't require specific ARIA roles by default.
    // Roles like 'region', 'main', 'complementary', 'form', etc., should be
    // applied by the user via the `attributes` prop or by more specialized
    // components that might extend or use Container.
    // For example, if used as a main content area:
    // Container([...], attributes: {'role': 'main', 'aria-label': 'Main content'})
  }

  @override
  Container copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return Container(
      children,
      tag: tag,
      style: style,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      onClick: onClick,
      key: key ?? this.key,
    );
  }

  /// Factory method to create a [Container] with responsive modifiers.
  ///
  /// This allows defining different sets of utility classes for mobile, tablet,
  /// and desktop breakpoints.
  ///
  /// Example:
  /// ```dart
  /// Container.responsive(
  ///   children: [Text("Responsive Content")],
  ///   mobile: [Sizing.wFull, Flex.flexCol],
  ///   tablet: [Sizing.w3_4, Flex.flexRow, Alignment.justifyBetween],
  ///   desktop: [Sizing.w1_2, Spacing.mxAuto()],
  /// )
  /// ```
  ///
  /// - [children] or [child]: The content of the container.
  /// - [tag]: The HTML tag for the container.
  /// - [mobile]: List of [Styling] for mobile and smaller screens (default).
  /// - [tablet]: List of [Styling] applied from the 'md' breakpoint upwards.
  ///   Only instances of [BaseStyle] within this list will have the breakpoint applied.
  /// - [desktop]: List of [Styling] applied from the 'lg' breakpoint upwards.
  ///   Only instances of [BaseStyle] within this list will have the breakpoint applied.
  /// - [id], [classes], [css], [attributes], [key]: Standard [UiComponent] parameters.
  static Container responsive({
    List<Component>? children,
    Component? child,
    String tag = 'div',
    List<Styling>? mobile,
    List<Styling>? tablet,
    List<Styling>? desktop,
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    final responsiveStyles = <Styling>[];

    if (mobile != null) {
      responsiveStyles.addAll(mobile);
    }

    // Helper function to safely apply breakpoints
    Styling applyBreakpoint(Styling utility, PrefixModifier breakpoint) {
      // Check if the utility is an instance of BaseStyle.
      // We use BaseStyle<dynamic> because we don't know the concrete T here,
      // but we only need to access the 'at' method which BaseStyle provides.
      if (utility is BaseStyle) {
        // The 'at' method returns 'T', which is a subtype of BaseStyle<dynamic>,
        // and BaseStyle<dynamic> implements Styling. So the result is a Styling.
        return utility.at(breakpoint);
      }
      // If it's not a BaseStyle, it cannot have breakpoints applied via .at().
      // Log a warning in development mode if a non-BaseStyle utility is passed
      // to tablet/desktop where a breakpoint would be expected.
      // assert(false,
      //    'Warning: Utility of type ${utility.runtimeType} was passed to responsive tablet/desktop modifiers '
      //    'but does not support breakpoints via .at(). Utility: "$utility"');
      return utility; // Return the utility as is.
    }

    if (tablet != null) {
      responsiveStyles.addAll(
        tablet.map((u) => applyBreakpoint(u, Breakpoint.md)),
      );
    }

    if (desktop != null) {
      responsiveStyles.addAll(
        desktop.map((u) => applyBreakpoint(u, Breakpoint.lg)),
      );
    }

    return Container(
      children ?? (child != null ? [child] : null),
      tag: tag,
      style: responsiveStyles.isNotEmpty ? responsiveStyles : null,
      id: id,
      classes: classes,
      css: css,
      attributes: attributes,
      key: key,
    );
  }
}

<!-- END FILE: packages/deepyr/lib/src/elements/container.dart -->

<!-- BEGIN FILE: packages/deepyr/lib/src/elements/figure.dart -->
import 'package:jaspr/jaspr.dart' show Key, Styles;

import '../base/styling.dart';
import '../base/ui_component.dart';
import '../base/ui_component_attributes.dart';

/// Represents an HTML `<figure>` element, typically used to encapsulate media
/// like images, diagrams, or code snippets, optionally with a caption.
///
/// Styling is achieved by passing general utility classes (instances of [Styling])
/// via the `modifiers` property.
class Figure extends UiComponent {
  /// Creates a Figure component.
  ///
  /// - [children] or [child]: The content of the figure, usually an `img` tag and
  ///   optionally a `Figcaption` (not yet defined in this snippet).
  /// - [tag]: The HTML tag to use, defaults to 'figure'.
  /// - [styles]: A list of general [Styling] instances for styling.
  /// - Other parameters are inherited from [UiComponent].
  const Figure(
    super.children, {
    super.tag = 'figure',
    super.style,
    super.id,
    super.classes,
    super.css,
    super.attributes,
    super.child,
    super.key,
  });

  @override
  String get baseClass => '';

  @override
  void configureAttributes(UiComponentAttributes attributes) {
    super.configureAttributes(attributes);
  }

  @override
  Figure copyWith({
    String? id,
    String? classes,
    Styles? css,
    Map<String, String>? attributes,
    Key? key,
  }) {
    return Figure(
      children,
      tag: tag,
      style: style,
      id: id ?? this.id,
      classes: mergeClasses(this.classes, classes),
      css: css ?? this.css,
      attributes: attributes ?? userProvidedAttributes,
      child: child,
      key: key ?? this.key,
    );
  }

  // Previously, Figure had static padding modifiers like `Figure.px`.
  // These have been removed in favor of using general Spacing utilities, e.g.:
  // Figure([img(src:"")], modifiers: [Spacing.px(10), Spacing.pt(10)])
}

<!-- END FILE: packages/deepyr/lib/src/elements/figure.dart -->

<!-- BEGIN FILE: examples/deepyr_example/README.md -->
# deepyr_example

## Install Tailwind CSS and DaisyUI

1. Install Nodejs
  https://nodejs.org/en/download/

2. Install Tailwind CSS and DaisyUI
  npm install -D @tailwindcss/cli daisyui

> npm list tailwindcss daisyui
>
npm install -D tailwindcss@latest daisyui@latest

## Develop

npx @tailwindcss/cli -i ./web/styles.tw.css -o ./web/styles.css  -w
jaspr build
jaspr serve -v

<!-- END FILE: examples/deepyr_example/README.md -->

<!-- BEGIN FILE: examples/deepyr_example/CHANGELOG.md -->
## 1.0.0

- Initial version.

<!-- END FILE: examples/deepyr_example/CHANGELOG.md -->

<!-- BEGIN FILE: examples/deepyr_example/pubspec.yaml -->
name: deepyr_example
description: A new jaspr project.
version: 0.0.1
publish_to: none

environment:
  sdk: ">=3.8.0 <4.0.0"

resolution: workspace

dependencies:
  deepyr:
    path: ../../packages/deepyr
  jaspr: ^0.21.1
  jaspr_router: ^0.7.0
  universal_web: ^1.1.0

dev_dependencies:
  build_runner: ^2.4.15
  flutter_lints: ^6.0.0
  jaspr_builder: ^0.21.1
  jaspr_lints: ^0.5.1

  jaspr_web_compilers: ^4.1.1
  very_good_analysis: ^10.0.0

jaspr:
  mode: static
  uses-flutter: false

<!-- END FILE: examples/deepyr_example/pubspec.yaml -->

<!-- BEGIN FILE: examples/deepyr_example/lib/app.dart -->
import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart';
import 'package:jaspr_router/jaspr_router.dart';

import 'components/scroll_restorer.dart';
import 'docs_app.dart';
// Import all the page components
import 'pages/component_routes/accordion_page.dart';
import 'pages/component_routes/alert_page.dart';
import 'pages/component_routes/avatar_page.dart';
import 'pages/component_routes/badge_page.dart';
import 'pages/component_routes/breadcrumbs_page.dart';
import 'pages/component_routes/button_page.dart';
import 'pages/component_routes/card_page.dart';
import 'pages/component_routes/checkbox_page.dart';
import 'pages/component_routes/collapse_page.dart';
import 'pages/component_routes/diff_page.dart';
import 'pages/component_routes/divider_page.dart';
import 'pages/component_routes/drawer_page.dart';
import 'pages/component_routes/dropdown_page.dart';
import 'pages/component_routes/fieldset_page.dart';
import 'pages/component_routes/file_input_page.dart';
import 'pages/component_routes/footer_page.dart';
import 'pages/component_routes/hero_page.dart';
import 'pages/component_routes/icon_page.dart';
import 'pages/component_routes/indicator_page.dart';
import 'pages/component_routes/input_page.dart';
import 'pages/component_routes/join_page.dart';
import 'pages/component_routes/kbd_page.dart';
import 'pages/component_routes/label_page.dart';
import 'pages/component_routes/link_page.dart';
import 'pages/component_routes/loading_page.dart';
import 'pages/component_routes/menu_page.dart';
import 'pages/component_routes/modal_page.dart';
import 'pages/component_routes/navbar_page.dart';
import 'pages/component_routes/pagination_page.dart';
import 'pages/component_routes/progress_page.dart';
import 'pages/component_routes/radio_page.dart';
import 'pages/component_routes/range_page.dart';
import 'pages/component_routes/select_page.dart';
import 'pages/component_routes/skeleton_page.dart';
import 'pages/component_routes/swap_page.dart';
import 'pages/component_routes/tabs_page.dart';
import 'pages/component_routes/textarea_page.dart';
import 'pages/component_routes/theme_controller_page.dart';
import 'pages/component_routes/toggle_page.dart';
import 'pages/component_routes/tooltip_page.dart';
import 'pages/home_page.dart';
import 'pages/preview/validator_preview.dart';

/// The main application component that sets up routing and global state like the theme.
@client
class App extends StatefulComponent {
  const App({super.key});

  @override
  State<App> createState() => _AppState();
}

class _AppState extends State<App> {
  // The default theme for server-side rendering and first-time visitors.
  String _currentTheme = 'light';
  // State for the drawer
  bool _isDrawerOpen = false;

  @override
  void initState() {
    super.initState();
    // On the client, try to load the saved theme from local storage.
    if (kIsWeb) {
      final savedTheme = ThemeService.instance.loadSavedTheme();
      if (savedTheme != null) {
        _currentTheme = savedTheme;
      }
    }
  }

  void _changeTheme(String theme) {
    setState(() => _currentTheme = theme);
    if (kIsWeb) ThemeService.instance.saveTheme(theme);
  }

  // Callback to toggle the drawer state
  void _toggleDrawer(bool isOpen) {
    setState(() => _isDrawerOpen = isOpen);
  }

  // Callback specifically to close the drawer, used by navigation links
  void _closeDrawer() {
    if (_isDrawerOpen) {
      setState(() => _isDrawerOpen = false);
    }
  }

  @override
  Component build(BuildContext context) {
    // Use Document.html() to dynamically set the `data-theme` attribute on the
    // <html> element. This is how DaisyUI applies themes.
    return Component.fragment([
      Document.html(attributes: {'data-theme': _currentTheme}),

      Router(
        routes: [
          ShellRoute(
            builder: (context, state, child) {
              return RouteAwareScrollRestorer(
                child: DocsApp(
                  currentTheme: _currentTheme,
                  onThemeChanged: _changeTheme,
                  isDrawerOpen: _isDrawerOpen,
                  onDrawerToggled: _toggleDrawer,
                  onNavLinkClicked: _closeDrawer, // Pass the close callback
                  child: child,
                ),
              );
            },
            routes: [
              Route(path: '/', builder: (context, state) => const HomePage()),
              Route(path: '/components/accordion', builder: (context, state) => const AccordionPage()),
              Route(path: '/components/alert', builder: (context, state) => const AlertPage()),
              Route(path: '/components/avatar', builder: (context, state) => const AvatarPage()),
              Route(path: '/components/badge', builder: (context, state) => const BadgePage()),
              Route(
                path: '/components/breadcrumbs',
                builder: (context, state) => const BreadcrumbsPage(),
              ),
              Route(path: '/components/button', builder: (context, state) => const ButtonPage()),
              Route(path: '/components/card', builder: (context, state) => const CardPage()),
              Route(path: '/components/checkbox', builder: (context, state) => const CheckboxPage()),
              Route(path: '/components/collapse', builder: (context, state) => const CollapsePage()),
              Route(path: '/components/diff', builder: (context, state) => const DiffPage()),
              Route(path: '/components/divider', builder: (context, state) => const DividerPage()),
              Route(path: '/components/drawer', builder: (context, state) => const DrawerPage()),
              Route(path: '/components/dropdown', builder: (context, state) => const DropdownPage()),
              Route(path: '/components/fieldset', builder: (context, state) => const FieldsetPage()),
              Route(path: '/components/file-input', builder: (context, state) => const FileInputPage()),
              Route(path: '/components/footer', builder: (context, state) => const FooterPage()),
              Route(path: '/components/hero', builder: (context, state) => const HeroPage()),
              Route(path: '/components/icon', builder: (context, state) => const IconPage()),
              Route(path: '/components/indicator', builder: (context, state) => const IndicatorPage()),
              Route(path: '/components/input', builder: (context, state) => const InputPage()),
              Route(path: '/components/join', builder: (context, state) => const JoinPage()),
              Route(path: '/components/kbd', builder: (context, state) => const KbdPage()),
              Route(path: '/components/label', builder: (context, state) => const LabelPage()),
              Route(path: '/components/link', builder: (context, state) => const LinkPage()),
              Route(path: '/components/loading', builder: (context, state) => const LoadingPage()),
              Route(path: '/components/menu', builder: (context, state) => const MenuPage()),
              Route(path: '/components/modal', builder: (context, state) => const ModalPage()),
              Route(path: '/components/navbar', builder: (context, state) => const NavbarPage()),
              Route(path: '/components/pagination', builder: (context, state) => const PaginationPage()),
              Route(path: '/components/progress', builder: (context, state) => const ProgressPage()),
              Route(path: '/components/radio', builder: (context, state) => const RadioPage()),
              Route(path: '/components/range', builder: (context, state) => const RangePage()),
              Route(path: '/components/select', builder: (context, state) => const SelectPage()),
              Route(path: '/components/skeleton', builder: (context, state) => const SkeletonPage()),
              Route(path: '/components/swap', builder: (context, state) => const SwapPage()),
              Route(path: '/components/tabs', builder: (context, state) => const TabsPage()),
              Route(path: '/components/textarea', builder: (context, state) => const TextareaPage()),
              Route(path: '/components/theme-controller', builder: (context, state) => const ThemeControllerPage()),
              Route(path: '/components/toggle', builder: (context, state) => const TogglePage()),
              Route(path: '/components/tooltip', builder: (context, state) => const TooltipPage()),
              Route(path: '/components/validator', builder: (context, state) => const ValidatorPreview()),
            ],
          ),
        ],
      ),
    ]);
  }
}

<!-- END FILE: examples/deepyr_example/lib/app.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/components/component_preview.dart -->
import 'dart:async';

import 'package:deepyr/deepyr.dart'; // Assuming deepyr provides Button etc.
import 'package:jaspr/jaspr.dart';
import 'package:universal_web/js_interop.dart'; // For .toDart extension
import 'package:universal_web/web.dart'; // For window, console, etc.

// --- Prism.js JS-Interop ---

// Get the Prism object from the window, ensuring it's not null/undefined before use.
@JS('Prism')
external JSObject? get _prismObject;

// Get the highlightAll function from the Prism object.
@JS('Prism.highlightAll')
external JSFunction? get _prismHighlightAllFunction;

/// Type-safe wrapper for Prism.highlightAll().
/// Schedules highlighting after the current event loop tick to ensure DOM is updated.
void highlightCode() {
  if (!kIsWeb) {
    print('Skipping Prism highlighting: Not in a web environment.');
    return;
  }
  // Check for Prism object availability on the window.
  final prism = _prismObject;
  if (prism == null || prism.isUndefinedOrNull) {
    print('Prism object not found on window. Skipping highlighting.');
    return;
  }

  Future.delayed(Duration.zero, () {
    // Re-check Prism and its function inside the delayed future, as context might change.
    final currentPrism = _prismObject;
    final highlightFn = _prismHighlightAllFunction;

    if (currentPrism == null || currentPrism.isUndefinedOrNull) {
      print(
        'Prism object is null or undefined at time of execution. Cannot highlight.',
      );
      return;
    }
    if (highlightFn == null || highlightFn.isUndefinedOrNull) {
      print(
        'Prism.highlightAll function is null or undefined at time of execution. Cannot highlight.',
      );
      return;
    }

    try {
      // Call Prism.highlightAll() using the Prism object as `this` context.
      highlightFn.callAsFunction(currentPrism);
      print('Prism.highlightAll() called successfully.');
    } catch (e, s) {
      print('Error calling Prism.highlightAll: $e\n$s');
    }
  });
}

// --- ComponentPreview Component ---

/// Defines the layout direction for items within the preview area.
enum PreviewLayoutDirection {
  /// Items are laid out horizontally, wrapping if necessary. (Default)
  horizontal,

  /// Items are laid out vertically in a single column.
  vertical,
}

/// A reusable component for showcasing UI elements with interactive tabs
/// for live preview and corresponding code snippets, styled similarly to
/// DaisyUI's documentation components.
///
/// It uses radio buttons and CSS for tab switching and Prism.js for code highlighting.
class ComponentPreview extends StatefulComponent {
  const ComponentPreview({
    required this.title,
    required this.preview,
    required this.code,
    this.description,
    this.previewClasses,
    this.anchor,
    this.codeTabLabel = 'Dart',
    this.codeLanguage = 'dart',
    this.layoutDirection = PreviewLayoutDirection.horizontal,
    super.key,
  });

  /// The title displayed above the preview component.
  final String title;

  /// An optional description text displayed below the title.
  final String? description;

  /// The list of Jaspr components to render in the 'Preview' tab.
  final List<Component> preview;

  /// The code string to display in the code tab (e.g., Dart code).
  /// Ensure this code is pre-formatted with correct indentation.
  final String code;

  /// Optional CSS classes to completely override the default styling of the inner preview container div.
  /// If provided, you are responsible for all classes including "preview", padding, and layout.
  /// If null, default styles are applied based on [layoutDirection].
  final String? previewClasses;

  /// Optional anchor ID for linking directly to this preview section.
  /// If null, an ID is generated from the title.
  final String? anchor;

  /// The text label for the code tab (defaults to 'Dart').
  final String codeTabLabel;

  /// The language class for Prism.js (defaults to 'dart').
  final String codeLanguage;

  /// The layout direction for the previewed components. Defaults to horizontal.
  final PreviewLayoutDirection layoutDirection;

  @override
  State<ComponentPreview> createState() => ComponentPreviewState();
}

/// The state associated with the [ComponentPreview] component.
/// Manages the active tab state and copy-to-clipboard functionality.
class ComponentPreviewState extends State<ComponentPreview> {
  int _selectedTab = 0; // 0 for Preview, 1 for Code
  bool _showCopiedTooltip = false;
  late final String _radioGroupName; // Unique name for radio group per instance

  // Special CSS class to apply specific styles to the Dart code tab when active.
  static const String _dartCodeTabOverrideClass = 'deepyr-dart-code-tab-lifted-override';

  @override
  void initState() {
    super.initState();
    _radioGroupName = 'preview-tab-${component.hashCode}';
    // If the component somehow initializes with the code tab active (e.g., if _selectedTab could be a prop),
    // then highlighting would be needed here. Currently, it always starts at 0.
    // if (_selectedTab == 1 && kIsWeb) {
    //   highlightCode();
    // }
  }

  @override
  void didUpdateComponent(covariant ComponentPreview oldComponent) {
    super.didUpdateComponent(oldComponent);
    // If the code string itself has changed and the code tab is currently selected,
    // then re-trigger code highlighting.
    if (component.code != oldComponent.code && _selectedTab == 1 && kIsWeb) {
      highlightCode();
    }
  }

  /// Handles tab changes triggered by user interaction.
  void _handleTabChange(int index) {
    if (_selectedTab == index) return; // No change if clicking the already active tab

    setState(() {
      _selectedTab = index;
      // Trigger code highlighting only when switching *to* the code tab.
      // Ensure Prism is available and we are in a web environment.
      if (index == 1 && kIsWeb) {
        highlightCode();
      }
    });
  }

  /// Handles the click event on the copy button.
  /// Copies the [component.code] to the clipboard and shows a temporary "Copied!" tooltip.
  Future<void> _handleCopy() async {
    if (!kIsWeb) {
      print('Clipboard API not available outside of a web environment.');
      return;
    }
    try {
      await window.navigator.clipboard.writeText(component.code).toDart;
      if (!mounted) return; // Check if the component is still in the tree
      setState(() => _showCopiedTooltip = true);
      // Hide the tooltip after a short duration
      Future.delayed(const Duration(seconds: 2), () {
        if (mounted) {
          setState(() => _showCopiedTooltip = false);
        }
      });
    } catch (e, s) {
      // Log error if copying fails
      print('Failed to copy code to clipboard: $e\n$s');
    }
  }

  /// Generates a URL-friendly anchor ID from the component's title or uses the provided anchor.
  String get _anchorId =>
      component.anchor ??
      component.title
          .toLowerCase()
          .replaceAll(RegExp(r'\s+'), '-') // Replace spaces with hyphens
          .replaceAll(
            RegExp('[^a-z0-9-]'),
            '',
          ); // Remove non-alphanumeric characters except hyphens

  // SVG path data for the copy icon, matching DaisyUI documentation.
  static const String copyIconPath =
      'M 16 3 C 14.742188 3 13.847656 3.890625 13.40625 5 L 6 5 L 6 28 L 26 28 L 26 5 L 18.59375 5 C 18.152344 3.890625 17.257813 3 16 3 Z M 16 5 C 16.554688 5 17 5.445313 17 6 L 17 7 L 20 7 L 20 9 L 12 9 L 12 7 L 15 7 L 15 6 C 15 5.445313 15.445313 5 16 5 Z M 8 7 L 10 7 L 10 11 L 22 11 L 22 7 L 24 7 L 24 26 L 8 26 Z';
  // SVG path data for the anchor link icon, matching DaisyUI documentation.
  static const String anchorIconPath =
      'M216,148H172V108h44a12,12,0,0,0,0-24H172V40a12,12,0,0,0-24,0V84H108V40a12,12,0,0,0-24,0V84H40a12,12,0,0,0,0,24H84v40H40a12,12,0,0,0,0,24H84v44a12,12,0,0,0,24,0V172h40v44a12,12,0,0,0,24,0V172h44a12,12,0,0,0,0-24Zm-108,0V108h40v40Z';

  @css
  static final List<NestedStyleRule> styles = [
    // Apply a monospace font stack for code blocks.
    css('.component-preview .code-wrapper pre, .component-preview .code-wrapper code').styles(
      fontFamily: const FontFamily.list([
        FontFamily('Inconsolata'), // Preferred monospace font
        FontFamilies.monospace, // Fallback system monospace
      ]),
      fontWeight: FontWeight.w400, // Standard weight for code
    ),
    // This CSS rule overrides DaisyUI variables for the "Dart" code tab
    // when it's active and has the special override class. This is to ensure
    // the active code tab has a dark background consistent with the code theme.
    css('.tabs-lift > input.$_dartCodeTabOverrideClass:checked').styles(
      raw: {
        '--tab-bg': 'var(--color-neutral)', // Use neutral background for active code tab
        '--tab-border-color': 'var(--color-neutral)', // Match border to background
        'color': 'var(--color-neutral-content)', // Ensure text color is readable on neutral bg
      },
    ),
    // Styles for the ".preview" class itself, providing the dotted background.
    // This is applied by default to the inner preview container if `component.previewClasses` is not set.
    css('.preview').styles(
      raw: {
        'background-image': // Creates the repeating dot/grid pattern
            'repeating-linear-gradient(45deg, '
            'var(--color-base-100), '
            'var(--color-base-100) 13px, '
            'var(--color-base-300) 13px, '
            'var(--color-base-300) 14px)',
      },
    ),
  ];

  @override
  Component build(BuildContext context) {
    // Base classes for tab inputs.
    const tabBaseClasses = 'tab [--tab-padding:.75rem]'; // DaisyUI tab with custom padding.

    // Classes for the "Preview" tab input.
    const previewTabInputClasses = tabBaseClasses;

    // Classes for the "Code" (Dart) tab input, including the override for dark styling.
    const codeTabInputClasses = '$tabBaseClasses $_dartCodeTabOverrideClass';

    // Determine classes for the content area of the "Preview" tab.
    final previewContentClasses = [
      'tab-content', // DaisyUI class for tab content panels.
      'bg-base-100', // Standard light background.
      'border-base-300', // Standard border color.
      'rounded-b-box', // Rounded bottom corners.
      if (_selectedTab == 0)
        'rounded-tr-box', // Top-right rounding for "lifted" effect when active.
      if (_selectedTab == 0) '' else 'hidden', // Show only if active.
    ].join(' ');

    // Determine classes for the content area of the "Code" tab.
    final codeContentClasses = [
      'tab-content',
      'bg-neutral', // Dark background for code.
      'text-neutral-content', // Light text for readability on dark background.
      'border-neutral', // Border color matching the dark background.
      'rounded-b-box',
      if (_selectedTab == 1) 'rounded-tl-box', // Top-left rounding for "lifted" effect when active.
      if (_selectedTab == 1) '' else 'hidden', // Show only if active.
    ].join(' ');

    // Determine the classes for the inner div that wraps the previewed components.
    final String finalInnerPreviewDivClasses;
    if (component.previewClasses != null) {
      // If `previewClasses` is provided, the user takes full control.
      finalInnerPreviewDivClasses = component.previewClasses!;
    } else {
      // Otherwise, construct default classes based on `layoutDirection`.
      const baseStructure = 'preview p-6 min-h-32 overflow-x-auto';
      final String layoutSpecifics;
      if (component.layoutDirection == PreviewLayoutDirection.vertical) {
        layoutSpecifics = 'flex flex-col items-center gap-4'; // Vertical stacking
      } else {
        // Horizontal is the default
        layoutSpecifics = 'flex flex-wrap justify-center items-center gap-2'; // Horizontal wrapping
      }
      finalInnerPreviewDivClasses = '$baseStructure $layoutSpecifics';
    }

    return div(
      classes: 'component-preview not-prose text-base-content my-6 lg:my-12', // Outer wrapper
      id: _anchorId,
      [
        // Title and anchor link section
        div(classes: 'flex items-center gap-2 pb-3 text-sm font-bold', [
          a(
            href: '#$_anchorId', // Link to self for easy navigation
            classes:
                'bg-base-100 hover:bg-primary/10 text-base-content/50 hover:text-base-content border-primary/5 hover:border-primary/10 hover:shadow-base-200 inline-grid size-6 place-content-center rounded-sm border hover:shadow-sm no-underline',
            [
              svg(
                classes: 'size-3', // Icon size
                attributes: {
                  'fill': 'currentColor',
                  'width': '12',
                  'height': '12',
                  'viewBox': '0 0 256 256',
                  'xmlns': 'http://www.w3.org/2000/svg',
                },
                [path(d: anchorIconPath, [])], // Anchor icon
              ),
            ],
          ),
          h4(
            classes: 'component-preview-title mt-2 mb-1 text-lg font-semibold',
            [text(component.title)], // Component title
          ),
        ]),
        // Optional description
        if (component.description != null)
          p(
            classes: 'text-sm text-base-content/70 mb-4',
            [text(component.description!)],
          ),
        // Tabs container
        div(
          classes: 'tabs tabs-lift', // DaisyUI "lifted" tabs style
          attributes: {'role': 'tablist'}, // ARIA role for accessibility
          [
            // "Preview" Tab Input
            input(
              type: InputType.radio,
              classes: previewTabInputClasses,
              name: _radioGroupName, // Group for radio buttons
              attributes: {
                'role': 'tab',
                'aria-label': 'Preview', // Accessible label for the tab
                if (_selectedTab == 0) 'checked': '', // Mark as checked if active
              },
              events: {
                'change': (_) => _handleTabChange(0),
              }, // Handle tab selection
            ),
            // "Preview" Tab Content Panel
            div(classes: previewContentClasses, [
              div(
                classes: finalInnerPreviewDivClasses,
                component.preview,
              ),
            ]),
            // "Code" Tab Input
            input(
              type: InputType.radio,
              classes: codeTabInputClasses,
              name: _radioGroupName,
              attributes: {
                'role': 'tab',
                'aria-label': component.codeTabLabel, // Label for the code tab
                if (_selectedTab == 1) 'checked': '',
              },
              events: {'change': (_) => _handleTabChange(1)},
            ),
            // "Code" Tab Content Panel
            div(classes: codeContentClasses, [
              div(classes: 'grid *:[grid-area:1/1]', [
                // Grid for positioning copy button over code
                div(classes: 'code-wrapper overflow-x-auto p-4', [
                  pre(classes: 'language-${component.codeLanguage} !m-0 !p-0', [
                    // Prism.js language class
                    code([text(component.code)]), // The code string
                  ]),
                ]),
                // Copy button with tooltip
                div(
                  classes: 'tooltip tooltip-left tooltip-accent m-2 self-start justify-self-end',
                  attributes: {
                    'data-tip': _showCopiedTooltip ? 'Copied!' : 'Copy', // Tooltip text
                  },
                  [
                    Button(
                      [
                        // Copy icon
                        svg(
                          classes: 'h-5 w-5',
                          attributes: {
                            'xmlns': 'http://www.w3.org/2000/svg',
                            'viewBox': '0 0 32 32',
                            'fill': 'currentColor',
                          },
                          [path(d: copyIconPath, [])],
                        ),
                      ],
                      style: [
                        Button.square,
                        Button.sm,
                        Button.ghost,
                      ], // Button styling
                      attributes: {
                        'aria-label': 'Copy to clipboard',
                      }, // Accessibility
                      onClick: (_) async => _handleCopy(), // Click handler
                    ),
                  ],
                ),
              ]),
            ]),
          ],
        ),
      ],
    );
  }
}

<!-- END FILE: examples/deepyr_example/lib/components/component_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/components/docs_header.dart -->
import 'package:deepyr/deepyr.dart';
import 'package:jaspr/ui.dart' hide Container, Spacing;
import 'package:jaspr_router/jaspr_router.dart' as router;

/// The header component for the documentation site.
///
/// Renders a responsive `Navbar` containing:
/// - A mobile menu toggle button (hamburger icon) to control the main `Drawer`.
/// - The project title.
/// - A theme selection `Dropdown`.
/// - A link to the project's pub.dev package.
class DocsHeader extends StatelessComponent {
  const DocsHeader({
    required this.drawerId,
    required this.currentTheme,
    required this.onThemeChanged,
    super.key,
  });

  /// The unique ID of the `Drawer`'s control checkbox. This is required to
  /// link the mobile toggle button (`<label>`) to the drawer.
  final String drawerId;
  final String currentTheme;
  final ValueChanged<String> onThemeChanged;

  @override
  Component build(BuildContext context) {
    // --- Define list of selectable themes here ---
    final selectableThemes = DaisyTheme.predefined;

    return Navbar(
      style: [BgUtil.base100, Effects.shadowSm],
      classes: 'sticky top-0 z-30', // Makes the navbar stick to the top
      [
        NavbarStart([
          // Mobile drawer toggle button.
          Button(
            tag: 'label',
            attributes: {'for': drawerId},
            [Icon('menu')],
            style: [Button.ghost, Button.square],
            classes: 'lg:hidden',
          ),
          // Project Title link.
          router.Link(
            to: '/',
            children: [
              Join([
                Container(
                  [Image(source: Uri.parse('images/logo.png'), width: 32, height: 32)],
                  style: [Spacing.pr(2)],
                ),
                const Component.text('Deepyr'),
              ], classes: 'flex items-center'),
            ],
            styles: const Styles(
              raw: {
                'font-size': '1.25rem',
                'font-weight': 'bold',
                'margin-left': '0.5rem',
                'text-decoration': 'none',
              },
            ),
          ),
        ]),
        NavbarEnd([
          // Theme selection dropdown
          Dropdown(
            style: [Dropdown.end],
            trigger: Button(
              [Icon('palette'), Icon('arrow_drop_down')],
              style: [Button.ghost],
              attributes: {'aria-label': 'Select Theme'},
            ),
            content: DropdownContent(
              [
                Menu(
                  [
                    for (final theme in selectableThemes)
                      MenuItem(
                        [text(theme.value.capitalize())],
                        onClick: (_) => onThemeChanged(theme.value),
                        isActive: theme.value == currentTheme,
                      ),
                  ],
                  style: [
                    Menu.sm,
                    Size.w(48), // Set width on the menu itself
                  ],
                ),
              ],
              tag: 'ul',
              style: [
                DropdownContent.menu,
                Spacing.mt(4),
                Spacing.p(2),
                Size.maxH96,
                Layout.overflowYAuto,
                Effects.shadow,
                BgUtil.base100,
                Effects.roundedBox,
                Layout.z(50),
              ],
            ),
          ),

          // pub.dev link button with the custom Dart logo SVG.
          Button(
            tag: 'a',
            attributes: {
              'href': 'https://pub.dev/packages/deepyr',
              'target': '_blank',
              'aria-label': 'View on pub.dev',
            },
            [_dartPubIcon()],
            style: [Button.ghost, Button.square],
          ),
        ]),
      ],
    );
  }

  /// Renders the Dart logo SVG as a Jaspr component.
  Component _dartPubIcon() {
    return svg(
      [
        path(
          fill: const Color('#40C4FF'),
          d: 'M85.53,85.53v266.45c0,26.39,3.31,32.86,16.45,46.05L203.95,500h207.24v-88.82L85.53,85.53z',
          [],
        ),
        path(
          fill: const Color('#29B6F6'),
          d: 'M85.53,351.97c0,26.39,3.31,32.86,16.45,46.05l13.16,13.16h296.05L85.53,85.53V351.97z',
          [],
        ),
        path(
          fill: const Color('#01579B'),
          d: 'M85.53,85.53L6.58,250C3.76,255.98,0,266.38,0,273.03c0,14.36,6.32,29.06,16.45,39.47l85.53,85.53 c-13.14-13.19-16.45-19.67-16.45-46.05V85.53z',
          [],
        ),
        path(
          fill: const Color('#55C5F8'),
          d: 'M105.26,401.32c-13.14-13.19-16.45-19.67-16.45-46.05V88.82l-3.29-3.29v266.45 c0,26.39,3.31,32.86,16.45,46.05l13.16,13.16h0L105.26,401.32z',
          [],
        ),
        path(
          fill: const Color('#01579B'),
          d: 'M348.68,85.53H85.53l325.66,325.66H500V207.24L394.74,101.97C379.95,87.13,366.82,85.53,348.68,85.53z',
          [],
        ),
        path(
          fill: const Color('#40C4FF'),
          d: 'M394.74,101.97l-85.53-85.53C301.74,8.95,286.18,0,273.03,0c-11.31,0-22.41,2.26-29.6,6.58L85.53,85.53 h263.16C366.82,85.53,379.95,87.13,394.74,101.97z',
          [],
        ),
        polygon(
          fill: const Color('#075087'),
          points: '496.71,203.95 496.71,407.89 407.89,407.89 411.18,411.18 500,411.18 500,207.24',
          [],
        ),
        path(
          fill: const Color('#3379AE'),
          d: 'M394.74,101.97c-16.31-16.31-29.68-16.45-49.34-16.45H85.53l3.29,3.29h256.58 C355.22,88.82,379.99,87.17,394.74,101.97L394.74,101.97z',
          [],
        ),
      ],
      styles: const Styles(width: Unit.rem(1.2), height: Unit.rem(1.2)),
      viewBox: '0 0 500 500',
    );
  }
}

// Simple helper extension to capitalize strings.
extension StringExtension on String {
  String capitalize() {
    if (isEmpty) {
      return this;
    }
    return '${this[0].toUpperCase()}${substring(1)}';
  }
}

<!-- END FILE: examples/deepyr_example/lib/components/docs_header.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/components/docs_sidebar.dart -->
import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart' hide Spacing;
// Import jaspr_router with a prefix to resolve the 'Link' component ambiguity.
import 'package:jaspr_router/jaspr_router.dart' as router;

/// The sidebar component for the documentation site.
///
/// Renders a vertical `Menu` with navigation links to all the component
/// preview pages. The links are grouped by category using `MenuTitle`.
/// This component is crucial for the site's navigation, especially on mobile
/// where it resides within the slide-out drawer.
class DocsSidebar extends StatelessComponent {
  /// Creates the documentation sidebar.
  ///
  /// The [onNavLinkClicked] callback is essential for providing a good
  /// user experience on mobile, as it allows the sidebar to signal to the
  /// parent layout that the drawer should be closed after a navigation action.
  const DocsSidebar({
    required this.onNavLinkClicked,
    super.key,
  });

  /// A callback that is executed whenever a navigation link within the sidebar
  /// is clicked.
  ///
  /// This is typically used to close the navigation drawer on mobile devices
  /// after the user has selected a page.
  final VoidCallback onNavLinkClicked;

  /// Defines the static structure of the sidebar navigation.
  ///
  /// This declarative map makes it easy to add, remove, or reorder component
  /// links and their categories in the future without changing the rendering logic.
  /// Each entry in the map represents a category title, and its value is a list
  /// of navigation items, where each item has a display `name` and a `path`.
  static const Map<String, List<Map<String, String>>> _navStructure = {
    'Actions': [
      {'name': 'Button', 'path': '/components/button'},
      {'name': 'Dropdown', 'path': '/components/dropdown'},
      {'name': 'Modal', 'path': '/components/modal'},
      {'name': 'Swap', 'path': '/components/swap'},
    ],
    'Data Input': [
      {'name': 'Checkbox', 'path': '/components/checkbox'},
      {'name': 'Fieldset', 'path': '/components/fieldset'},
      {'name': 'File Input', 'path': '/components/file-input'},
      {'name': 'Label', 'path': '/components/label'},
      {'name': 'Radio', 'path': '/components/radio'},
      {'name': 'Range', 'path': '/components/range'},
      {'name': 'Select', 'path': '/components/select'},
      {'name': 'Input', 'path': '/components/input'},
      {'name': 'Textarea', 'path': '/components/textarea'},
      {'name': 'Toggle', 'path': '/components/toggle'},
      {'name': 'Validator', 'path': '/components/validator'},
    ],
    'Data Display': [
      {'name': 'Accordion', 'path': '/components/accordion'},
      {'name': 'Avatar', 'path': '/components/avatar'},
      {'name': 'Badge', 'path': '/components/badge'},
      {'name': 'Card', 'path': '/components/card'},
      {'name': 'Collapse', 'path': '/components/collapse'},
      {'name': 'Diff', 'path': '/components/diff'},
      {'name': 'Icon', 'path': '/components/icon'},
      {'name': 'Indicator', 'path': '/components/indicator'},
      {'name': 'Kbd', 'path': '/components/kbd'},
    ],
    'Layout': [
      {'name': 'Divider', 'path': '/components/divider'},
      // {'name': 'Drawer', 'path': '/components/drawer'},
      {'name': 'Footer', 'path': '/components/footer'},
      {'name': 'Hero', 'path': '/components/hero'},
      {'name': 'Join', 'path': '/components/join'},
    ],
    'Feedback': [
      {'name': 'Alert', 'path': '/components/alert'},
      {'name': 'Loading', 'path': '/components/loading'},
      {'name': 'Progress', 'path': '/components/progress'},
      {'name': 'Skeleton', 'path': '/components/skeleton'},
      {'name': 'Tooltip', 'path': '/components/tooltip'},
    ],
    'Navigation': [
      {'name': 'Breadcrumbs', 'path': '/components/breadcrumbs'},
      {'name': 'Link', 'path': '/components/link'},
      {'name': 'Menu', 'path': '/components/menu'},
      {'name': 'Navbar', 'path': '/components/navbar'},
      {'name': 'Pagination', 'path': '/components/pagination'},
      {'name': 'Tabs', 'path': '/components/tabs'},
    ],
    // 'Utility': [
    //   {'name': 'Theme Controller', 'path': '/components/theme-controller'},
    // ]
  };

  @override
  Component build(BuildContext context) {
    final currentRoute = router.RouteState.of(context);

    return Menu(
      style: [Size.w(80), Spacing.p(4)],
      classes: 'min-h-full bg-base-200 text-base-content',
      [
        for (final category in _navStructure.entries)
          li([
            MenuTitle([
              Component.text(category.key),
            ]),
            ul([
              for (final item in category.value)
                // *** CORRECTED USAGE OF MenuItem ***
                MenuItem(
                  // 1. Pass the content (the Text widget) directly as a child.
                  [Component.text(item['name']!)],
                  // 2. Use the `href` property for the navigation path.
                  href: item['path'],
                  // 3. Use the `isActive` property to handle the active state.
                  isActive: currentRoute.fullpath == item['path']!,
                  // 4. Use the `onClick` property to handle the interaction logic.
                  onClick: (event) {
                    // Prevent the default browser page load for the anchor tag.
                    event.preventDefault();
                    // Perform client-side navigation using jaspr_router.
                    router.Router.of(context).push(item['path']!);
                    // Call the callback to close the drawer on mobile.
                    onNavLinkClicked();
                  },
                ),
            ]),
          ]),
      ],
    );
  }
}

<!-- END FILE: examples/deepyr_example/lib/components/docs_sidebar.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/components/scroll_restorer.dart -->
import 'package:jaspr/jaspr.dart';
import 'package:jaspr_router/jaspr_router.dart';
import 'package:universal_web/js_interop.dart';
import 'package:universal_web/web.dart';

/// A stateful component that listens for route changes and automatically
/// scrolls the window to the top (0, 0) after a navigation occurs.
///
/// This component is essential for a good user experience in Single Page Apps,
/// ensuring that users start at the top of a new page instead of maintaining
/// the scroll position of the previous one.
class RouteAwareScrollRestorer extends StatefulComponent {
  const RouteAwareScrollRestorer({required this.child, super.key});

  final Component child;

  @override
  State<RouteAwareScrollRestorer> createState() => _RouteAwareScrollRestorerState();
}

class _RouteAwareScrollRestorerState extends State<RouteAwareScrollRestorer> {
  // Store the previous URI to detect when it changes.
  String? _previousUri;

  @override
  Component build(BuildContext context) {
    final currentUri = RouteState.of(context).fullpath;
    // Compare the current URI with the one from the last build.
    if (_previousUri != null && _previousUri != currentUri) {
      // If they are different, a navigation has occurred.
      // We schedule the scroll reset to happen after the new content has been rendered.
      if (kIsWeb) {
        Future.delayed(Duration.zero, () {
          window.scrollTo(0.toJS, 0);
        });
      }
    }

    // Update the stored URI for the next comparison.
    _previousUri = currentUri;

    // Render the child component passed in.
    return component.child;
  }
}

<!-- END FILE: examples/deepyr_example/lib/components/scroll_restorer.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/docs_app.dart -->
import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart';

import 'components/docs_header.dart';
import 'components/docs_sidebar.dart';

/// The root layout component for the documentation website.
///
/// This stateless component acts as the main "shell" for the application,
/// orchestrating the responsive layout using a `Drawer`. It receives the main
/// page content as its `child` parameter from a `ShellRoute`.
class DocsApp extends StatelessComponent {
  const DocsApp({
    required this.child,
    required this.currentTheme,
    required this.onThemeChanged,
    required this.isDrawerOpen,
    required this.onDrawerToggled,
    required this.onNavLinkClicked,
    super.key,
  });

  /// The main content of the current page, provided by the router.
  final Component child;

  /// The name of the currently active theme.
  final String currentTheme;

  /// A callback to change the active theme.
  final ValueChanged<String> onThemeChanged;

  /// Whether the navigation drawer is currently open (for mobile).
  final bool isDrawerOpen;

  /// A callback to toggle the drawer open/closed state.
  final ValueChanged<bool> onDrawerToggled;

  /// A callback invoked when a navigation link in the sidebar is clicked.
  final VoidCallback onNavLinkClicked;

  static const String drawerId = 'main-navigation-drawer';

  @override
  Component build(BuildContext context) {
    /// The `Drawer` component is the core of our responsive layout.
    ///
    /// It is controlled by a hidden checkbox. The `lg:drawer-open` class makes
    /// the drawer permanently visible on large screens, while it remains a
    /// toggleable drawer on smaller screens.
    return Drawer(
      drawerId: drawerId,
      classes: 'lg:drawer-open',
      isOpen: isDrawerOpen,
      onToggle: onDrawerToggled,
      key: ValueKey(isDrawerOpen),

      side: DrawerSide(
        menuContent: DocsSidebar(onNavLinkClicked: onNavLinkClicked),
        classes: 'z-40',
      ),
      content: DrawerContent([
        // Pass the theme data down to the header.
        DocsHeader(
          drawerId: drawerId,
          currentTheme: currentTheme,
          onThemeChanged: onThemeChanged,
        ),
        main_([
          child,
        ], classes: 'p-4 md:p-6 lg:p-8 bg-base-100'),
      ]),
    );
  }
}

<!-- END FILE: examples/deepyr_example/lib/docs_app.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/jaspr_options.dart -->
// dart format off
// ignore_for_file: type=lint

// GENERATED FILE, DO NOT MODIFY
// Generated with jaspr_builder

import 'package:jaspr/jaspr.dart';
import 'package:deepyr/src/components/label/label.dart' as prefix0;
import 'package:deepyr_example/components/component_preview.dart' as prefix1;
import 'package:deepyr_example/app.dart' as prefix2;

/// Default [JasprOptions] for use with your jaspr project.
///
/// Use this to initialize jaspr **before** calling [runApp].
///
/// Example:
/// ```dart
/// import 'jaspr_options.dart';
///
/// void main() {
///   Jaspr.initializeApp(
///     options: defaultJasprOptions,
///   );
///
///   runApp(...);
/// }
/// ```
JasprOptions get defaultJasprOptions => JasprOptions(
  clients: {prefix2.App: ClientTarget<prefix2.App>('app')},
  styles: () => [
    ...prefix0.Label.styles,
    ...prefix1.ComponentPreviewState.styles,
  ],
);

<!-- END FILE: examples/deepyr_example/lib/jaspr_options.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/main.dart -->
// The entrypoint for the **server** environment.
//
// The [main] method will only be executed on the server during pre-rendering.
// To run code on the client, use the @client annotation.

// Server-specific jaspr import.
import 'package:jaspr/server.dart';

// Imports the [App] component.
import 'app.dart';
// This file is generated automatically by Jaspr, do not remove or edit.
import 'jaspr_options.dart';

void main() {
  // Initializes the server environment with the generated default options.
  Jaspr.initializeApp(options: defaultJasprOptions);

  // Starts the app.
  //
  // [Document] renders the root document structure (<html>, <head> and <body>)
  // with the provided parameters and components.
  runApp(
    Document(
      title: 'Deepyr Documentation',
      styles: <StyleRule>[
        // Heading
        css.import('https://fonts.googleapis.com/css2?family=Manrope:wght@200..800&display=swap'),
        // Body
        css.import('https://fonts.googleapis.com/css2?family=Lexend:wght@100..900&display=swap'),
        // Code
        css.import(
            'https://fonts.googleapis.com/css2?family=Inconsolata:wght@200..900&display=swap'),
        // Icons
        css.import(
            'https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:wght@100..700'),
        // Each style rule takes a valid css selector and a set of styles.
        // Styles are defined using type-safe css bindings and can be freely chained and nested.
        css('html, body').styles(
          width: 100.percent,
          minHeight: 100.vh,
          padding: Padding.zero,
          margin: Margin.zero,
          fontFamily:
              const FontFamily.list(<FontFamily>[FontFamily('Lexend'), FontFamilies.sansSerif]),
          // overflow: Overflow.hidden,
        ),
        css('h1, h2, h3, h4, h5, h6').styles(
          margin: Margin.unset, //
          fontFamily:
              const FontFamily.list(<FontFamily>[FontFamily('Manrope'), FontFamilies.sansSerif]),
        ),
      ],
      head: <Component>[
        // The generated flutter manifest and bootstrap script.
        // link(rel: 'manifest', href: 'manifest.json'),
        link(href: 'styles.css', rel: 'stylesheet'),
        // favicon
        link(rel: 'icon', type: 'image/x-icon', href: 'favicon.ico'),
        // prism.js for code highlighting
        link(rel: 'stylesheet', href: 'css/prism-material-dark.css'),
        // script(src: 'js/prism.js', async: true, <Component>[]),
        script(src: 'js/prism.js', defer: true), // Using defer is often better than async for Prism
      ],
      body: const App(),
    ),
  );
}

<!-- END FILE: examples/deepyr_example/lib/main.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/accordion_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/accordion_preview.dart';

class AccordionPage extends StatelessComponent {
  const AccordionPage({super.key});

  @override
  Component build(BuildContext context) {
    return const AccordionPreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/accordion_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/alert_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/alert_preview.dart';

/// The page that showcases the `Alert` component.
///
/// This is a simple wrapper component that renders the `AlertPreview`,
/// which contains all the interactive examples and code snippets.
class AlertPage extends StatelessComponent {
  const AlertPage({super.key});

  @override
  Component build(BuildContext context) {
    return const AlertPreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/alert_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/avatar_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/avatar_preview.dart';

/// The page that showcases the `Avatar` component.
///
/// This is a simple wrapper component that renders the `AvatarPreview`,
/// which contains all the interactive examples and code snippets.
class AvatarPage extends StatelessComponent {
  const AvatarPage({super.key});

  @override
  Component build(BuildContext context) {
    return const AvatarPreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/avatar_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/badge_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/badge_preview.dart';

/// The page that showcases the `Badge` component.
///
/// This is a simple wrapper component that renders the `BadgePreview`,
/// which contains all the interactive examples and code snippets.
class BadgePage extends StatelessComponent {
  const BadgePage({super.key});

  @override
  Component build(BuildContext context) {
    return const BadgePreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/badge_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/breadcrumbs_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/breadcrumbs_preview.dart';

/// The page that showcases the `Breadcrumbs` component.
///
/// This is a simple wrapper component that renders the `BreadcrumbsPreview`,
/// which contains all the interactive examples and code snippets.
class BreadcrumbsPage extends StatelessComponent {
  const BreadcrumbsPage({super.key});

  @override
  Component build(BuildContext context) {
    return const BreadcrumbsPreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/breadcrumbs_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/button_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/button_preview.dart';

/// The page that showcases the `Button` component.
///
/// This is a simple wrapper component that renders the `ButtonPreview`,
/// which contains all the interactive examples and code snippets.
class ButtonPage extends StatelessComponent {
  const ButtonPage({super.key});

  @override
  Component build(BuildContext context) {
    return const ButtonPreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/button_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/card_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/card_preview.dart';

/// The page that showcases the `Card` component.
///
/// This is a simple wrapper component that renders the `CardPreview`,
/// which contains all the interactive examples and code snippets.
class CardPage extends StatelessComponent {
  const CardPage({super.key});

  @override
  Component build(BuildContext context) {
    return const CardPreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/card_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/checkbox_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/checkbox_preview.dart';

/// The page that showcases the `Checkbox` component.
///
/// This is a simple wrapper component that renders the `CheckboxPreview`,
/// which contains all the interactive examples and code snippets.
class CheckboxPage extends StatelessComponent {
  const CheckboxPage({super.key});

  @override
  Component build(BuildContext context) {
    return const CheckboxPreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/checkbox_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/collapse_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/collapse_preview.dart';

class CollapsePage extends StatelessComponent {
  const CollapsePage({super.key});

  @override
  Component build(BuildContext context) {
    return const CollapsePreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/collapse_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/diff_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/diff_preview.dart';

class DiffPage extends StatelessComponent {
  const DiffPage({super.key});

  @override
  Component build(BuildContext context) {
    return const DiffPreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/diff_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/divider_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/divider_preview.dart';

/// The page that showcases the `Divider` component.
///
/// This is a simple wrapper component that renders the `DividerPreview`,
/// which contains all the interactive examples and code snippets.
class DividerPage extends StatelessComponent {
  const DividerPage({super.key});

  @override
  Component build(BuildContext context) {
    return const DividerPreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/divider_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/drawer_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/drawer_preview.dart';

class DrawerPage extends StatelessComponent {
  const DrawerPage({super.key});

  @override
  Component build(BuildContext context) {
    return const DrawerPreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/drawer_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/dropdown_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/dropdown_preview.dart';

class DropdownPage extends StatelessComponent {
  const DropdownPage({super.key});

  @override
  Component build(BuildContext context) {
    return const DropdownPreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/dropdown_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/fieldset_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/fieldset_preview.dart';

class FieldsetPage extends StatelessComponent {
  const FieldsetPage({super.key});

  @override
  Component build(BuildContext context) {
    return const FieldsetPreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/fieldset_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/file_input_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/file_input_preview.dart';

class FileInputPage extends StatelessComponent {
  const FileInputPage({super.key});

  @override
  Component build(BuildContext context) {
    return const FileInputPreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/file_input_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/footer_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/footer_preview.dart';

/// The page that showcases the `Footer` component.
///
/// This is a simple wrapper component that renders the `FooterPreview`,
/// which contains all the interactive examples and code snippets.
class FooterPage extends StatelessComponent {
  const FooterPage({super.key});

  @override
  Component build(BuildContext context) {
    return const FooterPreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/footer_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/hero_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/hero_preview.dart';

/// The page that showcases the `Hero` component.
///
/// This is a simple wrapper component that renders the `HeroPreview`,
/// which contains all the interactive examples and code snippets.
class HeroPage extends StatelessComponent {
  const HeroPage({super.key});

  @override
  Component build(BuildContext context) {
    return const HeroPreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/hero_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/icon_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/icon_preview.dart';

class IconPage extends StatelessComponent {
  const IconPage({super.key});

  @override
  Component build(BuildContext context) {
    return const IconPreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/icon_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/indicator_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/indicator_preview.dart';

class IndicatorPage extends StatelessComponent {
  const IndicatorPage({super.key});

  @override
  Component build(BuildContext context) {
    return const IndicatorPreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/indicator_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/input_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/input_preview.dart';

/// The page that showcases the `Input` component.
///
/// This is a simple wrapper component that renders the `InputPreview`,
/// which contains all the interactive examples and code snippets.
class InputPage extends StatelessComponent {
  const InputPage({super.key});

  @override
  Component build(BuildContext context) {
    return const InputPreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/input_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/join_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/join_preview.dart';

class JoinPage extends StatelessComponent {
  const JoinPage({super.key});

  @override
  Component build(BuildContext context) {
    return const JoinPreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/join_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/kbd_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/kbd_preview.dart';

class KbdPage extends StatelessComponent {
  const KbdPage({super.key});

  @override
  Component build(BuildContext context) {
    return const KbdPreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/kbd_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/label_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/label_preview.dart';

class LabelPage extends StatelessComponent {
  const LabelPage({super.key});

  @override
  Component build(BuildContext context) {
    return const LabelPreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/label_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/link_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/link_preview.dart';

/// The page that showcases the `Link` component.
///
/// This is a simple wrapper component that renders the `LinkPreview`,
/// which contains all the interactive examples and code snippets.
class LinkPage extends StatelessComponent {
  const LinkPage({super.key});

  @override
  Component build(BuildContext context) {
    return const LinkPreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/link_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/loading_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/loading_preview.dart';

/// The page that showcases the `Loading` component.
///
/// This is a simple wrapper component that renders the `LoadingPreview`,
/// which contains all the interactive examples and code snippets.
class LoadingPage extends StatelessComponent {
  const LoadingPage({super.key});

  @override
  Component build(BuildContext context) {
    return const LoadingPreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/loading_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/menu_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/menu_preview.dart';

/// The page that showcases the `Menu` component.
///
/// This is a simple wrapper component that renders the `MenuPreview`,
/// which contains all the interactive examples and code snippets.
class MenuPage extends StatelessComponent {
  const MenuPage({super.key});

  @override
  Component build(BuildContext context) {
    return const MenuPreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/menu_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/modal_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/modal_preview.dart';

class ModalPage extends StatelessComponent {
  const ModalPage({super.key});

  @override
  Component build(BuildContext context) {
    return const ModalPreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/modal_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/navbar_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/navbar_preview.dart';

/// The page that showcases the `Navbar` component.
///
/// This is a simple wrapper component that renders the `NavbarPreview`,
/// which contains all the interactive examples and code snippets.
class NavbarPage extends StatelessComponent {
  const NavbarPage({super.key});

  @override
  Component build(BuildContext context) {
    return const NavbarPreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/navbar_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/pagination_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/pagination_preview.dart';

class PaginationPage extends StatelessComponent {
  const PaginationPage({super.key});

  @override
  Component build(BuildContext context) {
    return const PaginationPreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/pagination_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/progress_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/progress_preview.dart';

/// The page that showcases the `Progress` component.
///
/// This is a simple wrapper component that renders the `ProgressPreview`,
/// which contains all the interactive examples and code snippets.
class ProgressPage extends StatelessComponent {
  const ProgressPage({super.key});

  @override
  Component build(BuildContext context) {
    return const ProgressPreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/progress_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/radio_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/radio_preview.dart';

/// The page that showcases the `Radio` component.
///
/// This is a simple wrapper component that renders the `RadioPreview`,
/// which contains all the interactive examples and code snippets.
class RadioPage extends StatelessComponent {
  const RadioPage({super.key});

  @override
  Component build(BuildContext context) {
    return const RadioPreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/radio_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/range_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/range_preview.dart';

class RangePage extends StatelessComponent {
  const RangePage({super.key});

  @override
  Component build(BuildContext context) {
    return const RangePreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/range_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/select_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/select_preview.dart';

/// The page that showcases the `Select` component.
///
/// This is a simple wrapper component that renders the `SelectPreview`,
/// which contains all the interactive examples and code snippets.
class SelectPage extends StatelessComponent {
  const SelectPage({super.key});

  @override
  Component build(BuildContext context) {
    return const SelectPreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/select_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/skeleton_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/skeleton_preview.dart';

/// The page that showcases the `Skeleton` component.
///
/// This is a simple wrapper component that renders the `SkeletonPreview`,
/// which contains all the interactive examples and code snippets.
class SkeletonPage extends StatelessComponent {
  const SkeletonPage({super.key});

  @override
  Component build(BuildContext context) {
    return const SkeletonPreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/skeleton_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/swap_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/swap_preview.dart';

class SwapPage extends StatelessComponent {
  const SwapPage({super.key});

  @override
  Component build(BuildContext context) {
    return const SwapPreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/swap_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/tabs_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/tab_preview.dart';

class TabsPage extends StatelessComponent {
  const TabsPage({super.key});

  @override
  Component build(BuildContext context) {
    return const TabsPreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/tabs_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/textarea_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/textarea_preview.dart';

/// The page that showcases the `Textarea` component.
///
/// This is a simple wrapper component that renders the `TextareaPreview`,
/// which contains all the interactive examples and code snippets.
class TextareaPage extends StatelessComponent {
  const TextareaPage({super.key});

  @override
  Component build(BuildContext context) {
    return const TextareaPreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/textarea_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/theme_controller_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/theme_controller_preview.dart';

class ThemeControllerPage extends StatelessComponent {
  const ThemeControllerPage({super.key});

  @override
  Component build(BuildContext context) {
    return const ThemeControllerPreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/theme_controller_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/toggle_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/toggle_preview.dart';

/// The page that showcases the `Toggle` component.
///
/// This is a simple wrapper component that renders the `TogglePreview`,
/// which contains all the interactive examples and code snippets.
class TogglePage extends StatelessComponent {
  const TogglePage({super.key});

  @override
  Component build(BuildContext context) {
    return const TogglePreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/toggle_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/tooltip_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/tooltip_preview.dart';

/// The page that showcases the `Tooltip` component.
///
/// This is a simple wrapper component that renders the `TooltipPreview`,
/// which contains all the interactive examples and code snippets.
class TooltipPage extends StatelessComponent {
  const TooltipPage({super.key});

  @override
  Component build(BuildContext context) {
    return const TooltipPreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/tooltip_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/component_routes/validator_page.dart -->
import 'package:jaspr/jaspr.dart';

import '../preview/validator_preview.dart';

/// The page that showcases the `Validator` component.
///
/// This is a simple wrapper component that renders the `ValidatorPreview`,
/// which contains all the interactive examples and code snippets.
class ValidatorPage extends StatelessComponent {
  const ValidatorPage({super.key});

  @override
  Component build(BuildContext context) {
    return const ValidatorPreview();
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/component_routes/validator_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/home.dart -->
import 'package:jaspr/jaspr.dart';

import 'preview/button_preview.dart';
import 'preview/checkbox_preview.dart';
import 'preview/link_preview.dart';
import 'preview/progress_preview.dart';
import 'preview/radio_preview.dart';
import 'preview/select_preview.dart';
import 'preview/textarea_preview.dart';
import 'preview/toggle_preview.dart';

// By using the @client annotation this component will be automatically compiled to javascript and mounted
// on the client. Therefore:
// - this file and any imported file must be compilable for both server and client environments.
// - this component and any child components will be built once on the server during pre-rendering and then
//   again on the client during normal rendering.
@client
class HomePage extends StatefulComponent {
  const HomePage({super.key});

  @override
  State<HomePage> createState() => HomeState();
}

class HomeState extends State<HomePage> {
  @override
  void initState() {
    super.initState();
    // Run code depending on the rendering environment.
    if (kIsWeb) {
      print('Hello client');
      // When using @client components there is no default `main()` function on the client where you would normally
      // run any client-side initialization logic. Instead you can put it here, considering this component is only
      // mounted once at the root of your client-side component tree.
    } else {
      print('Hello server');
    }
  }

  // Defines the css styles for elements of this component.
  //
  // By using the @css annotation, these will be rendered automatically to css inside the <head> of your page.
  // Must be a variable or getter of type [List<StyleRule>].
  @css
  static final List<NestedStyleRule> styles = [
    css('.preview').styles(
      raw: {
        // 'background-color': 'var(--color-base-100)',
        'background-image':
            'repeating-linear-gradient(45deg, '
            'var(--color-base-100), '
            'var(--color-base-100) 13px, '
            'var(--color-base-300) 13px, '
            'var(--color-base-300) 14px)',
      },
    ),
  ];

  @override
  Component build(BuildContext context) {
    // return div(classes: 'max-w-5xl mx-auto px-4', [
    //   // Variable Schriftdicken für Manrope
    //   h1(classes: 'text-5xl mb-4', [text('Hauptüberschrift')]),
    //   h2(classes: 'text-4xl mb-3', [text('Untertitel')]),
    //   h3(classes: 'text-3xl mb-3', [text('Untertitel')]),
    //   h5(classes: 'text-2xl mb-3', [text('Untertitel abcdefghijklmnopqrstuvwxyz')]),

    //   // Variable Schriftdicken für Lexend
    //   p(classes: 'mb-2', [text('Regulärer Text in Lexend. abcdefghijklmnopqrstuvwxyz')]),
    //   p(classes: 'font-light', [text('Leichterer Text in Lexend.')]),
    // ]);

    // return const DropdownPreview();
    // return const BadgePreview();
    // return const ButtonPreview();
    // return const CardPreview();
    // return const DiffPreview();
    // return const DrawerPreview();
    // return const IconPreview();
    // return const TabsPreview();
    // return const NavbarPreview();
    // return const MenuPreview();
    // return const ModalPreview();
    // return const SwapPreview();
    // return const ThemeControllerPreview();
    // return const AccordionPreview();
    // return const CollapsePreview();
    // return const KbdPreview();
    // return const JoinPreview();
    // return const PaginationPreview();

    return div(classes: 'max-w-5xl mx-auto px-4 pt-8 min-h-screen', [
      // Added min-h-screen
      h1(classes: 'text-5xl font-bold mb-4 text-center', [text('Jaspr UI Library Concept')]),
      p(classes: 'text-lg text-center text-base-content/70 mb-8', [
        text('Exploring a type-safe and fluent API for building UIs with DaisyUI in Jaspr.'),
      ]),

      // Render the new, working teaser component
      // const ProjectTeaserPreview(),
      const ButtonPreview(),
      const CheckboxPreview(),
      const RadioPreview(),
      const TogglePreview(),
      const TextareaPreview(),
      const SelectPreview(),
      const ProgressPreview(),
      const LinkPreview(),
    ]);
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/home.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/home_page.dart -->
import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart' hide Spacing;
import 'package:jaspr_router/jaspr_router.dart' as router;

/// The content for the documentation site's home page.
///
/// This component serves as the landing page, providing a welcome message,
/// a brief project description, and a call-to-action. It is built exclusively
/// using the `deepyr` component model, with `Container` for layout and `deepyr`
/// style utilities for all styling.
class HomePage extends StatelessComponent {
  const HomePage({super.key});

  @override
  Component build(BuildContext context) {
    // The root of the page is a `deepyr` `Container`, which accepts a
    // type-safe list of style modifiers for layout and spacing.
    return Container(
      style: [
        Layout.flex,
        Layout.flexCol,
        Alignment.itemsCenter,
        Spacing.py(16),
        Spacing.px(4),
      ],
      [
        // For semantic HTML elements like `h1`, we use the Jaspr primitive.
        // However, we style it using a list of `deepyr` utilities converted
        // into a CSS class string using the `.toClasses()` extension.
        h1(
          classes: [
            TextUtil.xl5,
            TextUtil.bold,
            TextUtil.center,
          ].toClasses(),
          [text('Deepyr UI Components')],
        ),

        // The same pattern is applied to the paragraph element.
        p(
          classes: '${[
            TextUtil.lg,
            TextUtil.center,
            Size.maxW3xl, // Sizing utility for max-width
            Spacing.mt(4),
          ].toClasses()} text-base-content/70',
          [
            text(
                'A type-safe and fluent Dart implementation of DaisyUI components for Jaspr, providing a beautiful API for building web apps with Tailwind CSS.')
          ],
        ),

        // A `deepyr` `Container` is used here to apply margin.
        Container(
          style: [Spacing.mt(10)],
          [
            // This composition is a key pattern: `router.Link` provides the
            // navigation functionality, while the `deepyr` `Button` nested
            // inside provides the visual styling.
            router.Link(
              to: '/components/button',
              children: [
                Button(
                  [
                    text('Get Started'),
                    Icon('arrow_forward'),
                  ],
                  style: [Button.primary, Button.lg],
                ),
              ],
            )
          ],
        )
      ],
    );
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/home_page.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/accordion_preview.dart -->
/// This file provides interactive examples for the Accordion component from the `deepyr` library.
/// It demonstrates the core functionality, different icon styles, and how to use the
/// Accordion within a "join" container for a seamless visual appearance.
library;

import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart';

import '../../components/component_preview.dart';

/// A component that renders a collection of [ComponentPreview] widgets
/// to demonstrate the functionality and styling of the `deepyr` [Accordion] component.
class AccordionPreview extends StatelessComponent {
  const AccordionPreview({super.key});

  @override
  Component build(BuildContext context) {
    return div(classes: 'max-w-5xl mx-auto px-4 space-y-12', [
      // ~Accordion using radio inputs
      ComponentPreview(
        title: 'Accordion using radio inputs',
        description: 'Only one item can be open at a time.',
        preview: [
          Accordion(
            [
              AccordionItem(
                name: '', // This name is ignored and managed by Accordion
                initiallyOpen: true,
                title: text('How do I create an account?'),
                content: text(
                  'Click the "Sign Up" button in the top right corner and follow the registration process.',
                ),
                style: [], // No icon modifier
                classes: 'bg-base-100 border border-base-300',
              ),
              AccordionItem(
                name: '',
                title: text('I forgot my password. What should I do?'),
                content: text(
                  'Click on "Forgot Password" on the login page and follow the instructions sent to your email.',
                ),
                classes: 'bg-base-100 border border-base-300',
              ),
              AccordionItem(
                name: '',
                title: text('How do I update my profile information?'),
                content: text(
                  'Go to "My Account" settings and select "Edit Profile" to make changes.',
                ),
                classes: 'bg-base-100 border border-base-300',
              ),
            ],
          ),
        ],
        code: '''
// The Accordion component automatically manages the 'name' attribute for its children.
Accordion(
  [
    AccordionItem(
      initiallyOpen: true,
      title: text('How do I create an account?'),
      content: text('...'),
      classes: 'bg-base-100 border border-base-300',
    ),
    AccordionItem(
      title: text('I forgot my password. What should I do?'),
      content: text('...'),
      classes: 'bg-base-100 border border-base-300',
    ),
    AccordionItem(
      title: text('How do I update my profile information?'),
      content: text('...'),
      classes: 'bg-base-100 border border-base-300',
    ),
  ],
)
''',
      ),

      // ~Accordion with arrow icon
      ComponentPreview(
        title: 'Accordion with arrow icon',
        preview: [
          Accordion(
            name: 'my-accordion-2', // You can provide an explicit name
            [
              AccordionItem(
                name: '', // Will be overridden
                initiallyOpen: true,
                title: text('How do I create an account?'),
                content: text(
                  'Click the "Sign Up" button in the top right corner and follow the registration process.',
                ),
                style: [AccordionItem.arrow],
                classes: 'bg-base-100 border border-base-300',
              ),
              AccordionItem(
                name: '',
                title: text('I forgot my password. What should I do?'),
                content: text(
                  'Click on "Forgot Password" on the login page and follow the instructions sent to your email.',
                ),
                style: [AccordionItem.arrow],
                classes: 'bg-base-100 border border-base-300',
              ),
              AccordionItem(
                name: '',
                title: text('How do I update my profile information?'),
                content: text(
                  'Go to "My Account" settings and select "Edit Profile" to make changes.',
                ),
                style: [AccordionItem.arrow],
                classes: 'bg-base-100 border border-base-300',
              ),
            ],
          ),
        ],
        code: '''
Accordion(
  name: 'my-accordion-2', // Providing a specific name for the group
  [
    AccordionItem(
      initiallyOpen: true,
      title: text('How do I create an account?'),
      content: text('...'),
      style: [AccordionItem.arrow], // Use the arrow modifier
      classes: 'bg-base-100 border border-base-300',
    ),
    // ... other items with [AccordionItem.arrow]
  ],
)
''',
      ),

      // ~Accordion with plus/minus icon
      ComponentPreview(
        title: 'Accordion with plus/minus icon',
        preview: [
          Accordion(
            name: 'my-accordion-3',
            [
              AccordionItem(
                name: '',
                initiallyOpen: true,
                title: text('How do I create an account?'),
                content: text(
                  'Click the "Sign Up" button in the top right corner and follow the registration process.',
                ),
                style: [AccordionItem.plus],
                classes: 'bg-base-100 border border-base-300',
              ),
              AccordionItem(
                name: '',
                title: text('I forgot my password. What should I do?'),
                content: text(
                  'Click on "Forgot Password" on the login page and follow the instructions sent to your email.',
                ),
                style: [AccordionItem.plus],
                classes: 'bg-base-100 border border-base-300',
              ),
              AccordionItem(
                name: '',
                title: text('How do I update my profile information?'),
                content: text(
                  'Go to "My Account" settings and select "Edit Profile" to make changes.',
                ),
                style: [AccordionItem.plus],
                classes: 'bg-base-100 border border-base-300',
              ),
            ],
          ),
        ],
        code: '''
Accordion(
  name: 'my-accordion-3',
  [
    AccordionItem(
      initiallyOpen: true,
      title: text('How do I create an account?'),
      content: text('...'),
      style: [AccordionItem.plus], // Use the plus modifier
      classes: 'bg-base-100 border border-base-300',
    ),
    // ... other items with [AccordionItem.plus]
  ],
)
''',
      ),

      // ~Using Accordion and Join together (CORRECTED)
      ComponentPreview(
        title: 'Using Accordion and Join together',
        description:
            'To create a seamless group, place the `Accordion` inside a `Join` component. Because `Join` can only style its direct children, you must manually add the `join-item` class to each `AccordionItem` inside the `Accordion` for the styles to apply correctly.',
        preview: [
          // The Join component is NOT smart enough to see through Accordion.
          // Therefore, the AccordionItems need the `join-item` class manually.
          Join(
            style: [Join.vertical],
            classes: 'bg-base-100 w-full',
            [
              Accordion(
                name: 'my-accordion-4',
                [
                  AccordionItem(
                    name: '', // Will be overridden
                    initiallyOpen: true,
                    title: text('How do I create an account?'),
                    content: text(
                      'Click the "Sign Up" button in the top right corner and follow the registration process.',
                    ),
                    style: [AccordionItem.arrow],
                    // Manual `join-item` class is required here.
                    classes: 'join-item border border-base-300',
                  ),
                  AccordionItem(
                    name: '',
                    title: text('I forgot my password. What should I do?'),
                    content: text(
                      'Click on "Forgot Password" on the login page and follow the instructions sent to your email.',
                    ),
                    style: [AccordionItem.arrow],
                    // Manual `join-item` class is required here.
                    classes: 'join-item border border-base-300',
                  ),
                  AccordionItem(
                    name: '',
                    title: text('How do I update my profile information?'),
                    content: text(
                      'Go to "My Account" settings and select "Edit Profile" to make changes.',
                    ),
                    style: [AccordionItem.arrow],
                    // Manual `join-item` class is required here.
                    classes: 'join-item border border-base-300',
                  ),
                ],
              ),
            ],
          ),
        ],
        code: '''
// The smart `Join` component styles its direct children.
// Because the `AccordionItem`s are inside the logical `Accordion` component,
// we must add the `join-item` class to them manually.
Join(
  style: [Join.vertical],
  classes: 'bg-base-100 w-full',
  [
    Accordion(
      name: 'my-accordion-4',
      [
        AccordionItem(
          initiallyOpen: true,
          title: text('How do I create an account?'),
          content: text('...'),
          style: [AccordionItem.arrow],
          // Add `join-item` manually here.
          classes: 'join-item border border-base-300',
        ),
        AccordionItem(
          title: text('I forgot my password. What should I do?'),
          content: text('...'),
          style: [AccordionItem.arrow],
          // Add `join-item` manually here.
          classes: 'join-item border border-base-300',
        ),
        AccordionItem(
          title: text('How do I update my profile information?'),
          content: text('...'),
          style: [AccordionItem.arrow],
          // Add `join-item` manually here.
          classes: 'join-item border border-base-300',
        ),
      ],
    ),
  ],
)
''',
      ),
    ]);
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/accordion_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/alert_preview.dart -->
// This file provides interactive examples for the `deepyr` Alert component.
//
// It demonstrates how to create alerts with different colors, styles,
// and layouts, including responsive behavior and complex internal content
// like titles, descriptions, and action buttons, using the type-safe Icon component.

import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart' hide Flex;

import '../../components/component_preview.dart';

/// Renders a collection of [ComponentPreview] widgets to showcase the
/// functionality and styling of the `deepyr` [Alert] component.
class AlertPreview extends StatelessComponent {
  const AlertPreview({super.key});

  @override
  Component build(BuildContext context) {
    return div(classes: 'max-w-5xl mx-auto px-4 space-y-12', [
      // ~Alert
      ComponentPreview(
        title: 'Alert',
        preview: [
          Alert([
            Icon(
              'info',
              style: [
                TextUtil.info, // Use TextUtil for specific color on unstyled alert
                Flex.shrink0,
                Size.w(6),
                Size.h(6)
              ],
            ),
            span([text('12 unread messages. Tap to see.')]),
          ]),
        ],
        code: '''
Alert([
  Icon(
    'info',
    style: [TextUtil.info, Flex.shrink0, Size.w(6), Size.h(6)],
  ),
  span([text('12 unread messages. Tap to see.')]),
])
''',
      ),

      // ~Color variants
      ..._buildColorPreviews(),

      // ~Alert soft style
      ComponentPreview(
        title: 'Alert soft style',
        layoutDirection: PreviewLayoutDirection.vertical,
        preview: [
          Alert(
            [
              span([text('12 unread messages. Tap to see.')])
            ],
            style: [Alert.info, Alert.soft],
          ),
          Alert(
            [
              span([text('Your purchase has been confirmed!')])
            ],
            style: [Alert.success, Alert.soft],
          ),
          Alert(
            [
              span([text('Warning: Invalid email address!')])
            ],
            style: [Alert.warning, Alert.soft],
          ),
          Alert(
            [
              span([text('Error! Task failed successfully.')])
            ],
            style: [Alert.error, Alert.soft],
          ),
        ],
        code: '''
Alert([/* content */], style: [Alert.info, Alert.soft]),
Alert([/* content */], style: [Alert.success, Alert.soft]),
Alert([/* content */], style: [Alert.warning, Alert.soft]),
Alert([/* content */], style: [Alert.error, Alert.soft]),
''',
      ),

      // ~Alert outline style
      ComponentPreview(
        title: 'Alert outline style',
        layoutDirection: PreviewLayoutDirection.vertical,
        preview: [
          Alert(
            [
              span([text('12 unread messages. Tap to see.')])
            ],
            style: [Alert.info, Alert.outline],
          ),
          Alert(
            [
              span([text('Your purchase has been confirmed!')])
            ],
            style: [Alert.success, Alert.outline],
          ),
          Alert(
            [
              span([text('Warning: Invalid email address!')])
            ],
            style: [Alert.warning, Alert.outline],
          ),
          Alert(
            [
              span([text('Error! Task failed successfully.')])
            ],
            style: [Alert.error, Alert.outline],
          ),
        ],
        code: '''
Alert([/* content */], style: [Alert.info, Alert.outline]),
Alert([/* content */], style: [Alert.success, Alert.outline]),
Alert([/* content */], style: [Alert.warning, Alert.outline]),
Alert([/* content */], style: [Alert.error, Alert.outline]),
''',
      ),

      // ~Alert dash style
      ComponentPreview(
        title: 'Alert dash style',
        layoutDirection: PreviewLayoutDirection.vertical,
        preview: [
          Alert(
            [
              span([text('12 unread messages. Tap to see.')])
            ],
            style: [Alert.info, Alert.dash],
          ),
          Alert(
            [
              span([text('Your purchase has been confirmed!')])
            ],
            style: [Alert.success, Alert.dash],
          ),
          Alert(
            [
              span([text('Warning: Invalid email address!')])
            ],
            style: [Alert.warning, Alert.dash],
          ),
          Alert(
            [
              span([text('Error! Task failed successfully.')])
            ],
            style: [Alert.error, Alert.dash],
          ),
        ],
        code: '''
Alert([/* content */], style: [Alert.info, Alert.dash]),
Alert([/* content */], style: [Alert.success, Alert.dash]),
Alert([/* content */], style: [Alert.warning, Alert.dash]),
Alert([/* content */], style: [Alert.error, Alert.dash]),
''',
      ),

      // ~Alert with buttons + responsive
      ComponentPreview(
        title: 'Alert with buttons + responsive',
        description:
            'This alert is vertical on small screens and horizontal on screens wider than 640px.',
        preview: [
          Alert(
            [
              Icon(
                'info',
                style: [TextUtil.info, Flex.shrink0, Size.w(6), Size.h(6)],
              ),
              span([text('we use cookies for no reason.')]),
              div([
                Button([text('Deny')], style: [Button.sm]),
                Button([text('Accept')], style: [Button.sm, Button.primary]),
              ]),
            ],
            style: [Alert.vertical, Alert.horizontal.at(Breakpoint.sm)],
          ),
        ],
        code: '''
Alert(
  [
    Icon(
      'info',
      style: [TextUtil.info, Flex.shrink0, Size.w(6), Size.h(6)],
    ),
    span([text('we use cookies for no reason.')]),
    div([
      Button([text('Deny')], style: [Button.sm]),
      Button([text('Accept')], style: [Button.sm, Button.primary]),
    ]),
  ],
  // Use the fluent API for responsive layout changes.
  style: [Alert.vertical, Alert.horizontal.at(Breakpoint.sm)],
)
''',
      ),

      // ~Alert with title and description
      ComponentPreview(
        title: 'Alert with title and description',
        preview: [
          Alert(
            [
              Icon(
                'info',
                style: [TextUtil.info, Flex.shrink0, Size.w(6), Size.h(6)],
              ),
              div([
                h3([text('New message!')], classes: 'font-bold'),
                div([text('You have 1 unread message')], classes: 'text-xs'),
              ]),
              Button([text('See')], style: [Button.sm]),
            ],
            style: [Alert.vertical, Alert.horizontal.at(Breakpoint.sm)],
          ),
        ],
        code: '''
Alert(
  [
    Icon(
      'info',
      style: [TextUtil.info, Flex.shrink0, Size.w(6), Size.h(6)],
    ),
    div([
      h3([text('New message!')], classes: 'font-bold'),
      div([text('You have 1 unread message')], classes: 'text-xs'),
    ]),
    Button([text('See')], style: [Button.sm]),
  ],
  style: [Alert.vertical, Alert.horizontal.at(Breakpoint.sm)],
)
''',
      ),
    ]);
  }

  /// Helper function to generate all the color previews to avoid repetition.
  Iterable<Component> _buildColorPreviews() {
    final colors = {
      'Info': {'style': Alert.info, 'iconName': 'info', 'text': 'New software update available.'},
      'Success': {
        'style': Alert.success,
        'iconName': 'check_circle',
        'text': 'Your purchase has been confirmed!'
      },
      'Warning': {
        'style': Alert.warning,
        'iconName': 'warning',
        'text': 'Warning: Invalid email address!'
      },
      'Error': {
        'style': Alert.error,
        'iconName': 'error',
        'text': 'Error! Task failed successfully.'
      },
    };

    return colors.entries.map((entry) {
      final title = '${entry.key} color';
      final style = entry.value['style']! as AlertStyling;
      final iconName = entry.value['iconName']! as String;
      final textContent = entry.value['text']! as String;

      return ComponentPreview(
        title: title,
        preview: [
          Alert(
            [
              // The Icon will inherit its color from the parent Alert.
              Icon(iconName, style: [Flex.shrink0, Size.w(6), Size.h(6)]),
              span([text(textContent)]),
            ],
            style: [style],
          ),
        ],
        code: '''
Alert(
  [
    // The Icon's color is inherited from the Alert's text color.
    Icon(
      '$iconName',
      style: [Flex.shrink0, Size.w(6), Size.h(6)],
    ),
    span([text('$textContent')]),
  ],
  style: [Alert.${entry.key.toLowerCase()}],
)
''',
      );
    });
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/alert_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/avatar_preview.dart -->
import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart';

import '../../components/component_preview.dart';

/// Renders a collection of [ComponentPreview] widgets to demonstrate the
/// functionality and styling of the `deepyr` [Avatar] component.
class AvatarPreview extends StatelessComponent {
  const AvatarPreview({super.key});

  @override
  Component build(BuildContext context) {
    return div(classes: 'max-w-5xl mx-auto px-4 space-y-12', [
      // ~Avatar
      ComponentPreview(
        title: 'Avatar',
        preview: [
          Avatar([
            Container(
              [
                img(
                  src: '/images/user1.webp',
                  alt: 'Avatar',
                ),
              ],
              style: [Size.w24, Effects.rounded, BgUtil.base300],
            ),
          ]),
        ],
        code: '''
Avatar([
  Container(
    [
      img(src: '...', alt: 'Avatar'),
    ],
    // Use deepyr utilities for all styling.
    style: [Size.w24, Effects.rounded, BgUtil.base300],
  ),
]),''',
      ),

      // ~Avatar in custom sizes
      ComponentPreview(
        title: 'Avatar in custom sizes',
        preview: [
          Avatar([
            Container(
                [img(src: '/images/user2.webp')],
                style: [Size.w24, Effects.rounded, BgUtil.base300]),
          ]),
          Avatar([
            Container(
                [img(src: '/images/user2.webp')],
                style: [Size.w16, Effects.rounded, BgUtil.base300]),
          ]),
          Avatar([
            Container(
                [img(src: '/images/user2.webp')],
                style: [Size.w12, Effects.rounded, BgUtil.base300]),
          ]),
          Avatar([
            Container(
                [img(src: '/images/user2.webp')],
                style: [Size.w8, Effects.rounded, BgUtil.base300]),
          ]),
        ],
        code: '''
// Using deepyr's Size utility for width.
Avatar([Container([...], style: [Size.w24, Effects.rounded, BgUtil.base300])]),
Avatar([Container([...], style: [Size.w16, Effects.rounded, BgUtil.base300])]),
Avatar([Container([...], style: [Size.w12, Effects.rounded, BgUtil.base300])]),
Avatar([Container([...], style: [Size.w8, Effects.rounded, BgUtil.base300])]),
''',
      ),

      // ~Avatar rounded
      ComponentPreview(
        title: 'Avatar rounded',
        preview: [
          Avatar([
            Container(
                [img(src: '/images/user3.webp')],
                style: [Size.w24, Effects.roundedXl, BgUtil.base300]),
          ]),
          Avatar([
            Container([img(src: '/images/user4.webp')],
                style: [Size.w24, Effects.roundedFull, BgUtil.base300]),
          ]),
        ],
        code: '''
// Use the Effects utility for border-radius.
Avatar([Container([...], style: [Size.w24, Effects.roundedXl, BgUtil.base300])]),
Avatar([Container([...], style: [Size.w24, Effects.roundedFull, BgUtil.base300])]),
''',
      ),

      // ~Avatar with mask
      ComponentPreview(
        title: 'Avatar with mask',
        description:
            'Masking is a separate DaisyUI component. It is applied here via `classes` as a deepyr `Mask` abstraction does not exist yet.',
        preview: [
          Avatar([
            Container(
                [img(src: '/images/user1.webp')],
                style: [Size.w24], classes: 'mask mask-heart bg-base-300'),
          ]),
          Avatar([
            Container(
                [img(src: '/images/user3.webp')],
                style: [Size.w24], classes: 'mask mask-squircle bg-base-300'),
          ]),
          Avatar([
            Container(
                [img(src: '/images/user4.webp')],
                style: [Size.w24], classes: 'mask mask-hexagon-2 bg-base-300'),
          ]),
        ],
        code: '''
// Using `classes` for the mask effect is a temporary escape hatch.
// A `Mask` component or utility will be created in the future.
Avatar([
  Container([...], style: [Size.w24], classes: 'mask mask-heart bg-base-300'),
]),''',
      ),

      // ~Avatar group
      ComponentPreview(
        title: 'Avatar group',
        preview: [
          AvatarGroup(
            [
              Avatar([
                Container(
                    [img(src: '/images/user1.webp')],
                    style: [Size.w12, BgUtil.base300]),
              ]),
              Avatar([
                Container(
                    [img(src: '/images/user2.webp')],
                    style: [Size.w12, BgUtil.base300]),
              ]),
              Avatar([
                Container(
                    [img(src: '/images/user3.webp')],
                    style: [Size.w12, BgUtil.base300]),
              ]),
              Avatar([
                Container(
                    [img(src: '/images/user4.webp')],
                    style: [Size.w12, BgUtil.base300]),
              ]),
            ],
            // Note: '-space-x-6' will be handled by a Spacing utility in the future.
            classes: '-space-x-6',
          ),
        ],
        code: '''
AvatarGroup(
  [
    Avatar([Container([...], style: [Size.w12, BgUtil.base300])]),
    Avatar([Container([...], style: [Size.w12, BgUtil.base300])]),
    Avatar([Container([...], style: [Size.w12, BgUtil.base300])]),
    Avatar([Container([...], style: [Size.w12, BgUtil.base300])]),
  ],
  classes: '-space-x-6', // Negative space utility
)''',
      ),

      // ~Avatar group with counter
      ComponentPreview(
        title: 'Avatar group with counter',
        preview: [
          AvatarGroup(
            [
              Avatar([
                Container(
                    [img(src: '/images/user2.webp')],
                    style: [Size.w12, BgUtil.base300]),
              ]),
              Avatar([
                Container(
                    [img(src: '/images/user3.webp')],
                    style: [Size.w12, BgUtil.base300]),
              ]),
              Avatar([
                Container(
                    [img(src: '/images/user4.webp')],
                    style: [Size.w12, BgUtil.base300]),
              ]),
              Avatar.placeholder([
                Container(
                  [
                    span([text('+99')])
                  ],
                  style: [
                    BgUtil.neutral,
                    TextUtil.neutralContent,
                    Size.w12,
                  ],
                ),
              ]),
            ],
            classes: '-space-x-6',
          ),
        ],
        code: '''
AvatarGroup(
  [
    Avatar([...]),
    Avatar([...]),
    Avatar([...]),
    Avatar.placeholder([
      Container(
        [span([text('+99')])],
        style: [BgUtil.neutral, TextUtil.neutralContent, Size.w12],
      ),
    ]),
  ],
  classes: '-space-x-6',
)''',
      ),

      // ~Avatar with ring
      ComponentPreview(
        title: 'Avatar with ring',
        description:
            'Ring styles are applied via `classes` as they are general Tailwind utilities not yet abstracted in deepyr.',
        preview: [
          Avatar([
            Container(
              [img(src: '/images/user1.webp')],
              style: [Size.w24, Effects.roundedFull],
              classes: 'ring-2 ring-primary ring-offset-base-100 ring-offset-2',
            ),
          ]),
        ],
        code: '''
Avatar([
  Container(
    [img(src: '...')],
    style: [Size.w24, Effects.roundedFull],
    classes: 'ring-2 ring-primary ring-offset-base-100 ring-offset-2',
  ),
]),''',
      ),

      // ~Avatar with presence indicator
      ComponentPreview(
        title: 'Avatar with presence indicator',
        preview: [
          Avatar(
            [
              Container([img(src: '/images/user2.webp')],
                  style: [Size.w24, Effects.roundedFull, BgUtil.base300]),
            ],
            style: [Avatar.online],
          ),
          Avatar(
            [
              Container(
                  [img(src: '/images/user1.webp')],
                  style: [Size.w24, Effects.roundedFull, BgUtil.base300]),
            ],
            style: [Avatar.offline],
          ),
        ],
        code: '''
// Online
Avatar(
  [Container([...], style: [Size.w24, Effects.roundedFull, BgUtil.base300])],
  style: [Avatar.online],
),
// Offline
Avatar(
  [Container([...], style: [Size.w24, Effects.roundedFull, BgUtil.base300])],
  style: [Avatar.offline],
),''',
      ),

      // ~Avatar placeholder
      ComponentPreview(
        title: 'Avatar placeholder',
        preview: [
          Avatar.placeholder([
            Container(
              [
                span(
                  [text('D')],
                  // Correctly applying styles to a primitive `span`
                  classes: [TextUtil.xl3].toClasses(),
                )
              ],
              style: [BgUtil.neutral, TextUtil.neutralContent, Size.w24, Effects.roundedFull],
            ),
          ]),
          Avatar.placeholder(
            [
              Container(
                [
                  span([text('AI')], classes: [TextUtil.xl].toClasses())
                ],
                style: [BgUtil.neutral, TextUtil.neutralContent, Size.w16, Effects.roundedFull],
              ),
            ],
            style: [Avatar.online],
          ),
          Avatar.placeholder([
            Container(
              [
                span([text('SY')])
              ],
              style: [BgUtil.neutral, TextUtil.neutralContent, Size.w12, Effects.roundedFull],
            ),
          ]),
          Avatar.placeholder([
            Container(
              [
                span([text('UI')], classes: [TextUtil.xs].toClasses())
              ],
              style: [BgUtil.neutral, TextUtil.neutralContent, Size.w8, Effects.roundedFull],
            ),
          ]),
        ],
        code: '''
// Using the `toClasses()` extension on deepyr styles for primitive components.
Avatar.placeholder([
  Container(
    [
      span([text('D')], classes: [TextUtil.xl3].toClasses())
    ],
    style: [BgUtil.neutral, TextUtil.neutralContent, Size.w24, Effects.roundedFull],
  ),
]),''',
      ),
    ]);
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/avatar_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/badge_preview.dart -->
import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart';

import '../../components/component_preview.dart';

class BadgePreview extends StatelessComponent {
  const BadgePreview({super.key});

  @override
  Component build(BuildContext context) {
    return div(classes: 'max-w-5xl mx-auto px-4', [
      // Basic Badge
      ComponentPreview(
        title: 'Badge',
        preview: [
          Badge([text('Badge')]),
        ],
        code: '''
Badge([text('Badge')])
''',
      ),

      // Badge sizes
      ComponentPreview(
        title: 'Badge sizes',
        preview: [
          Badge([text('Xsmall')], style: [Badge.xs]),
          Badge([text('Small')], style: [Badge.sm]),
          Badge([text('Medium')], style: [Badge.md]), // Default
          Badge([text('Large')], style: [Badge.lg]),
          Badge([text('Xlarge')], style: [Badge.xl]), // New
        ],
        code: '''
Badge([text('Xsmall')], style: [Badge.xs]),
Badge([text('Small')], style: [Badge.sm]),
Badge([text('Medium')], style: [Badge.md]), // Default
Badge([text('Large')], style: [Badge.lg]),
Badge([text('Xlarge')], style: [Badge.xl]),
''',
      ),

      // Badge with colors
      ComponentPreview(
        title: 'Badge with colors',
        preview: [
          Badge([text('Primary')], style: [Badge.primary]),
          Badge([text('Secondary')], style: [Badge.secondary]),
          Badge([text('Accent')], style: [Badge.accent]),
          Badge([text('Neutral')], style: [Badge.neutral]),
          Badge([text('Info')], style: [Badge.info]),
          Badge([text('Success')], style: [Badge.success]),
          Badge([text('Warning')], style: [Badge.warning]),
          Badge([text('Error')], style: [Badge.error]),
        ],
        code: '''
Badge([text('Primary')], style: [Badge.primary]),
Badge([text('Secondary')], style: [Badge.secondary]),
Badge([text('Accent')], style: [Badge.accent]),
Badge([text('Neutral')], style: [Badge.neutral]),
Badge([text('Info')], style: [Badge.info]),
Badge([text('Success')], style: [Badge.success]),
Badge([text('Warning')], style: [Badge.warning]),
Badge([text('Error')], style: [Badge.error]),
''',
      ),

      // Badge with soft style (NEW)
      ComponentPreview(
        title: 'Badge with soft style',
        preview: [
          Badge([text('Primary')], style: [Badge.soft, Badge.primary]),
          Badge([text('Secondary')], style: [Badge.soft, Badge.secondary]),
          Badge([text('Accent')], style: [Badge.soft, Badge.accent]),
          Badge([text('Info')], style: [Badge.soft, Badge.info]),
          Badge([text('Success')], style: [Badge.soft, Badge.success]),
          Badge([text('Warning')], style: [Badge.soft, Badge.warning]),
          Badge([text('Error')], style: [Badge.soft, Badge.error]),
        ],
        code: '''
Badge([text('Primary')], style: [Badge.soft, Badge.primary]),
Badge([text('Secondary')], style: [Badge.soft, Badge.secondary]),
Badge([text('Accent')], style: [Badge.soft, Badge.accent]),
Badge([text('Info')], style: [Badge.soft, Badge.info]),
Badge([text('Success')], style: [Badge.soft, Badge.success]),
Badge([text('Warning')], style: [Badge.soft, Badge.warning]),
Badge([text('Error')], style: [Badge.soft, Badge.error]),
''',
      ),

      // Outline badge
      ComponentPreview(
        title: 'Badge with outline style',
        preview: [
          Badge([text('Primary')], style: [Badge.outline, Badge.primary]),
          Badge(
            [text('Secondary')],
            style: [Badge.outline, Badge.secondary],
          ),
          Badge([text('Accent')], style: [Badge.outline, Badge.accent]),
          Badge([text('Info')], style: [Badge.outline, Badge.info]),
          Badge([text('Success')], style: [Badge.outline, Badge.success]),
          Badge([text('Warning')], style: [Badge.outline, Badge.warning]),
          Badge([text('Error')], style: [Badge.outline, Badge.error]),
        ],
        code: '''
Badge([text('Primary')], style: [Badge.outline, Badge.primary]),
Badge([text('Secondary')], style: [Badge.outline, Badge.secondary]),
Badge([text('Accent')], style: [Badge.outline, Badge.accent]),
Badge([text('Info')], style: [Badge.outline, Badge.info]),
Badge([text('Success')], style: [Badge.outline, Badge.success]),
Badge([text('Warning')], style: [Badge.outline, Badge.warning]),
Badge([text('Error')], style: [Badge.outline, Badge.error]),
''',
      ),

      // Badge with dash style (NEW)
      ComponentPreview(
        title: 'Badge with dash style',
        preview: [
          Badge([text('Primary')], style: [Badge.dash, Badge.primary]),
          Badge([text('Secondary')], style: [Badge.dash, Badge.secondary]),
          Badge([text('Accent')], style: [Badge.dash, Badge.accent]),
          Badge([text('Info')], style: [Badge.dash, Badge.info]),
          Badge([text('Success')], style: [Badge.dash, Badge.success]),
          Badge([text('Warning')], style: [Badge.dash, Badge.warning]),
          Badge([text('Error')], style: [Badge.dash, Badge.error]),
        ],
        code: '''
Badge([text('Primary')], style: [Badge.dash, Badge.primary]),
Badge([text('Secondary')], style: [Badge.dash, Badge.secondary]),
Badge([text('Accent')], style: [Badge.dash, Badge.accent]),
Badge([text('Info')], style: [Badge.dash, Badge.info]),
Badge([text('Success')], style: [Badge.dash, Badge.success]),
Badge([text('Warning')], style: [Badge.dash, Badge.warning]),
Badge([text('Error')], style: [Badge.dash, Badge.error]),
''',
      ),

      // Neutral badge with outline or dash style (NEW)
      ComponentPreview(
        title: 'Neutral badge with outline or dash style',
        description: 'These badges use dark text, only use them on light backgrounds',

        preview: [
          Badge([text('Outline')], style: [Badge.neutral, Badge.outline]),
          Badge([text('Dash')], style: [Badge.neutral, Badge.dash]),
        ],
        code: '''
// Ensure these are on a light background
Badge([text('Outline')], style: [Badge.neutral, Badge.outline]),
Badge([text('Dash')], style: [Badge.neutral, Badge.dash]),
''',
      ),

      // Badge ghost
      ComponentPreview(
        title: 'Badge ghost',
        preview: [
          Badge([text('ghost')], style: [Badge.ghost]),
        ],
        code: '''
Badge([text('ghost')], style: [Badge.ghost]),
''',
      ),

      // Empty badge
      const ComponentPreview(
        title: 'Empty badge',
        preview: [
          Badge([], style: [Badge.primary, Badge.lg]),
          Badge([], style: [Badge.primary, Badge.md]),
          Badge([], style: [Badge.primary, Badge.sm]),
          Badge([], style: [Badge.primary, Badge.xs]),
        ],
        code: '''
Badge([], style: [Badge.primary, Badge.lg]),
Badge([], style: [Badge.primary, Badge.md]),
Badge([], style: [Badge.primary, Badge.sm]),
Badge([], style: [Badge.primary, Badge.xs]),
''',
      ),

      // Badge with icon
      ComponentPreview(
        title: 'Badge with icon',
        preview: [
          Badge(
            [
              Icon(
                'info',
                style: [
                  TextUtil.sm,
                ],
              ),
              const Component.text('Info'),
            ],
            style: [
              Badge.info,
              Layout.gap1,
            ],
          ),
          Badge(
            [
              Icon(
                'check_circle',
                style: [TextUtil.sm],
              ),
              const Component.text('Success'),
            ],
            style: [Badge.success, Layout.gap1],
          ),
          Badge(
            [
              Icon(
                'warning',
                style: [TextUtil.sm],
              ),
              const Component.text('Warning'),
            ],
            style: [Badge.warning, Layout.gap1],
          ),
          Badge(
            [
              Icon('error', style: [TextUtil.sm]),
              const Component.text('Error'),
            ],
            style: [Badge.error, Layout.gap1],
          ),
        ],
        code: '''
Badge(
  [
    Icon('info', style: [TextUtil.sm]),
    Text('Info'),
  ],
  style: [Badge.info, Layout.gap1],
),
Badge(
  [
    Icon('check_circle', style: [TextUtil.sm]),
    Text('Success'),
  ],
  style: [Badge.success, Layout.gap1],
),
Badge(
  [
    Icon('warning', style: [TextUtil.sm]),
    Text('Warning'),
  ],
  style: [Badge.warning, Layout.gap1],
),
Badge(
  [
    Icon('error', style: [TextUtil.sm]),
    Text('Error'),
  ],
  style: [Badge.error, Layout.gap1],
),
''',
      ),

      // Badge in text
      ComponentPreview(
        title: 'Badge in a text',
        preview: [
          div(classes: 'grid', [
            h1(classes: 'text-xl font-semibold ', [
              text('Heading 1 '),
              Badge([text('Badge')], style: [Badge.xl]),
            ]),
            h2(classes: 'text-lg font-semibold block', [
              text('Heading 2 '),
              Badge([text('Badge')], style: [Badge.lg]),
            ]),
            h3(classes: 'text-base font-semibold', [
              text('Heading 3 '),
              Badge([text('Badge')], style: [Badge.md]),
            ]),
            h4(classes: 'text-sm font-semibold', [
              text('Heading 4 '),
              Badge([text('Badge')], style: [Badge.sm]),
            ]),
            h5(classes: 'text-xs font-semibold', [
              text('Heading 5 '),
              Badge([text('Badge')], style: [Badge.xs]),
            ]),
            p(classes: 'text-xs', [
              text('Paragraph '),
              Badge([text('Badge')], style: [Badge.xs]),
            ]),
          ]),
        ],
        code: '''
h1(classes: 'text-xl font-semibold', [
  text('Heading 1 '),
  Badge([text('Badge')], style: [Badge.xl]),
]),
h2(classes: 'text-lg font-semibold', [
  text('Heading 2 '),
  Badge([text('Badge')], style: [Badge.lg]),
]),
h3(classes: 'text-base font-semibold', [
  text('Heading 3 '),
  Badge([text('Badge')], style: [Badge.md]),
]),
h4(classes: 'text-sm font-semibold', [
  text('Heading 4 '),
  Badge([text('Badge')], style: [Badge.sm]),
]),
h5(classes: 'text-xs font-semibold', [
  text('Heading 5 '),
  Badge([text('Badge')], style: [Badge.xs]),
]),
p(classes: 'text-xs', [
  text('Paragraph '),
  Badge([text('Badge')], style: [Badge.xs]),
]),
''',
      ),

      // Badge in a button
      ComponentPreview(
        title: 'Badge in a button',
        preview: [
          Button([
            text('Inbox'),
            Badge([text('+99')], style: [Badge.sm]),
          ]),
          Button([
            text('Inbox'),
            Badge([text('+99')], style: [Badge.sm, Badge.secondary]),
          ]),
        ],
        code: '''
Button([
  text('Inbox'),
  Badge([text('+99')], style: [Badge.sm]),
]),
Button([
  text('Inbox'),
  Badge([text('+99')], style: [Badge.sm, Badge.secondary]),
]),
''',
      ),
    ]);
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/badge_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/breadcrumbs_preview.dart -->
import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart';

import '../../components/component_preview.dart';

// Helper function to create the SVG icon from the spec, keeping the preview code clean.
Component _folderIcon() {
  return svg(
    attributes: {
      'xmlns': 'http://www.w3.org/2000/svg',
      'fill': 'none',
      'viewBox': '0 0 24 24',
      'stroke': 'currentColor',
    },
    classes: 'w-4 h-4',
    [
      path(
        attributes: {
          'stroke-linecap': 'round',
          'stroke-linejoin': 'round',
          'stroke-width': '2',
          'd': 'M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z',
        },
        [],
      ),
    ],
  );
}

Component _addDocumentIcon() {
  return svg(
    attributes: {
      'xmlns': 'http://www.w3.org/2000/svg',
      'fill': 'none',
      'viewBox': '0 0 24 24',
      'stroke': 'currentColor',
    },
    classes: 'w-4 h-4',
    [
      path(
        attributes: {
          'stroke-linecap': 'round',
          'stroke-linejoin': 'round',
          'stroke-width': '2',
          'd':
              'M9 13h6m-3-3v6m5 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z',
        },
        [],
      ),
    ],
  );
}

/// Renders a collection of [ComponentPreview] widgets to showcase the
/// functionality and styling of the `deepyr` [Breadcrumbs] component.
class BreadcrumbsPreview extends StatelessComponent {
  const BreadcrumbsPreview({super.key});

  @override
  Component build(BuildContext context) {
    return div(classes: 'max-w-5xl mx-auto px-4 space-y-12', [
      // ~Breadcrumbs
      ComponentPreview(
        title: 'Breadcrumbs',
        description: 'The Breadcrumbs component automatically wraps each child in an <li> tag.',
        preview: [
          Breadcrumbs(
            style: [TextUtil.sm],
            [
              // Use deepyr `Link` for clickable items
              Link([text('Home')], href: '#', style: [Link.hover]),
              Link([text('Documents')], href: '#', style: [Link.hover]),
              // Use a primitive `span` for the non-clickable current page
              span([text('Add Document')]),
            ],
          ),
        ],
        code: '''
Breadcrumbs(
  style: [TextUtil.sm],
  [
    Link([text('Home')], href: '#', style: [Link.hover]),
    Link([text('Documents')], href: '#', style: [Link.hover]),
    span([text('Add Document')]),
  ],
)
''',
      ),

      // ~Breadcrumbs with icons
      ComponentPreview(
        title: 'Breadcrumbs with icons',
        preview: [
          Breadcrumbs(
            style: [TextUtil.sm],
            [
              Link(
                [
                  _folderIcon(), // Use the raw SVG component
                  text('Home'),
                ],
                href: '#',
                // Link.hover correctly underlines only the text content
                style: [Link.hover, Layout.inlineFlex, Layout.gap2, Alignment.itemsCenter],
              ),
              Link(
                [
                  _folderIcon(), // Use the raw SVG component
                  text('Documents'),
                ],
                href: '#',
                style: [Link.hover, Layout.inlineFlex, Layout.gap2, Alignment.itemsCenter],
              ),
              // The last item is not a link
              span(
                [
                  _addDocumentIcon(),
                  text('Add Document'),
                ],
                classes: [Layout.inlineFlex, Layout.gap2, Alignment.itemsCenter].toClasses(),
              ),
            ],
          ),
        ],
        code: '''
// Helper function to create the SVG icon component
Component _folderIcon() => svg(
  // ... svg attributes and path
);

Breadcrumbs(
  style: [TextUtil.sm],
  [
    Link(
      [
        _folderIcon(),
        text('Home'),
      ],
      href: '#',
      style: [Link.hover, Layout.inlineFlex, Layout.gap2, Alignment.itemsCenter],
    ),
    Link(
      [
        _folderIcon(),
        text('Documents'),
      ],
      href: '#',
      style: [Link.hover, Layout.inlineFlex, Layout.gap2, Alignment.itemsCenter],
    ),
    span(
      [
        _addDocumentIcon(),
        text('Add Document'),
      ],
      classes: [Layout.inlineFlex, Layout.gap2, Alignment.itemsCenter].toClasses(),
    ),
  ],
)
''',
      ),

      // ~Breadcrumbs with max-width
      ComponentPreview(
        title: 'Breadcrumbs with max-width',
        description: 'If the list gets larger than the container, it will scroll horizontally.',
        preview: [
          Breadcrumbs(
            style: [Size.maxWxs, TextUtil.sm],
            [
              span([text('Long text 1')]),
              span([text('Long text 2')]),
              span([text('Long text 3')]),
              span([text('Long text 4')]),
              span([text('Long text 5')]),
            ],
          ),
        ],
        code: '''
Breadcrumbs(
  style: [Size.maxWxs, TextUtil.sm],
  [
    span([text('Long text 1')]),
    span([text('Long text 2')]),
    span([text('Long text 3')]),
    span([text('Long text 4')]),
    span([text('Long text 5')]),
  ],
)
''',
      ),
    ]);
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/breadcrumbs_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/button_preview.dart -->
import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart';

import '../../components/component_preview.dart';

part 'button_preview_icons.dart'; // Assuming this part file exists for SVG icons

class ButtonPreview extends StatelessComponent {
  const ButtonPreview({super.key});

  @override
  Component build(BuildContext context) {
    return div(classes: 'max-w-5xl mx-auto px-4', [
      // ~Button
      ComponentPreview(
        title: 'Button',
        preview: [
          Button([text('Default')]),
        ],
        code: '''
Button([text('Default')])
''',
      ),

      // ~Button sizes
      ComponentPreview(
        title: 'Button sizes',
        preview: [
          Button([text('Xsmall')], style: [Button.xs]),
          Button([text('Small')], style: [Button.sm]),
          Button([text('Medium')]),
          Button([text('Large')], style: [Button.lg]),
          Button([text('Xlarge')], style: [Button.xl]), // New XL size
        ],
        code: '''
Button([text('Xsmall')], style: [Button.xs]),
Button([text('Small')], style: [Button.sm]),
Button([text('Medium')]), // Default size
Button([text('Large')], style: [Button.lg]),
Button([text('Xlarge')], style: [Button.xl]),
''',
      ),

      // ~Responsive button
      ComponentPreview(
        title: 'Responsive button',
        description:
            'This button will have different sizes on different browser viewpoints',
        preview: [
          Button(
            [text('Responsive')],
            style: [
              Button.xs, // Default mobile size
              Button.sm.atSm, // Small at small screen and up
              Button.md.atMd, // Medium at Medium screen and up
              Button.lg.atLg, // Large at Large screen and up
              Button.xl.atXl, // Extra large at XL screen and up
            ],
          ),
        ],
        code: '''
Button(
  [text('Responsive')],
  style: [
    Button.xs, // Default mobile size
    Button.sm.atSm, // Small at small screen and up
    Button.md.atMd, // Medium at Medium screen and up
    Button.lg.atLg, // Large at Large screen and up
    Button.xl.atXl, // Extra large at XL screen and up
  ],
)
''',
      ),

      // ~Buttons colors
      ComponentPreview(
        title: 'Buttons colors',
        preview: [
          Button([text('Neutral')], style: [Button.neutral]),
          Button([text('Primary')], style: [Button.primary]),
          Button([text('Secondary')], style: [Button.secondary]),
          Button([text('Accent')], style: [Button.accent]),
          Button([text('Info')], style: [Button.info]),
          Button([text('Success')], style: [Button.success]),
          Button([text('Warning')], style: [Button.warning]),
          Button([text('Error')], style: [Button.error]),
        ],
        code: '''
Button([text('Neutral')], style: [Button.neutral]),
Button([text('Primary')], style: [Button.primary]),
Button([text('Secondary')], style: [Button.secondary]),
Button([text('Accent')], style: [Button.accent]),
Button([text('Info')], style: [Button.info]),
Button([text('Success')], style: [Button.success]),
Button([text('Warning')], style: [Button.warning]),
Button([text('Error')], style: [Button.error]),
''',
      ),

      // ~Soft buttons (NEW)
      ComponentPreview(
        title: 'Soft buttons',
        preview: [
          Button([text('Default')], style: [Button.soft]),
          Button([text('Primary')], style: [Button.soft, Button.primary]),
          Button(
            [text('Secondary')],
            style: [Button.soft, Button.secondary],
          ),
          Button([text('Accent')], style: [Button.soft, Button.accent]),
          Button([text('Info')], style: [Button.soft, Button.info]),
          Button([text('Success')], style: [Button.soft, Button.success]),
          Button([text('Warning')], style: [Button.soft, Button.warning]),
          Button([text('Error')], style: [Button.soft, Button.error]),
        ],
        code: '''
Button([text('Default')], style: [Button.soft]),
Button([text('Primary')], style: [Button.soft, Button.primary]),
Button([text('Secondary')], style: [Button.soft, Button.secondary]),
Button([text('Accent')], style: [Button.soft, Button.accent]),
Button([text('Info')], style: [Button.soft, Button.info]),
Button([text('Success')], style: [Button.soft, Button.success]),
Button([text('Warning')], style: [Button.soft, Button.warning]),
Button([text('Error')], style: [Button.soft, Button.error]),
''',
      ),

      // ~Outline buttons
      ComponentPreview(
        title: 'Outline buttons',
        preview: [
          Button([text('Default')], style: [Button.outline]),
          Button(
            [text('Primary')],
            style: [Button.primary, Button.outline],
          ),
          Button(
            [text('Secondary')],
            style: [Button.secondary, Button.outline],
          ),
          Button([text('Accent')], style: [Button.accent, Button.outline]),
          Button([text('Info')], style: [Button.info, Button.outline]),
          Button(
            [text('Success')],
            style: [Button.success, Button.outline],
          ),
          Button(
            [text('Warning')],
            style: [Button.warning, Button.outline],
          ),
          Button([text('Error')], style: [Button.error, Button.outline]),
        ],
        code: '''
Button([text('Default')], style: [Button.outline]),
Button([text('Primary')], style: [Button.primary, Button.outline]),
Button([text('Secondary')], style: [Button.secondary, Button.outline]),
Button([text('Accent')], style: [Button.accent, Button.outline]),
Button([text('Info')], style: [Button.info, Button.outline]),
Button([text('Success')], style: [Button.success, Button.outline]),
Button([text('Warning')], style: [Button.warning, Button.outline]),
Button([text('Error')], style: [Button.error, Button.outline]),
''',
      ),

      // ~Dash buttons (NEW)
      ComponentPreview(
        title: 'Dash buttons',
        preview: [
          Button([text('Default')], style: [Button.dash]),
          Button([text('Primary')], style: [Button.primary, Button.dash]),
          Button(
            [text('Secondary')],
            style: [Button.secondary, Button.dash],
          ),
          Button([text('Accent')], style: [Button.accent, Button.dash]),
          Button([text('Info')], style: [Button.info, Button.dash]),
          Button([text('Success')], style: [Button.success, Button.dash]),
          Button([text('Warning')], style: [Button.warning, Button.dash]),
          Button([text('Error')], style: [Button.error, Button.dash]),
        ],
        code: '''
Button([text('Default')], style: [Button.dash]),
Button([text('Primary')], style: [Button.primary, Button.dash]),
Button([text('Secondary')], style: [Button.secondary, Button.dash]),
Button([text('Accent')], style: [Button.accent, Button.dash]),
Button([text('Info')], style: [Button.info, Button.dash]),
Button([text('Success')], style: [Button.success, Button.dash]),
Button([text('Warning')], style: [Button.warning, Button.dash]),
Button([text('Error')], style: [Button.error, Button.dash]),
''',
      ),

      // ~Neutral button with outline or dash style
      ComponentPreview(
        title: 'Neutral button with outline or dash style',
        description:
            'These buttons use dark text, only use them on light backgrounds',
        preview: [
          Button(
            [text('Outline')],
            style: [Button.neutral, Button.outline],
          ),
          Button([text('Dash')], style: [Button.neutral, Button.dash]),
        ],
        code: '''
// Ensure these buttons are placed on a light background
Button([text('Outline')], style: [Button.neutral, Button.outline]),
Button([text('Dash')], style: [Button.neutral, Button.dash]),
''',
      ),

      // ~Active buttons
      ComponentPreview(
        title: 'Active buttons',
        preview: [
          Button([text('Default')], style: [Button.active]),
          Button([text('Primary')], style: [Button.active, Button.primary]),
          Button(
            [text('Secondary')],
            style: [Button.active, Button.secondary],
          ),
          Button([text('Accent')], style: [Button.active, Button.accent]),
          Button([text('Info')], style: [Button.active, Button.info]),
          Button([text('Success')], style: [Button.active, Button.success]),
          Button([text('Warning')], style: [Button.active, Button.warning]),
          Button([text('Error')], style: [Button.active, Button.error]),
        ],
        code: '''
Button([text('Default')], style: [Button.active]),
Button([text('Primary')], style: [Button.active, Button.primary]),
Button([text('Secondary')], style: [Button.active, Button.secondary]),
Button([text('Accent')], style: [Button.active, Button.accent]),
Button([text('Info')], style: [Button.active, Button.info]),
Button([text('Success')], style: [Button.active, Button.success]),
Button([text('Warning')], style: [Button.active, Button.warning]),
Button([text('Error')], style: [Button.active, Button.error]),
''',
      ),

      // ~Buttons ghost and button link
      ComponentPreview(
        title: 'Ghost and link buttons',
        preview: [
          Button([text('Ghost')], style: [Button.ghost]),
          Button([text('Link')], style: [Button.link]),
        ],
        code: '''
Button([text('Ghost')], style: [Button.ghost]),
Button([text('Link')], style: [Button.link]),
''',
      ),

      // ~Wide button
      ComponentPreview(
        title: 'Wide button',
        preview: [
          Button([text('Wide')], style: [Button.wide]),
        ],
        code: '''
Button([text('Wide')], style: [Button.wide])
''',
      ),

      // ~Buttons with any HTML tags
      ComponentPreview(
        title: 'Buttons with any HTML tags',
        preview: [
          Button(
            [text('Link')],
            tag: 'a',
            attributes: {'href': '#'},
          ),
          Button(
            [text('Button')],
            htmlType: ButtonHtmlType.submit,
          ),
          const Button(
            [], // Children are empty for input type buttons
            tag: 'input',
            htmlType: ButtonHtmlType.button,
            attributes: {'value': 'Input'}, // Text comes from value
          ),
          const Button(
            [], // Children are empty
            tag: 'input',
            htmlType: ButtonHtmlType.submit,
            attributes: {'value': 'Submit'}, // Text comes from value
          ),
          const Button(
            [],
            tag: 'input',
            htmlType: ButtonHtmlType
                .button, // DaisyUI uses type="radio" but applies .btn; use htmlType if it means type attribute
            attributes: {'type': 'radio', 'aria-label': 'Radio'},
          ),
          const Button(
            [],
            tag: 'input',
            htmlType: ButtonHtmlType
                .button, // DaisyUI uses type="checkbox" but applies .btn
            attributes: {'type': 'checkbox', 'aria-label': 'Checkbox'},
          ),
          const Button(
            [], // Children are empty
            tag: 'input',
            htmlType: ButtonHtmlType.reset,
            attributes: {'value': 'Reset'}, // Text comes from value
          ),
        ],
        code: '''
// Anchor styled as button using Deepyr Button
Button([text('Link')], tag: 'a', attributes: {'href': '#'}),

// Standard Button component (renders <button type="submit">)
Button([text('Button')], htmlType: ButtonHtmlType.submit),

// Inputs styled as buttons using Deepyr Button
Button([], tag: 'input', htmlType: ButtonHtmlType.button, attributes: {'value': 'Input'}),
Button([], tag: 'input', htmlType: ButtonHtmlType.submit, attributes: {'value': 'Submit'}),
Button([], tag: 'input', attributes: {'type': 'radio', 'aria-label': 'Radio'}),
Button([], tag: 'input', attributes: {'type': 'checkbox', 'aria-label': 'Checkbox'}),
Button([], tag: 'input', htmlType: ButtonHtmlType.reset, attributes: {'value': 'Reset'}),
''',
      ),

      // ~Disabled buttons
      ComponentPreview(
        title: 'Disabled buttons',
        preview: [
          Button(
            [text('Disabled using attribute')],
            attributes: {'disabled': ''},
          ),
          Button(
            [text('Disabled using class name')],
            style: [Button.disabled],
          ),
        ],
        code: '''
// Using HTML 'disabled' attribute
Button([text('Disabled using attribute')], attributes: {'disabled': ''}),

// Using DaisyUI 'btn-disabled' class via modifier
// This will also add tabindex="-1" and aria-disabled="true"
Button([text('Disabled using class name')], style: [Button.disabled]),
''',
      ),

      // ~Square button and circle button
      ComponentPreview(
        title: 'Square button and circle button',
        description: 'Square aspect ratio or with rounded corners',
        preview: [
          Button(
            [
              Icon('favorite', style: [TextUtil.lg]),
            ],
            style: [Button.square],
          ),
          Button(
            [
              Icon('favorite', style: [TextUtil.lg]),
            ],
            style: [Button.circle],
          ),
        ],
        code: '''
Button(
  [Icon('favorite', style: [TextUtil.lg])],
  style: [Button.square],
),
Button(
  [Icon('favorite', style: [TextUtil.lg])],
  style: [Button.circle],
),
''',
      ),

      // ~Button with Icon
      ComponentPreview(
        title: 'Button with Icon',
        preview: [
          Button([
            Icon('favorite', style: [TextUtil.lg]),
            text('Like'),
          ]),
          Button([
            text('Like'),
            Icon('favorite', style: [TextUtil.lg]),
          ]),
        ],
        code: '''
Button([
  Icon('favorite', style: [TextUtil.lg]),
  text('Like'),
]),
Button([
  text('Like'),
  Icon('favorite', style: [TextUtil.lg]),
]),
''',
      ),

      // ~Button block
      ComponentPreview(
        title: 'Button block',
        preview: [
          Button([text('block')], style: [Button.block]),
        ],
        code: '''
Button([text('block')], style: [Button.block])
''',
      ),

      // ~Button with loading spinner
      ComponentPreview(
        title: 'Button with loading spinner',
        preview: [
          Button(
            [span(classes: 'loading loading-spinner', [])],
            style: [Button.square],
          ),
          Button([
            span(classes: 'loading loading-spinner', []),
            text('loading'),
          ]),
        ],
        code: '''
Button(
  [span(classes: 'loading loading-spinner', [])],
  style: [Button.square],
),
Button([
  span(classes: 'loading loading-spinner', []),
  text('loading'),
]),
''',
      ),

      // ~Login buttons
      ComponentPreview(
        title: 'Login buttons',
        preview: [
          // Email
          Button(
            [_emailIcon(), text('Login with Email')],
            style: [Button.wide],
            classes: 'bg-white text-black border-[#e5e5e5] hover:bg-gray-100',
          ),
          // GitHub
          Button(
            [_githubIcon(), text('Login with GitHub')],
            style: [Button.wide],
            classes: 'bg-black text-white border-black hover:bg-gray-800',
          ),
          // Google
          Button(
            [_googleIcon(), text('Login with Google')],
            style: [Button.wide],
            classes: 'bg-white text-black border-[#e5e5e5] hover:bg-gray-100',
          ),
          // Facebook
          Button(
            [_facebookIcon(), text('Login with Facebook')],
            style: [Button.wide],
            classes:
                'bg-[#1A77F2] text-white border-[#005fd8] hover:bg-blue-600',
          ),
          // X
          Button(
            [_xIcon(), text('Login with X')],
            style: [Button.wide],
            classes: 'bg-black text-white border-black hover:bg-gray-800',
          ),
          // Kakao
          Button(
            [_kakaoIcon(), text('카카오 로그인')],
            style: [Button.wide],
            classes:
                'bg-[#FEE502] text-[#181600] border-[#f1d800] hover:bg-yellow-400',
          ),
          // Apple
          Button(
            [_appleIcon(), text('Login with Apple')],
            style: [Button.wide, TextUtil.bold.at(Breakpoint.sm)],
            classes: 'bg-black text-white border-black hover:bg-gray-800',
          ),
          // Amazon
          Button(
            [_amazonIcon(), text('Login with Amazon')],
            style: [Button.wide],
            classes:
                'bg-[#FF9900] text-black border-[#e17d00] hover:bg-orange-500',
          ),
          // Microsoft
          Button(
            [_microsoftIcon(), text('Login with Microsoft')],
            style: [Button.wide],
            classes: 'bg-[#2F2F2F] text-white border-black hover:bg-gray-700',
          ),
          // Line
          Button(
            [_lineIcon(), text('LINEでログイン')],
            style: [Button.wide],
            classes:
                'bg-[#03C755] text-white border-[#00b544] hover:bg-green-600',
          ),
          // Slack
          Button(
            [_slackIcon(), text('Login with Slack')],
            style: [Button.wide],
            classes:
                'bg-[#622069] text-white border-[#591660] hover:bg-purple-700',
          ),
          // LinkedIn
          Button(
            [_linkedinIcon(), text('Login with LinkedIn')],
            style: [Button.wide],
            classes:
                'bg-[#0967C2] text-white border-[#0059b3] hover:bg-blue-700',
          ),
          // VK
          Button(
            [_vkIcon(), text('Login with VK')],
            style: [Button.wide],
            classes:
                'bg-[#47698F] text-white border-[#35567b] hover:bg-blue-800',
          ),
          // WeChat
          Button(
            [_wechatIcon(), text('Login with WeChat')],
            style: [Button.wide],
            classes:
                'bg-[#5EBB2B] text-white border-[#4eaa0c] hover:bg-green-700',
          ),
          // MetaMask
          Button(
            [_metamaskIcon(), text('Login with MetaMask')],
            style: [Button.wide],
            classes: 'bg-white text-black border-[#e5e5e5] hover:bg-gray-100',
          ),
        ],
        layoutDirection: PreviewLayoutDirection.vertical,
        code: '''
// Note: Icon functions like _emailIcon() return Component instances (e.g., an inline SVG).
// Email
Button(
  [_emailIcon(), text('Login with Email')],
  classes: 'bg-white text-black border-[#e5e5e5] hover:bg-gray-100',
),
// GitHub
Button(
  [_githubIcon(), text('Login with GitHub')],
  classes: 'bg-black text-white border-black hover:bg-gray-800',
),
// Google
Button(
  [_googleIcon(), text('Login with Google')],
  classes: 'bg-white text-black border-[#e5e5e5] hover:bg-gray-100',
),
// Facebook
Button(
  [_facebookIcon(), text('Login with Facebook')],
  classes: 'bg-[#1A77F2] text-white border-[#005fd8] hover:bg-blue-600',
),
// X
Button(
  [_xIcon(), text('Login with X')],
  classes: 'bg-black text-white border-black hover:bg-gray-800',
),
// Kakao
Button(
  [_kakaoIcon(), text('카카오 로그인')],
  classes: 'bg-[#FEE502] text-[#181600] border-[#f1d800] hover:bg-yellow-400',
),
// Apple
Button(
  [_appleIcon(), text('Login with Apple')],
  classes: 'bg-black text-white border-black hover:bg-gray-800',
),
// Amazon
Button(
  [_amazonIcon(), text('Login with Amazon')],
  classes: 'bg-[#FF9900] text-black border-[#e17d00] hover:bg-orange-500',
),
// Microsoft
Button(
  [_microsoftIcon(), text('Login with Microsoft')],
  classes: 'bg-[#2F2F2F] text-white border-black hover:bg-gray-700',
),
// Line
Button(
  [_lineIcon(), text('LINEでログイン')],
  classes: 'bg-[#03C755] text-white border-[#00b544] hover:bg-green-600',
),
// Slack
Button(
  [_slackIcon(), text('Login with Slack')],
  classes: 'bg-[#622069] text-white border-[#591660] hover:bg-purple-700',
),
// LinkedIn
Button(
  [_linkedinIcon(), text('Login with LinkedIn')],
  classes: 'bg-[#0967C2] text-white border-[#0059b3] hover:bg-blue-700',
),
// VK
Button(
  [_vkIcon(), text('Login with VK')],
  classes: 'bg-[#47698F] text-white border-[#35567b] hover:bg-blue-800',
),
// WeChat
Button(
  [_wechatIcon(), text('Login with WeChat')],
  classes: 'bg-[#5EBB2B] text-white border-[#4eaa0c] hover:bg-green-700',
),
// MetaMask
Button(
  [_metamaskIcon(), text('Login with MetaMask')],
  classes: 'bg-white text-black border-[#e5e5e5] hover:bg-gray-100',
),
''',
      ),
    ]);
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/button_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/button_preview_icons.dart -->
// ************************************************************************** //
//                            Login Button SVGs                               //
// ************************************************************************** //
// These functions generate the SVG icons used in the login button examples.
// They use the component functions defined in ../components/html.dart (based on your svg.dart.txt)
// and handle <g> tags via DomComponent as g() is not defined in the provided file.
// ************************************************************************** //

part of 'button_preview.dart'; // Assuming this code goes into button_preview.dart

// --- Email Icon ---

Component _emailIcon() {
  return svg(
    [
      Component.element(
        tag: 'g',
        attributes: {
          'stroke-linejoin': 'round',
          'stroke-linecap': 'round',
          'stroke-width': '2',
          'fill': 'none',
          'stroke': 'black',
        },
        children: [
          rect([], width: '20', height: '16', x: '2', y: '4', attributes: {'rx': '2'}),
          path([], d: 'm22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7'),
        ],
      ),
    ],
    width: const Unit.pixels(16),
    height: const Unit.pixels(16),
    viewBox: '0 0 24 24',
    attributes: {'aria-label': 'Email icon'},
  );
}

// --- GitHub Icon ---
Component _githubIcon() {
  return svg(
    [
      path(
        [],
        fill: const Color('white'),
        d: 'M12,2A10,10 0 0,0 2,12C2,16.42 4.87,20.17 8.84,21.5C9.34,21.58 9.5,21.27 9.5,21C9.5,20.77 9.5,20.14 9.5,19.31C6.73,19.91 6.14,17.97 6.14,17.97C5.68,16.81 5.03,16.5 5.03,16.5C4.12,15.88 5.1,15.9 5.1,15.9C6.1,15.97 6.63,16.93 6.63,16.93C7.5,18.45 8.97,18 9.54,17.76C9.63,17.11 9.89,16.67 10.17,16.42C7.95,16.17 5.62,15.31 5.62,11.5C5.62,10.39 6,9.5 6.65,8.79C6.55,8.54 6.2,7.5 6.75,6.15C6.75,6.15 7.59,5.88 9.5,7.17C10.29,6.95 11.15,6.84 12,6.84C12.85,6.84 13.71,6.95 14.5,7.17C16.41,5.88 17.25,6.15 17.25,6.15C17.8,7.5 17.45,8.54 17.35,8.79C18,9.5 18.38,10.39 18.38,11.5C18.38,15.32 16.04,16.16 13.81,16.41C14.17,16.72 14.5,17.33 14.5,18.26C14.5,19.6 14.5,20.68 14.5,21C14.5,21.27 14.66,21.59 15.17,21.5C19.14,20.16 22,16.42 22,12A10,10 0 0,0 12,2Z',
      ),
    ],
    width: const Unit.pixels(16),
    height: const Unit.pixels(16),
    viewBox: '0 0 24 24',
    attributes: {'aria-label': 'GitHub logo'},
  );
}

// --- Google Icon ---
Component _googleIcon() {
  return svg(
    [
      Component.element(
        tag: 'g',
        children: [
          path([], d: 'm0 0H512V512H0', fill: const Color('#fff')),
          path(
            [],
            fill: const Color('#34a853'),
            d: 'M153 292c30 82 118 95 171 60h62v48A192 192 0 0190 341',
          ),
          path(
            [],
            fill: const Color('#4285f4'),
            d: 'm386 400a140 175 0 0053-179H260v74h102q-7 37-38 57',
          ),
          path([], fill: const Color('#fbbc02'), d: 'm90 341a208 200 0 010-171l63 49q-12 37 0 73'),
          path(
            [],
            fill: const Color('#ea4335'),
            d: 'm153 219c22-69 116-109 179-50l55-54c-78-75-230-72-297 55',
          ),
        ],
      ),
    ],
    width: const Unit.pixels(16),
    height: const Unit.pixels(16),
    viewBox: '0 0 512 512',
    attributes: {'aria-label': 'Google logo'},
  );
}

// --- Facebook Icon ---
Component _facebookIcon() {
  return svg(
    [
      path(
        [],
        fill: const Color('white'),
        d: 'M8 12h5V8c0-6 4-7 11-6v5c-4 0-5 0-5 3v2h5l-1 6h-4v12h-6V18H8z',
      ),
    ],
    width: const Unit.pixels(16),
    height: const Unit.pixels(16),
    viewBox: '0 0 32 32',
    attributes: {'aria-label': 'Facebook logo'},
  );
}

// --- X Icon ---
Component _xIcon() {
  return svg(
    [
      path(
        [],
        fill: const Color('currentColor'),
        d: 'm236 0h46l-101 115 118 156h-92.6l-72.5-94.8-83 94.8h-46l107-123-113-148h94.9l65.5 86.6zm-16.1 244h25.5l-165-218h-27.4z',
      ),
    ],
    width: const Unit.pixels(16),
    height: const Unit.pixels(12),
    viewBox: '0 0 300 271',
    attributes: {'aria-label': 'X logo'},
  );
}

// --- Kakao Icon ---
Component _kakaoIcon() {
  return svg(
    [
      path(
        [],
        fill: const Color('#181600'),
        d: 'M255.5 48C299.345 48 339.897 56.5332 377.156 73.5996C414.415 90.666 443.871 113.873 465.522 143.22C487.174 172.566 498 204.577 498 239.252C498 273.926 487.174 305.982 465.522 335.42C443.871 364.857 414.46 388.109 377.291 405.175C340.122 422.241 299.525 430.775 255.5 430.775C241.607 430.775 227.262 429.781 212.467 427.795C148.233 472.402 114.042 494.977 109.892 495.518C107.907 496.241 106.012 496.15 104.208 495.248C103.486 494.706 102.945 493.983 102.584 493.08C102.223 492.177 102.043 491.365 102.043 490.642V489.559C103.126 482.515 111.335 453.169 126.672 401.518C91.8486 384.181 64.1974 361.2 43.7185 332.575C23.2395 303.951 13 272.843 13 239.252C13 204.577 23.8259 172.566 45.4777 143.22C67.1295 113.873 96.5849 90.666 133.844 73.5996C171.103 56.5332 211.655 48 255.5 48Z',
      ),
    ],
    width: const Unit.pixels(16),
    height: const Unit.pixels(16),
    viewBox: '0 0 512 512',
    attributes: {'aria-label': 'Kakao logo'},
  );
}

// --- Apple Icon ---
Component _appleIcon() {
  return svg(
    [
      path(
        [],
        fill: const Color('white'),
        d: 'M1006.933 812.8c-32 153.6-115.2 211.2-147.2 249.6-32 25.6-121.6 25.6-153.6 6.4-38.4-25.6-134.4-25.6-166.4 0-44.8 32-115.2 19.2-128 12.8-256-179.2-352-716.8 12.8-774.4 64-12.8 134.4 32 134.4 32 51.2 25.6 70.4 12.8 115.2-6.4 96-44.8 243.2-44.8 313.6 76.8-147.2 96-153.6 294.4 19.2 403.2zM802.133 64c12.8 70.4-64 224-204.8 230.4-12.8-38.4 32-217.6 204.8-230.4z',
      ),
    ],
    width: const Unit.pixels(16),
    height: const Unit.pixels(16),
    viewBox: '0 0 1195 1195',
    attributes: {'aria-label': 'Apple logo'},
  );
}

// --- Amazon Icon ---
Component _amazonIcon() {
  return svg(
    [
      Component.element(
        tag: 'g',
        attributes: {'fill': 'black'},
        children: [
          path(
            [],
            d: 'M14.463 13.831c-1.753 1.294-4.291 1.981-6.478 1.981-3.066 0-5.825-1.131-7.912-3.019-.163-.147-.019-.35.178-.234 2.253 1.313 5.041 2.1 7.919 2.1 1.941 0 4.075-.403 6.041-1.238.294-.125.544.197.253.409z',
          ),
          path(
            [],
            d: 'M15.191 13c-.225-.287-1.481-.137-2.047-.069-.172.019-.197-.128-.044-.238 1.003-.703 2.647-.5 2.838-.266.194.238-.05 1.884-.991 2.672-.144.122-.281.056-.219-.103.216-.528.688-1.709.463-1.997zM11.053 11.838l.003.003c.387-.341 1.084-.95 1.478-1.278.156-.125.128-.334.006-.509-.353-.488-.728-.884-.728-1.784v-3c0-1.272.088-2.438-.847-3.313-.738-.706-1.963-.956-2.9-.956-1.831 0-3.875.684-4.303 2.947-.047.241.131.369.287.403l1.866.203c.175-.009.3-.181.334-.356.159-.778.813-1.156 1.547-1.156.397 0 .847.144 1.081.5.269.397.234.938.234 1.397v.25c-1.116.125-2.575.206-3.619.666-1.206.522-2.053 1.584-2.053 3.147 0 2 1.259 3 2.881 3 1.369 0 2.116-.322 3.172-1.403.35.506.463.753 1.103 1.284a.395.395 0 0 0 .456-.044zm-1.94-4.694c0 .75.019 1.375-.359 2.041-.306.544-.791.875-1.331.875-.737 0-1.169-.563-1.169-1.394 0-1.641 1.472-1.938 2.863-1.938v.416z',
          ),
        ],
      ),
    ],
    width: const Unit.pixels(16),
    height: const Unit.pixels(16),
    viewBox: '0 0 16 16',
    attributes: {'aria-label': 'Amazon logo'},
  );
}

// --- Microsoft Icon ---
Component _microsoftIcon() {
  return svg(
    [
      path([], d: 'M96 96H247V247H96', fill: const Color('#f24f23')),
      path([], d: 'M265 96V247H416V96', fill: const Color('#7eba03')),
      path([], d: 'M96 265H247V416H96', fill: const Color('#3ca4ef')),
      path([], d: 'M265 265H416V416H265', fill: const Color('#f9ba00')),
    ],
    width: const Unit.pixels(16),
    height: const Unit.pixels(16),
    viewBox: '0 0 512 512',
    attributes: {'aria-label': 'Microsoft logo'},
  );
}

// --- Line Icon ---
Component _lineIcon() {
  return svg(
    [
      Component.element(
        tag: 'g',
        attributes: {'fill-rule': 'evenodd', 'stroke-linejoin': 'round', 'fill': 'white'},
        children: [
          path(
            [],
            attributes: {'fill-rule': 'nonzero'},
            d: 'M12.91 6.57c.232 0 .42.19.42.42 0 .23-.188.42-.42.42h-1.17v.75h1.17a.42.42 0 1 1 0 .84h-1.59a.42.42 0 0 1-.418-.42V5.4c0-.23.188-.42.42-.42h1.59a.42.42 0 0 1-.002.84h-1.17v.75h1.17zm-2.57 2.01a.421.421 0 0 1-.757.251l-1.63-2.217V8.58a.42.42 0 0 1-.42.42.42.42 0 0 1-.418-.42V5.4a.418.418 0 0 1 .755-.249L9.5 7.366V5.4c0-.23.188-.42.42-.42.23 0 .42.19.42.42v3.18zm-3.828 0c0 .23-.188.42-.42.42a.42.42 0 0 1-.418-.42V5.4c0-.23.188-.42.42-.42.23 0 .418.19.418.42v3.18zM4.868 9h-1.59c-.23 0-.42-.19-.42-.42V5.4c0-.23.19-.42.42-.42.232 0 .42.19.42.42v2.76h1.17a.42.42 0 1 1 0 .84M16 6.87C16 3.29 12.41.376 8 .376S0 3.29 0 6.87c0 3.208 2.846 5.896 6.69 6.405.26.056.615.172.705.394.08.2.053.518.026.722 0 0-.092.565-.113.685-.035.203-.16.79.693.432.854-.36 4.607-2.714 6.285-4.646C15.445 9.594 16 8.302 16 6.87',
          ),
        ],
      ),
    ],
    width: const Unit.pixels(16),
    height: const Unit.pixels(16),
    viewBox: '0 0 16 16',
    attributes: {'aria-label': 'Line logo'},
  );
}

// --- Slack Icon ---
Component _slackIcon() {
  return svg(
    [
      Component.element(
        tag: 'g',
        attributes: {'stroke-linecap': 'round', 'stroke-width': '78'},
        children: [
          path([], stroke: const Color('#36c5f0'), d: 'm110 207h97m0-97h.1v-.1'),
          path([], stroke: const Color('#2eb67d'), d: 'm305 110v97m97 0v.1h.1'),
          path([], stroke: const Color('#ecb22e'), d: 'm402 305h-97m0 97h-.1v.1'),
          path([], stroke: const Color('#e01e5a'), d: 'M110 305h.1v.1m97 0v97'),
        ],
      ),
    ],
    width: const Unit.pixels(16),
    height: const Unit.pixels(16),
    viewBox: '0 0 512 512',
    attributes: {'aria-label': 'Slack logo'},
  );
}

// --- LinkedIn Icon ---
Component _linkedinIcon() {
  return svg(
    [
      path(
        [],
        fill: const Color('white'),
        attributes: {'fill-rule': 'evenodd'},
        d: 'M26.111,3H5.889c-1.595,0-2.889,1.293-2.889,2.889V26.111c0,1.595,1.293,2.889,2.889,2.889H26.111c1.595,0,2.889-1.293,2.889-2.889V5.889c0-1.595-1.293-2.889-2.889-2.889ZM10.861,25.389h-3.877V12.87h3.877v12.519Zm-1.957-14.158c-1.267,0-2.293-1.034-2.293-2.31s1.026-2.31,2.293-2.31,2.292,1.034,2.292,2.31-1.026,2.31-2.292,2.31Zm16.485,14.158h-3.858v-6.571c0-1.802-.685-2.809-2.111-2.809-1.551,0-2.362,1.048-2.362,2.809v6.571h-3.718V12.87h3.718v1.686s1.118-2.069,3.775-2.069,4.556,1.621,4.556,4.975v7.926Z',
      ),
    ],
    width: const Unit.pixels(16),
    height: const Unit.pixels(16),
    viewBox: '0 0 32 32',
    attributes: {'aria-label': 'LinkedIn logo'},
  );
}

// --- VK Icon ---
Component _vkIcon() {
  return svg(
    [
      Component.element(
        tag: 'g',
        attributes: {'fill': 'white'},
        children: [
          path(
            [],
            d: 'M2077 904q23 64-150 294-24 32-65 85-78 100-90 131-17 41 14 81 17 21 81 82h1l1 1 1 1 2 2q141 131 191 221 3 5 6.5 12.5t7 26.5-.5 34-25 27.5-59 12.5l-256 4q-24 5-56-5t-52-22l-20-12q-30-21-70-64t-68.5-77.5-61-58-56.5-15.5q-3 1-8 3.5t-17 14.5-21.5 29.5-17 52-6.5 77.5q0 15-3.5 27.5t-7.5 18.5l-4 5q-18 19-53 22h-115q-71 4-146-16.5t-131.5-53-103-66T648 1722l-25-24q-10-10-27.5-30t-71.5-91-106-151-122.5-211T165 943q-6-16-6-27t3-16l4-6q15-19 57-19l274-2q12 2 23 6.5t16 8.5l5 3q16 11 24 32 20 50 46 103.5t41 81.5l16 29q29 60 56 104t48.5 68.5T814 1348t34 14 27-5q2-1 5-5t12-22 13.5-47 9.5-81 0-125q-2-40-9-73t-14-46l-6-12q-25-34-85-43-13-2 5-24 17-19 38-30 53-26 239-24 82 1 135 13 20 5 33.5 13.5t20.5 24 10.5 32 3.5 45.5-1 55-2.5 70.5-1.5 82.5q0 11-1 42t-.5 48 3.5 40.5 11.5 39 22.5 24.5q8 2 17 4t26-11 38-34.5 52-67 68-107.5q60-104 107-225 4-10 10-17.5t11-10.5l4-3 5-2.5 13-3 20-.5 288-2q39-5 64 2.5t31 16.5z',
          ),
        ],
      ),
    ],
    width: const Unit.pixels(16),
    height: const Unit.pixels(16),
    viewBox: '0 0 2240 2240',
    attributes: {'aria-label': 'VK logo'},
  );
}

// --- WeChat Icon ---
Component _wechatIcon() {
  return svg(
    [
      Component.element(
        tag: 'g',
        attributes: {'fill': 'white'},
        children: [
          path(
            [],
            d: 'M11.606,3.068C5.031,3.068,0,7.529,0,12.393s4.344,7.681,4.344,7.681l-.706,2.676c-.093,.353,.284,.644,.602,.464l3.173-1.798c1.403,.447,4.381,.59,4.671,.603-.208-.721-.311-1.432-.311-2.095,0-3.754,3.268-9.04,10.532-9.04,.165,0,.331,.004,.496,.011-.965-4.627-5.769-7.827-11.195-7.827Zm-4.327,7.748c-.797,0-1.442-.646-1.442-1.442s.646-1.442,1.442-1.442,1.442,.646,1.442,1.442-.646,1.442-1.442,1.442Zm8.386,0c-.797,0-1.442-.646-1.442-1.442s.646-1.442,1.442-1.442,1.442,.646,1.442,1.442-.646,1.442-1.442,1.442Z',
          ),
          path(
            [],
            d: 'M32,19.336c0-4.26-4.998-7.379-9.694-7.379-6.642,0-9.459,4.797-9.459,7.966s2.818,7.966,9.459,7.966c1.469,0,2.762-.211,3.886-.584l2.498,1.585c.197,.125,.447-.052,.394-.279l-.567-2.46c2.36-1.643,3.483-4.234,3.483-6.815Zm-12.73-.81c-.704,0-1.275-.571-1.275-1.275s.571-1.275,1.275-1.275,1.275,.571,1.275,1.275c0,.705-.571,1.275-1.275,1.275Zm6.373,0c-.704,0-1.275-.571-1.275-1.275s.571-1.275,1.275-1.275,1.275,.571,1.275,1.275-.571,1.275-1.275,1.275Z',
          ),
        ],
      ),
    ],
    width: const Unit.pixels(16),
    height: const Unit.pixels(16),
    viewBox: '0 0 32 32',
    attributes: {'aria-label': 'WeChat logo'},
  );
}

// --- MetaMask Icon ---
// Note: Styles from <defs> are applied directly as fill/stroke attributes.
Component _metamaskIcon() {
  final commonAttrs = <String, String>{'stroke-linecap': 'round', 'stroke-linejoin': 'round'};

  return svg(
    [
      // Path with inline style
      path(
        [],
        d: 'M482.09.5 284.32 147.38l36.58-86.66z',
        fill: const Color('#e2761b'),
        stroke: const Color('#e2761b'),
        attributes: commonAttrs,
      ),
      // Paths with class="b"
      path(
        [],
        d: 'm25.54.5 196.18 148.27-34.79-88.05zM410.93 340.97l-52.67 80.7 112.7 31 32.4-109.91zM4.67 342.76l32.2 109.91 112.7-31-52.67-80.7z',
        fill: const Color('#e4761b'),
        stroke: const Color('#e4761b'),
        attributes: commonAttrs,
      ),
      // More paths with class="b"
      path(
        [],
        d: 'm143.21 204.62-31.41 47.51 111.9 4.97-3.97-120.25zM364.42 204.62l-77.51-69.16-2.59 121.64 111.71-4.97zM149.57 421.67l67.18-32.8-58.04-45.32zM290.88 388.87l67.38 32.8-9.34-78.12z',
        fill: const Color('#e4761b'),
        stroke: const Color('#e4761b'),
        attributes: commonAttrs,
      ),
      // Paths with class="c"
      path(
        [],
        d: 'm358.26 421.67-67.38-32.8 5.37 43.93-.6 18.48zM149.57 421.67l62.61 29.61-.4-18.48 4.97-43.93z',
        fill: const Color('#d7c1b3'),
        stroke: const Color('#d7c1b3'),
        attributes: commonAttrs,
      ),
      // Paths with class="d"
      path(
        [],
        d: 'm213.17 314.54-56.05-16.5 39.55-18.09zM294.46 314.54l16.5-34.59 39.75 18.09z',
        fill: const Color('#233447'),
        stroke: const Color('#233447'),
        attributes: commonAttrs,
      ),
      // Paths with class="e"
      path(
        [],
        d: 'm149.57 421.67 9.54-80.7-62.21 1.79zM348.72 340.97l9.54 80.7 52.67-78.91zM396.03 252.13l-111.71 4.97 10.34 57.44 16.5-34.59 39.75 18.09zM157.12 298.04l39.75-18.09 16.3 34.59 10.53-57.44-111.9-4.97z',
        fill: const Color('#cd6116'),
        stroke: const Color('#cd6116'),
        attributes: commonAttrs,
      ),
      // Paths with class="f"
      path(
        [],
        d: 'm111.8 252.13 46.91 91.42-1.59-45.51zM350.91 298.04l-1.99 45.51 47.11-91.42zM223.7 257.1l-10.53 57.44 13.12 67.77 2.98-89.24zM284.32 257.1l-5.36 35.77 2.38 89.44 13.32-67.77z',
        fill: const Color('#e4751f'),
        stroke: const Color('#e4751f'),
        attributes: commonAttrs,
      ),
      // Paths with class="g"
      path(
        [],
        d: 'm294.66 314.54-13.32 67.77 9.54 6.56 58.04-45.32 1.99-45.51zM157.12 298.04l1.59 45.51 58.04 45.32 9.54-6.56-13.12-67.77z',
        fill: const Color('#f6851b'),
        stroke: const Color('#f6851b'),
        attributes: commonAttrs,
      ),
      // Path with fill/stroke #c0ad9e
      path(
        [],
        d: 'm295.65 451.28.6-18.48-4.97-4.38h-74.93l-4.57 4.38.4 18.48-62.61-29.61 21.86 17.88 44.32 30.81h76.13l44.52-30.81 21.86-17.88z',
        fill: const Color('#c0ad9e'),
        stroke: const Color('#c0ad9e'),
        attributes: commonAttrs,
      ),
      // Path with fill/stroke #161616
      path(
        [],
        d: 'm290.88 388.87-9.54-6.56h-55.05l-9.54 6.56-4.97 43.93 4.57-4.38h74.93l4.97 4.38z',
        fill: const Color('#161616'),
        stroke: const Color('#161616'),
        attributes: commonAttrs,
      ),
      // Paths with class="j"
      path(
        [],
        d: 'm490.44 156.92 16.89-81.09L482.09.5 290.88 142.41l73.54 62.21 103.95 30.41 23.06-26.83-9.94-7.15 15.9-14.51-12.32-9.54 15.9-12.13zM.5 75.83l16.89 81.09-10.73 7.95L22.56 177l-12.12 9.54 15.9 14.51-9.94 7.15 22.86 26.83 103.95-30.41 73.54-62.21L25.54.5z',
        fill: const Color('#763d16'),
        stroke: const Color('#763d16'),
        attributes: commonAttrs,
      ),
      // More paths with class="g"
      path(
        [],
        d: 'm468.37 235.03-103.95-30.41 31.61 47.51-47.11 91.42 62.01-.79h92.43zM143.21 204.62 39.26 235.03 4.67 342.76H96.9l61.81.79-46.91-91.42zM284.32 257.1l6.56-114.69 30.22-81.69H186.93l29.82 81.69 6.95 114.69 2.39 36.17.2 89.04h55.05l.4-89.04z',
        fill: const Color('#f6851b'),
        stroke: const Color('#f6851b'),
        attributes: commonAttrs,
      ),
    ],
    width: const Unit.pixels(16),
    height: const Unit.pixels(16),
    viewBox: '0 0 507.83 470.86',
    attributes: {'aria-label': 'MetaMask logo'},
  );
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/button_preview_icons.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/card_preview.dart -->
import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart' hide Spacing;

import '../../components/component_preview.dart';

// TODO CHECK CODE modifiers vs classes
class CardPreview extends StatelessComponent {
  const CardPreview({super.key});

  @override
  Component build(BuildContext context) {
    return div(classes: 'max-w-5xl mx-auto px-4', [
      // Basic Card
      ComponentPreview(
        title: 'Card',
        preview: [
          Card(
            style: [Size.w96, BgUtil.base100, Effects.shadowSm],
            [
              Figure([
                img(
                  src: 'images/sneaker.png',
                  alt: 'Shoes',
                ),
              ]),
              CardBody([
                CardTitle([text('Card Title')]),
                p([
                  text(
                    'A card component has a figure, a body part, and inside body there are title and actions parts',
                  ),
                ]),
                CardActions(
                  style: [Alignment.justifyEnd],
                  [
                    Button([text('Buy Now')], style: [Button.primary]),
                  ],
                ),
              ]),
            ],
          ),
        ],
        code: '''
Card(
  style: [Size.w96, BgUtil.base100, Effects.shadowSm],
  [
    Figure([img(src: 'image.png', alt: 'Shoes')]),
    CardBody([
      CardTitle([text('Card Title')]),
      p([text('A card component has a figure, a body part, and inside body there are title and actions parts')]),
      CardActions(
        style: [Alignment.justifyEnd],
        [
          Button([text('Buy Now')], style: [Button.primary]),
        ],
      ),
    ]),
  ],
),''',
      ),

      // Pricing Card
      ComponentPreview(
        title: 'Pricing Card',
        preview: [
          Card(
            style: [Size.w96, BgUtil.base100, Effects.shadowSm],
            [
              CardBody(
                // CardBody can still use modifiers if it's a UiComponent
                // If CardBody itself needs flex, it can take style: [Layout.flex, Layout.flexCol]
                // For simplicity, let's assume CardBody doesn't impose flex by default, so children handle it.
                [
                  Badge(
                    [text('Most Popular')],
                    style: [Badge.xs, Badge.warning],
                  ),
                  div(classes: [Layout.flex, Alignment.justifyBetween].toClasses(), [
                    // Use div for layout
                    h2(classes: 'text-3xl font-bold', [text('Premium')]),
                    span(classes: 'text-xl', [text(r'$29/mo')]),
                  ]),
                  ul(
                    classes: [
                      Spacing.mt(6),
                      Layout.flex,
                      Layout.flexCol,
                      Layout.gap(2),
                      TextUtil.xs,
                    ].toClasses(),
                    [
                      li([
                        Icon(
                          'check',
                          style: [
                            TextUtil.success,
                            Size.w4,
                            Size.h4,
                            Spacing.me(2),
                            Layout.inlineBlock,
                          ],
                        ),
                        span([text('High-resolution image generation')]),
                      ]),
                      li([
                        Icon(
                          'check',
                          style: [
                            TextUtil.success,
                            Size.w4,
                            Size.h4,
                            Spacing.me(2),
                            Layout.inlineBlock,
                          ],
                        ),
                        span([text('Customizable style templates')]),
                      ]),
                      li([
                        Icon(
                          'check',
                          style: [
                            TextUtil.success,
                            Size.w4,
                            Size.h4,
                            Spacing.me(2),
                            Layout.inlineBlock,
                          ],
                        ),
                        span([text('Batch processing capabilities')]),
                      ]),
                      li([
                        Icon(
                          'check',
                          style: [
                            TextUtil.success,
                            Size.w4,
                            Size.h4,
                            Spacing.me(2),
                            Layout.inlineBlock,
                          ],
                        ),
                        span([text('AI-driven image enhancements')]),
                      ]),
                      li(classes: [Effects.opacity(50)].toClasses(), [
                        Icon(
                          'check',
                          style: [
                            TextUtil.baseContent.on([Is.disabled]),
                            Size.w4,
                            Size.h4,
                            Spacing.me(2),
                            Layout.inlineBlock,
                          ],
                        ),
                        span(
                          classes: [TextUtil.lineThrough].toClasses(),
                          [text('Seamless cloud integration')],
                        ),
                      ]),
                      li(classes: [Effects.opacity(50)].toClasses(), [
                        Icon(
                          'check',
                          style: [
                            TextUtil.baseContent.on([Is.disabled]),
                            Size.w4,
                            Size.h4,
                            Spacing.me(2),
                            Layout.inlineBlock,
                          ],
                        ),
                        span(
                          classes: [TextUtil.lineThrough].toClasses(),
                          [text('Real-time collaboration tools')],
                        ),
                      ]),
                    ],
                  ),
                  div(classes: [Spacing.mt(6)].toClasses(), [
                    Button(
                      [text('Subscribe')],
                      style: [Button.primary, Button.block],
                    ),
                  ]),
                ],
              ),
            ],
          ),
        ],
        code:
            '''
Card(
  style: [Size.w96, BgUtil.base100, Effects.shadowSm],
  [
    CardBody([
      Badge([text('Most Popular')], style: [Badge.xs, Badge.warning]),
      div(classes: '${[Layout.flex, Alignment.justifyBetween].toClasses()}', [
        h2(classes: 'text-3xl font-bold', [text('Premium')]),
        span(classes: 'text-xl', [text('\$29/mo')]),
      ]),
      ul(
        classes: '${[
              Spacing.mt(6),
              Layout.flex,
              Layout.flexCol,
              Layout.gap(2),
              TextUtil.xs,
            ].toClasses()}',
        [
          li([
            Icon('check', style: [TextUtil.success, Size.w4, Size.h4, Spacing.me(2), Layout.inlineBlock]),
            span([text('High-resolution image generation')]),
          ]),
          // ... other list items ...
          li(
            classes: '${[Effects.opacity(50)].toClasses()}',
            [
              Icon('check', style: [TextUtil.baseContent.on([Is.disabled]), Size.w4, Size.h4, Spacing.me(2), Layout.inlineBlock]),
              span(classes: '${[
              TextUtil.lineThrough,
            ].toClasses()}', [text('Seamless cloud integration')]),
            ]
          ),
        ]
      ),
      div(
        classes: '${[Spacing.mt(6)].toClasses()}',
        [
          Button([text('Subscribe')], style: [Button.primary, Button.block]),
        ]
      ),
    ]),
  ],
)''',
      ),

      // Card sizes
      ComponentPreview(
        title: 'Card sizes',
        preview: [
          div(classes: [Layout.grid, Layout.gap(6)].toClasses(), [
            Card(
              style: [Card.xs, Size.w96, BgUtil.base100, Effects.shadowSm],
              [
                CardBody([
                  CardTitle([text('Xsmall Card')]),
                  p([text('A card component has a figure, a body part...')]),
                  CardActions(
                    style: [
                      Alignment.justifyEnd,
                    ],
                    [
                      Button([text('Buy Now')], style: [Button.primary]),
                    ],
                  ),
                ]),
              ],
            ),
            Card(
              style: [Card.sm, Size.w96, BgUtil.base100, Effects.shadowSm],
              [
                CardBody([
                  CardTitle([text('Small Card')]),
                  p([text('A card component has a figure, a body part...')]),
                  CardActions(
                    style: [
                      Alignment.justifyEnd,
                    ],
                    [
                      Button([text('Buy Now')], style: [Button.primary]),
                    ],
                  ),
                ]),
              ],
            ),
            Card(
              style: [Card.md, Size.w96, BgUtil.base100, Effects.shadowSm],
              [
                CardBody([
                  CardTitle([text('Medium Card')]),
                  p([text('A card component has a figure, a body part...')]),
                  CardActions(
                    style: [
                      Alignment.justifyEnd,
                    ],
                    [
                      Button([text('Buy Now')], style: [Button.primary]),
                    ],
                  ),
                ]),
              ],
            ),
            Card(
              style: [Card.lg, Size.w96, BgUtil.base100, Effects.shadowSm],
              [
                CardBody([
                  CardTitle([text('Large Card')]),
                  p([text('A card component has a figure, a body part...')]),
                  CardActions(
                    style: [
                      Alignment.justifyEnd,
                    ],
                    [
                      Button([text('Buy Now')], style: [Button.primary]),
                    ],
                  ),
                ]),
              ],
            ),
            Card(
              style: [Card.xl, Size.w96, BgUtil.base100, Effects.shadowSm],
              [
                CardBody([
                  CardTitle([text('Xlarge Card')]),
                  p([text('A card component has a figure, a body part...')]),
                  CardActions(
                    style: [
                      Alignment.justifyEnd,
                    ],
                    [
                      Button([text('Buy Now')], style: [Button.primary]),
                    ],
                  ),
                ]),
              ],
            ),
          ]),
        ],
        code:
            '''
div( // Wrapper for grid layout in preview
  classes: '${[Layout.grid, Layout.gap(6)].toClasses()}',
  [
    // Card - xs
    Card(
      style: [Card.xs, Size.w96, BgUtil.base100, Effects.shadowSm],
      [ /* CardBody with content */ ],
    ),
    // Card - sm
    Card(
      style: [Card.sm, Size.w96, BgUtil.base100, Effects.shadowSm],
      [ /* CardBody with content */ ],
    ),
    // Card - md (default)
    Card(
      style: [Card.md, Size.w96, BgUtil.base100, Effects.shadowSm],
      [ /* CardBody with content */ ],
    ),
    // Card - lg
    Card(
      style: [Card.lg, Size.w96, BgUtil.base100, Effects.shadowSm],
      [ /* CardBody with content */ ],
    ),
    // Card - xl
    Card(
      style: [Card.xl, Size.w96, BgUtil.base100, Effects.shadowSm],
      [ /* CardBody with content */ ],
    ),
  ]
),
''',
      ),

      // Card with a card-border
      ComponentPreview(
        title: 'Card with a card-border',
        preview: [
          Card(
            style: [Card.border, Size.w96, BgUtil.base100],
            [
              CardBody([
                CardTitle([text('Card Title')]),
                p([text('A card component has a figure, a body part...')]),
                CardActions(
                  style: [
                    Alignment.justifyEnd,
                  ],
                  [
                    Button([text('Buy Now')], style: [Button.primary]),
                  ],
                ),
              ]),
            ],
          ),
        ],
        code: '''
Card(
  style: [Card.border, Size.w96, BgUtil.base100],
  [
    CardBody([
      CardTitle([text('Card Title')]),
      p([text('A card component has a figure, a body part...')]),
      CardActions(
        style: [Alignment.justifyEnd],
        [
          Button([text('Buy Now')], style: [Button.primary]),
        ],
      ),
    ]),
  ],
),''',
      ),

      // Card with a dash border
      ComponentPreview(
        title: 'Card with a dash border',
        preview: [
          Card(
            style: [Card.dash, Size.w96, BgUtil.base100],
            [
              CardBody([
                CardTitle([text('Card Title')]),
                p([text('A card component has a figure, a body part...')]),
                CardActions(
                  style: [
                    Alignment.justifyEnd,
                  ],
                  [
                    Button([text('Buy Now')], style: [Button.primary]),
                  ],
                ),
              ]),
            ],
          ),
        ],
        code: '''
Card(
  style: [Card.dash, Size.w96, BgUtil.base100],
  [
    CardBody([
      CardTitle([text('Card Title')]),
      p([text('A card component has a figure, a body part...')]),
      CardActions(
        style: [Alignment.justifyEnd],
        [
          Button([text('Buy Now')], style: [Button.primary]),
        ],
      ),
    ]),
  ],
),''',
      ),

      // Card with badge
      ComponentPreview(
        title: 'Card with badge',
        preview: [
          Card(
            style: [Size.w96, BgUtil.base100, Effects.shadowSm],
            [
              Figure([
                img(
                  src: 'images/sneaker.png',
                  alt: 'Shoes',
                ),
              ]),
              CardBody([
                CardTitle([
                  text('Card Title'),
                  Badge([text('NEW')], style: [Badge.secondary]),
                ]),
                p([text('A card component has a figure, a body part...')]),
                CardActions(
                  style: [Alignment.justifyEnd],
                  [
                    Badge([text('Fashion')], style: [Badge.outline]),
                    Badge([text('Products')], style: [Badge.outline]),
                  ],
                ),
              ]),
            ],
          ),
        ],
        code: '''
Card(
  style: [Size.w96, BgUtil.base100, Effects.shadowSm],
  [
    Figure([img(src: 'image.png', alt: 'Shoes')]),
    CardBody([
      CardTitle([
        text('Card Title'),
        Badge([text('NEW')], style: [Badge.secondary]),
      ]),
      p([text('A card component has a figure, a body part...')]),
      CardActions(
        style: [Alignment.justifyEnd],
        [
          Badge([text('Fashion')], style: [Badge.outline]),
          Badge([text('Products')], style: [Badge.outline]),
        ],
      ),
    ]),
  ],
),''',
      ),

      // Card with bottom image
      ComponentPreview(
        title: 'Card with bottom image',
        preview: [
          Card(
            style: [Size.w96, BgUtil.base100, Effects.shadowSm],
            [
              CardBody([
                CardTitle([text('Card Title')]),
                p([text('A card component has a figure, a body part...')]),
              ]),
              Figure([
                img(
                  src: 'images/sneaker.png',
                  alt: 'Shoes',
                ),
              ]),
            ],
          ),
        ],
        code: '''
Card(
  style: [Size.w96, BgUtil.base100, Effects.shadowSm],
  [
    CardBody([
      CardTitle([text('Card Title')]),
      p([text('A card component has a figure, a body part...')]),
    ]),
    Figure([img(src: 'image.png', alt: 'Shoes')]),
  ],
),''',
      ),

      // Card with centered content and paddings
      ComponentPreview(
        title: 'Card with centered content and paddings',
        preview: [
          Card(
            style: [Size.w96, BgUtil.base100, Effects.shadowSm],
            [
              Figure(
                // Assuming Effects.roundedBox or a Border.roundedBox utility exists
                [
                  img(
                    src: 'images/sneaker.png',
                    alt: 'Shoes',
                    classes: [Effects.roundedXl].toClasses(),
                  ),
                ],
                style: [Spacing.px(10), Spacing.pt(10)],
              ),
              CardBody(
                [
                  CardTitle([text('Card Title')]),
                  p([text('A card component has a figure, a body part...')]),
                  CardActions([
                    Button([text('Buy Now')], style: [Button.primary]),
                  ]),
                ],
                style: [Alignment.itemsCenter, TextUtil.center],
              ),
            ],
          ),
        ],
        code: '''
Card(
  style: [Size.w96, BgUtil.base100, Effects.shadowSm],
  [
    Figure(
      [img(src: 'image.png', alt: 'Shoes', classes: [Effects.roundedXl].toClasses()],
      style: [Spacing.px(10), Spacing.pt(10)],
    ),
    CardBody(
      [
        CardTitle([text('Card Title')]),
        p([text('A card component has a figure, a body part...')]),
        CardActions([
          Button([text('Buy Now')], style: [Button.primary]),
        ]),
      ],
      style: [Alignment.itemsCenter, TextUtil.center],
    ),
  ],
),''',
      ),

      // Card with image overlay
      ComponentPreview(
        title: 'Card with image overlay',
        preview: [
          Card(
            style: [
              Card.imageFull,
              Size.w96,
              BgUtil.base100,
              Effects.shadowSm,
            ],
            [
              Figure([
                img(
                  src: 'images/sneaker.png',
                  alt: 'Shoes',
                ),
              ]),
              CardBody([
                CardTitle([text('Card Title')]),
                p([text('A card component has a figure, a body part...')]),
                CardActions(
                  style: [Alignment.justifyEnd],
                  [
                    Button([text('Buy Now')], style: [Button.primary]),
                  ],
                ),
              ]),
            ],
          ),
        ],
        code: '''
Card(
  style: [Card.imageFull, Size.w96, BgUtil.base100, Effects.shadowSm],
  [
    Figure([img(src: 'image.png', alt: 'Shoes')]),
    CardBody([
      CardTitle([text('Card Title')]),
      p([text('A card component has a figure, a body part...')]),
      CardActions(
        style: [Alignment.justifyEnd],
        [
          Button([text('Buy Now')], style: [Button.primary]),
        ],
      ),
    ]),
  ],
),''',
      ),

      // Card with no image
      ComponentPreview(
        title: 'Card with no image',
        preview: [
          Card(
            style: [Size.w96, BgUtil.base100, Effects.shadowSm],
            [
              CardBody([
                CardTitle([text('Card title!')]),
                p([text('A card component has a figure, a body part...')]),
                CardActions(
                  style: [Alignment.justifyEnd],
                  [
                    Button([text('Buy Now')], style: [Button.primary]),
                  ],
                ),
              ]),
            ],
          ),
        ],
        code: '''
Card(
  style: [Size.w96, BgUtil.base100, Effects.shadowSm],
  [
    CardBody([
      CardTitle([text('Card title!')]),
      p([text('A card component has a figure, a body part...')]),
      CardActions(
        style: [Alignment.justifyEnd],
        [
          Button([text('Buy Now')], style: [Button.primary]),
        ],
      ),
    ]),
  ],
),''',
      ),

      // Card with custom color
      ComponentPreview(
        title: 'Card with custom color',
        preview: [
          Card(
            style: [Size.w96, BgUtil.primary, TextUtil.primaryContent],
            [
              CardBody([
                CardTitle([text('Card title!')]),
                p([text('A card component has a figure, a body part...')]),
                CardActions(
                  style: [Alignment.justifyEnd],
                  [
                    Button([text('Buy Now')]),
                  ],
                ),
              ]),
            ],
          ),
        ],
        code: '''
Card(
  style: [Size.w96, BgUtil.primary, TextUtil.primaryContent],
  [
    CardBody([
      CardTitle([text('Card title!')]),
      p([text('A card component has a figure, a body part...')]),
      CardActions(
        style: [Alignment.justifyEnd],
        [
          Button([text('Buy Now')]),
        ],
      ),
    ]),
  ],
),''',
      ),

      // Centered card with neutral color
      ComponentPreview(
        title: 'Centered card with neutral color',
        preview: [
          Card(
            style: [Size.w96, BgUtil.neutral, TextUtil.neutralContent],
            [
              CardBody(
                [
                  CardTitle([text('Cookies!')]),
                  p([text('We are using cookies for no reason.')]),
                  CardActions(
                    style: [Alignment.justifyEnd],
                    [
                      Button([text('Accept')], style: [Button.primary]),
                      Button([text('Deny')], style: [Button.ghost]),
                    ],
                  ),
                ],
                style: [Alignment.itemsCenter, TextUtil.center],
              ),
            ],
          ),
        ],
        code: '''
Card(
  style: [Size.w96, BgUtil.neutral, TextUtil.neutralContent],
  [
    CardBody(
      [
        CardTitle([text('Cookies!')]),
        p([text('We are using cookies for no reason.')]),
        CardActions(
          style: [Alignment.justifyEnd],
          [
            Button([text('Accept')], style: [Button.primary]),
            Button([text('Deny')], style: [Button.ghost]),
          ],
        ),
      ],
      style: [Alignment.itemsCenter, TextUtil.center],
    ),
  ],
),''',
      ),

      // Card with action on top
      ComponentPreview(
        title: 'Card with action on top',
        preview: [
          Card(
            style: [Size.w96, BgUtil.base100, Effects.shadowSm],
            [
              CardBody([
                CardActions(
                  style: [Alignment.justifyEnd],
                  [
                    Button(
                      [
                        Icon('close', style: [TextUtil.lg]),
                      ],
                      style: [Button.square, Button.sm],
                    ),
                  ],
                ),
                p([text('We are using cookies for no reason.')]),
              ]),
            ],
          ),
        ],
        code: '''
Card(
  style: [Size.w96, BgUtil.base100, Effects.shadowSm],
  [
    CardBody([
      CardActions(
        style: [Alignment.justifyEnd],
        [
          Button(
            [Icon('close', style: [TextUtil.lg])],
            style: [Button.square, Button.sm],
          ),
        ],
      ),
      p([text('We are using cookies for no reason.')]),
    ]),
  ],
),''',
      ),

      // Card with image on side
      ComponentPreview(
        title: 'Card with image on side',
        preview: [
          Card(
            style: [Card.side, BgUtil.base100, Effects.shadowSm],
            [
              Figure(
                [
                  img(
                    src: 'images/sneaker2.png',
                    alt: 'Shoes',
                  ),
                ],
                style: [
                  Size.w48,
                ],
              ),
              CardBody([
                CardTitle([text('New movie is released!')]),
                p([text('Click the button to watch on Jetflix app.')]),
                CardActions(
                  style: [Alignment.justifyEnd],
                  [
                    Button([text('Watch')], style: [Button.primary]),
                  ],
                ),
              ]),
            ],
          ),
        ],
        code: '''
Card(
  style: [Card.side, BgUtil.base100, Effects.shadowSm],
  [
    Figure([img(src: 'image.webp', alt: 'Movie')]),
    CardBody([
      CardTitle([text('New movie is released!')]),
      p([text('Click the button to watch on Jetflix app.')]),
      CardActions(
        style: [Alignment.justifyEnd],
        [
          Button([text('Watch')], style: [Button.primary]),
        ],
      ),
    ]),
  ],
),''',
      ),

      // Responsive card (vertical on small screen, horizontal on large screen)
      ComponentPreview(
        title: 'Responsive card (vertical on small screen, horizontal on large screen)',
        preview: [
          Card(
            style: [
              BgUtil.base100,
              Effects.shadowSm,
              Card.side.at(Breakpoint.lg),
            ],
            [
              Figure(
                [
                  img(
                    src: 'images/album.png',
                    alt: 'Album',
                  ),
                ],
                style: [
                  Size.maxW96,
                ],
              ),
              CardBody([
                CardTitle([text('New album is released!')]),
                p([text('Click the button to listen on Spotiwhy app.')]),
                CardActions(
                  style: [Alignment.justifyEnd],
                  [
                    Button([text('Listen')], style: [Button.primary]),
                  ],
                ),
              ]),
            ],
          ),
        ],
        code: '''
Card(
  style: [
    BgUtil.base100,
    Effects.shadowSm,
    Card.side.at(Breakpoint.lg)
  ],
  [
    Figure([img(src: 'image.webp', alt: 'Album')]),
    CardBody([
      CardTitle([text('New album is released!')]),
      p([text('Click the button to listen on Spotiwhy app.')]),
      CardActions(
        style: [Alignment.justifyEnd],
        [
          Button([text('Listen')], style: [Button.primary]),
        ],
      ),
    ]),
  ],
),''',
      ),
    ]);
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/card_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/checkbox_preview.dart -->
// This file provides interactive examples for the `deepyr` Checkbox component.
//
// It demonstrates the core functionality, various styles, sizes, colors,
// and the correct state management pattern for a controlled component.

import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart';
import 'package:universal_web/web.dart' show HTMLInputElement, document;

import '../../components/component_preview.dart';

/// A stateful wrapper to demonstrate the `indeterminate` property of a checkbox,
/// which must be set via JavaScript after the element is rendered.
class _IndeterminateCheckboxPreview extends StatefulComponent {
  const _IndeterminateCheckboxPreview();

  @override
  State<_IndeterminateCheckboxPreview> createState() => _IndeterminateCheckboxPreviewState();
}

class _IndeterminateCheckboxPreviewState extends State<_IndeterminateCheckboxPreview> {
  // A unique ID is the idiomatic way to reference a specific DOM element for JS interop.
  final String _checkboxId = 'indeterminate-checkbox-example';

  @override
  void initState() {
    super.initState();
    // After the initial build, find the rendered element by its ID and set its JS property.
    // This is the correct way to handle properties not controllable via HTML attributes.
    if (kIsWeb) {
      Future.delayed(Duration.zero, () {
        final element = document.getElementById(_checkboxId) as HTMLInputElement?;
        if (element != null) {
          element.indeterminate = true;
        }
      });
    }
  }

  @override
  Component build(BuildContext context) {
    // We prevent default click behavior to keep it in the indeterminate state for the preview.
    // The `eventHandlers` property is the correct way to pass custom event listeners.
    return Checkbox(
      id: _checkboxId,
      eventHandlers: {
        'click': [
          (event) {
            if (kIsWeb) event.preventDefault();
          },
        ],
      },
    );
  }
}

/// A simple stateful example to demonstrate the controlled component pattern.
class _StatefulCheckboxExample extends StatefulComponent {
  const _StatefulCheckboxExample();

  @override
  State<_StatefulCheckboxExample> createState() => _StatefulCheckboxExampleState();
}

class _StatefulCheckboxExampleState extends State<_StatefulCheckboxExample> {
  bool _isChecked = false;

  @override
  Component build(BuildContext context) {
    return Component.fragment([
      Checkbox(
        isChecked: _isChecked,
        onToggle: (newValue) {
          setState(() => _isChecked = newValue);
        },
        style: [Checkbox.primary],
      ),
      p(
        [text('The checkbox is ${_isChecked ? "checked" : "unchecked"}')],
        classes: 'mt-2 text-sm',
      ),
    ]);
  }
}

/// Renders a collection of [ComponentPreview] widgets to showcase the
/// functionality and styling of the `deepyr` [Checkbox] component.
class CheckboxPreview extends StatelessComponent {
  const CheckboxPreview({super.key});

  @override
  Component build(BuildContext context) {
    return div(classes: 'max-w-5xl mx-auto px-4 space-y-12', [
      // ~Checkbox
      const ComponentPreview(
        title: 'Checkbox',
        preview: [
          Checkbox(isChecked: true),
        ],
        code: '''
Checkbox(isChecked: true)''',
      ),

      // ~With fieldset and label
      ComponentPreview(
        title: 'With fieldset and label',
        preview: [
          Fieldset(
            [
              Legend([text('Login options')]),
              // For labels with interactive elements, use Jaspr's primitive `label()`.
              // The `for` attribute provides better accessibility.
              label(
                [
                  const Checkbox(id: 'remember-me', isChecked: true),
                  span([text('Remember me')], classes: 'label-text ml-2'),
                ],
                htmlFor: 'remember-me',
                classes: 'label cursor-pointer justify-start',
              ),
            ],
            style: [Size.w64],
            classes: 'p-4 bg-base-100 border border-base-300 rounded-box',
          ),
        ],
        code: '''
Fieldset(
  [
    Legend([text('Login options')]),
    label(
      [
        Checkbox(id: 'remember-me', isChecked: true),
        span([text('Remember me')], classes: 'label-text ml-2'),
      ],
      htmlFor: 'remember-me',
      classes: 'label cursor-pointer justify-start',
    ),
  ],
  style: [Size.w64],
  classes: 'p-4 bg-base-100 border border-base-300 rounded-box',
)''',
      ),

      // ~Sizes
      const ComponentPreview(
        title: 'Sizes',
        preview: [
          Checkbox(isChecked: true, style: [Checkbox.xs]),
          Checkbox(isChecked: true, style: [Checkbox.sm]),
          Checkbox(isChecked: true, style: [Checkbox.md]),
          Checkbox(isChecked: true, style: [Checkbox.lg]),
          Checkbox(isChecked: true, style: [Checkbox.xl]),
        ],
        code: '''
Checkbox(isChecked: true, style: [Checkbox.xs]),
Checkbox(isChecked: true, style: [Checkbox.sm]),
Checkbox(isChecked: true, style: [Checkbox.md]), // Default
Checkbox(isChecked: true, style: [Checkbox.lg]),
Checkbox(isChecked: true, style: [Checkbox.xl]),''',
      ),

      // ~Colors
      const ComponentPreview(
        title: 'Colors',
        preview: [
          Checkbox(isChecked: true, style: [Checkbox.primary]),
          Checkbox(isChecked: true, style: [Checkbox.secondary]),
          Checkbox(isChecked: true, style: [Checkbox.accent]),
          Checkbox(isChecked: true, style: [Checkbox.neutral]),
          Checkbox(isChecked: true, style: [Checkbox.info]),
          Checkbox(isChecked: true, style: [Checkbox.success]),
          Checkbox(isChecked: true, style: [Checkbox.warning]),
          Checkbox(isChecked: true, style: [Checkbox.error]),
        ],
        code: '''
Checkbox(isChecked: true, style: [Checkbox.primary]),
Checkbox(isChecked: true, style: [Checkbox.secondary]),
Checkbox(isChecked: true, style: [Checkbox.accent]),
Checkbox(isChecked: true, style: [Checkbox.neutral]),
Checkbox(isChecked: true, style: [Checkbox.info]),
Checkbox(isChecked: true, style: [Checkbox.success]),
Checkbox(isChecked: true, style: [Checkbox.warning]),
Checkbox(isChecked: true, style: [Checkbox.error]),''',
      ),

      // ~Disabled
      const ComponentPreview(
        title: 'Disabled',
        preview: [
          Checkbox(disabled: true),
          Checkbox(isChecked: true, disabled: true),
        ],
        code: '''
Checkbox(disabled: true),
Checkbox(isChecked: true, disabled: true),''',
      ),

      // ~Indeterminate
      const ComponentPreview(
        title: 'Indeterminate',
        description:
            'The indeterminate state can only be set using JavaScript after the element has rendered.',
        preview: [
          _IndeterminateCheckboxPreview(),
        ],
        code: '''
// The `indeterminate` property must be set on the DOM element after it renders.
// This requires a stateful component and a way to reference the element, like an ID.

class MyIndeterminateCheckbox extends StatefulComponent {
  final String _checkboxId = 'my-unique-id';

  @override
  State<MyIndeterminateCheckbox> createState() => _MyIndeterminateCheckboxState();
}

class _MyIndeterminateCheckboxState extends State<MyIndeterminateCheckbox> {
  @override
  void initState() {
    super.initState();
    if (kIsWeb) {
      // Set the property after the component has been added to the DOM.
      Future.delayed(Duration.zero, () {
        final element = document.getElementById(widget._checkboxId) as HTMLInputElement?;
        if (element != null) {
          element.indeterminate = true;
        }
      });
    }
  }

  @override
  Component build(BuildContext context) {
    return Checkbox(id: widget._checkboxId);
  }
}
''',
      ),

      // ~Checkbox with custom colors
      const ComponentPreview(
        title: 'Checkbox with custom colors',
        description: 'Use the `classes` property for custom Tailwind utilities.',
        preview: [
          Checkbox(
            isChecked: true,
            classes:
                'border-indigo-600 bg-indigo-500 checked:bg-orange-400 checked:text-orange-800 checked:border-orange-500',
          ),
        ],
        code: '''
Checkbox(
  isChecked: true,
  classes: 'border-indigo-600 bg-indigo-500 checked:bg-orange-400 checked:text-orange-800 checked:border-orange-500',
)''',
      ),

      // ~Stateful Example (Most Important)
      const ComponentPreview(
        title: 'State Management',
        description:
            'A checkbox is a controlled component. Its state must be managed by a parent using `isChecked` and `onToggle`.',
        preview: [
          _StatefulCheckboxExample(),
        ],
        code: '''
class MyComponent extends StatefulComponent {
  bool _isChecked = false;

  @override
  State<MyComponent> createState() => _MyComponentState();
}

class _MyComponentState extends State<MyComponent> {
  @override
  Component build(BuildContext context) {
    return Checkbox(
      isChecked: _isChecked,
      onToggle: (newValue) {
        setState(() => _isChecked = newValue);
      },
      style: [Checkbox.primary],
    );
  }
}
''',
      ),
    ]);
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/checkbox_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/collapse_preview.dart -->
/// This file provides interactive examples for the `deepyr` Collapse component.
///
/// It demonstrates the three primary activation methods (focus, checkbox, details),
/// various styling options like icons and forced states, and advanced custom styling
/// scenarios, mirroring the official DaisyUI documentation.
library;

import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart';

import '../../components/component_preview.dart';

/// Renders a collection of [ComponentPreview] widgets to showcase the
/// functionality and styling of the `deepyr` [Collapse] component.
class CollapsePreview extends StatelessComponent {
  const CollapsePreview({super.key});

  @override
  Component build(BuildContext context) {
    const titleText = 'How do I create an account?';
    const contentText =
        'Click the "Sign Up" button in the top right corner and follow the registration process.';

    return div(classes: 'max-w-5xl mx-auto px-4 space-y-12', [
      // ~Collapse with focus
      ComponentPreview(
        title: 'Collapse with focus',
        description: 'This collapse works with focus. When the div loses focus, it gets closed.',
        preview: [
          Collapse(
            title: text(titleText),
            content: text(contentText),
            classes: 'bg-base-100 border border-base-300',
          ),
        ],
        code: '''
Collapse(
  method: CollapseMethod.focus, // Opens on focus, closes on blur
  title: text('How do I create an account?'),
  content: text('...'),
  classes: 'bg-base-100 border border-base-300',
)
''',
      ),

      // ~Collapse with checkbox
      ComponentPreview(
        title: 'Collapse with checkbox',
        description:
            'This collapse works with a checkbox. It needs to be clicked again to get closed.',
        preview: [
          Collapse(
            method: CollapseMethod.checkbox,
            title: text(titleText),
            content: text(contentText),
            classes: 'bg-base-100 border border-base-300',
          ),
        ],
        code: '''
Collapse(
  method: CollapseMethod.checkbox, // Toggles on click
  title: text('How do I create an account?'),
  content: text('...'),
  classes: 'bg-base-100 border border-base-300',
)
''',
      ),

      // ~Collapse using details and summary tag
      ComponentPreview(
        title: 'Collapse using <details> and <summary> tag',
        description:
            "collapse-open and collapse-close modifiers don't work with this method. Instead, you can control the `initiallyOpen` prop.",
        preview: [
          Collapse(
            method: CollapseMethod.details,
            title: text(titleText),
            content: text(contentText),
            classes: 'bg-base-100 border border-base-300',
          ),
        ],
        code: '''
Collapse(
  method: CollapseMethod.details, // Uses native <details> element
  title: text('How do I create an account?'),
  content: text('...'),
  classes: 'bg-base-100 border border-base-300',
)
''',
      ),

      // ~Without border and background color
      ComponentPreview(
        title: 'Without border and background color',
        preview: [
          Collapse(
            title: text(titleText),
            content: text(contentText),
          ),
        ],
        code: '''
Collapse(
  method: CollapseMethod.focus,
  title: text('How do I create an account?'),
  content: text('...'),
)
''',
      ),

      // ~With arrow icon
      ComponentPreview(
        title: 'With arrow icon',
        preview: [
          Collapse(
            title: text(titleText),
            content: text(contentText),
            style: [Collapse.arrow],
            classes: 'bg-base-100 border border-base-300',
          ),
        ],
        code: '''
Collapse(
  method: CollapseMethod.focus,
  title: text('How do I create an account?'),
  content: text('...'),
  style: [Collapse.arrow],
  classes: 'bg-base-100 border border-base-300',
)
''',
      ),

      // ~With plus/minus icon
      ComponentPreview(
        title: 'With plus/minus icon',
        preview: [
          Collapse(
            title: text(titleText),
            content: text(contentText),
            style: [Collapse.plus],
            classes: 'bg-base-100 border border-base-300',
          ),
        ],
        code: '''
Collapse(
  method: CollapseMethod.focus,
  title: text('How do I create an account?'),
  content: text('...'),
  style: [Collapse.plus],
  classes: 'bg-base-100 border border-base-300',
)
''',
      ),

      // ~Force open
      ComponentPreview(
        title: 'Force open',
        preview: [
          Collapse(
            title: text('I have collapse-open class'),
            content: text(contentText),
            style: [Collapse.open],
            classes: 'bg-base-100 border border-base-300',
          ),
        ],
        code: '''
Collapse(
  method: CollapseMethod.focus,
  title: text('I have collapse-open class'),
  content: text('...'),
  style: [Collapse.open],
  classes: 'bg-base-100 border border-base-300',
)
''',
      ),

      // ~Force close
      ComponentPreview(
        title: 'Force close',
        preview: [
          Collapse(
            title: text("I'm closed by default, but you can still focus me"),
            content: text(contentText),
            style: [Collapse.close],
            classes: 'bg-base-100 border border-base-300',
          ),
        ],
        code: '''
Collapse(
  method: CollapseMethod.focus,
  title: text("I'm closed by default..."),
  content: text('...'),
  style: [Collapse.close],
  classes: 'bg-base-100 border border-base-300',
)
''',
      ),

      // ~Custom colors for collapse that works with focus
      ComponentPreview(
        title: 'Custom colors for focus method',
        description: 'Use Tailwind CSS `focus:` utilities directly in the `classes` property.',
        preview: [
          Collapse(
            title: text(titleText),
            content: text(contentText),
            classes:
                'bg-primary text-primary-content focus:bg-secondary focus:text-secondary-content',
          ),
        ],
        code: '''
// The deepyr styling system doesn't yet abstract state variants
// for root elements (like focus:bg-secondary).
// Apply these utilities directly via the `classes` property.
Collapse(
  method: CollapseMethod.focus,
  title: text('How do I create an account?'),
  content: text('...'),
  classes: 'bg-primary text-primary-content focus:bg-secondary focus:text-secondary-content',
)
''',
      ),

      // ~Custom colors for collapse that works with checkbox
      ComponentPreview(
        title: 'Custom colors for checkbox method',
        description:
            "Use `peer` and `peer-checked` utilities. This requires a manual structure as the styling applies to siblings of the input, which the `Collapse` abstraction doesn't expose directly.",
        preview: [
          div(classes: 'collapse bg-base-100 border border-base-300', [
            input(type: InputType.checkbox, classes: 'peer'),
            div(
              classes:
                  'collapse-title bg-primary text-primary-content peer-checked:bg-secondary peer-checked:text-secondary-content',
              [text(titleText)],
            ),
            div(
              classes:
                  'collapse-content bg-primary text-primary-content peer-checked:bg-secondary peer-checked:text-secondary-content',
              [text(contentText)],
            ),
          ]),
        ],
        code: '''
// This effect relies on the `peer` and `peer-checked` TailwindCSS classes
// to style siblings of the checkbox. The high-level `Collapse` component
// doesn't expose the internal elements for this specific styling hook.
// To achieve this, construct the component with basic Jaspr elements.

div(classes: 'collapse bg-base-100 border border-base-300', [
  input(type: InputType.checkbox, classes: 'peer'),
  div(
    classes: 'collapse-title bg-primary text-primary-content peer-checked:bg-secondary peer-checked:text-secondary-content',
    [text('How do I create an account?')],
  ),
  div(
    classes: 'collapse-content bg-primary text-primary-content peer-checked:bg-secondary peer-checked:text-secondary-content',
    [text('...')],
  ),
])
''',
      ),
    ]);
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/collapse_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/diff_preview.dart -->
import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart';

// Assuming Sizing utilities for aspect ratio might be added later.
// For now, direct classes are used for aspect ratio.
// import 'package:deepyr/src/base/utilities/sizing.dart';

import '../../components/component_preview.dart';

class DiffPreview extends StatelessComponent {
  const DiffPreview({super.key});

  @override
  Component build(BuildContext context) {
    return div(classes: 'max-w-5xl mx-auto px-4', [
      // Diff with Images
      ComponentPreview(
        title: 'Diff',
        preview: [
          Diff(
            tag: 'figure',
            focusable: true,
            style: [Effects.roundedBox, Size.aspectRatio('16/9')],
            item1: DiffItem1(
              [
                img(
                  src: '/images/flower.jpg',
                  alt: 'Original Image',
                ),
              ],
              role: 'img',
              focusable: true,
            ),
            item2: DiffItem2(
              [
                img(
                  src: '/images/flower2.jpg',
                  alt: 'Modified Image',
                ),
              ],
              role: 'img',
            ),
          ),
        ],
        code: '''
Diff(
  tag: 'figure',
  focusable: true,
  style: [
    Effects.roundedBox,
    Size.aspectRatio('16/9'),
  ],
  item1: DiffItem1(
    [img(src: 'image1.webp', alt: 'daisy')],
    role: 'img',
    focusable: true,
  ),
  item2: DiffItem2(
    [img(src: 'image2-blur.webp', alt: 'daisy blur')],
    role: 'img',
  ),
)''',
      ),

      // Diff text
      ComponentPreview(
        title: 'Diff text',
        preview: [
          Diff(
            tag: 'figure',
            focusable: true,
            style: [Effects.roundedBox, Size.aspectRatio('16/9')],
            item1: DiffItem1(
              [
                // Using Container to apply multiple general utilities
                Container(
                  [text('Deepyr')],
                  style: [
                    BgUtil.primary, TextUtil.primaryContent,
                    Layout.grid,
                    Alignment.placeContentCenter, // For grid place-content-center
                    TextUtil.xl4.at(Breakpoint.lg).on([Is.hover]),
                    TextUtil.xl9,
                  ],
                  // Fallback if specific text size like text-9xl isn't in TextUtil yet
                  // classes: 'text-4xl lg:text-9xl',
                ),
              ],
              role: 'img', // Example uses role="img" even for text content
              focusable: true,
            ),
            item2: DiffItem2(
              [
                Container(
                  [text('Deepyr')],
                  style: [
                    BgUtil.base200,
                    Layout.grid,
                    Alignment.placeContentCenter,
                    TextUtil.xl9,
                  ],
                  // classes: 'text-4xl lg:text-9xl',
                ),
              ],
              role: 'img',
            ),
          ),
        ],
        code: '''
Diff(
  tag: 'figure',
  focusable: true,
  style: [
    Effects.roundedBox,
    Size.aspectRatio('16/9'),
  ],
  item1: DiffItem1(
    [
      Container(
        [text('Deepyr')],
        style: [
          BgUtil.primary, TextUtil.primaryContent,
          Layout.grid, Alignment.placeContentCenter,
          TextUtil.xl9
        ],
      ),
    ],
    role: 'img',
    focusable: true,
  ),
  item2: DiffItem2(
    [
      Container(
        [text('Deepyr')],
        style: [
          BgUtil.base200, Layout.grid, Alignment.placeContentCenter,
          TextUtil.xl9
        ],
      ),
    ],
    role: 'img',
  ),
)''',
      ),
    ]);
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/diff_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/divider_preview.dart -->
// This file provides interactive examples for the `deepyr` Divider component.
//
// It demonstrates how to create dividers with and without text, in both
// vertical and horizontal orientations, and showcases all color and text
// placement options, including responsive layouts.

import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart' hide Flex;

import '../../components/component_preview.dart';

/// Renders a collection of [ComponentPreview] widgets to showcase the
/// functionality and styling of the `deepyr` [Divider] component.
class DividerPreview extends StatelessComponent {
  const DividerPreview({super.key});

  @override
  Component build(BuildContext context) {
    // Helper component for the content boxes to reduce repetition.
    final contentBox = Container(
      [text('content')],
      style: [
        Size.h(20),
        BgUtil.base300,
        Effects.roundedBox,
        Layout.grid,
        Alignment.placeItemsCenter,
      ],
    );

    final growingContentBox = Container(
      [text('content')],
      style: [
        Size.h(20),
        Flex.grow, // Added flex-grow
        BgUtil.base300,
        Effects.roundedBox,
        Layout.grid,
        Alignment.placeItemsCenter,
      ],
    );

    return div(classes: 'max-w-5xl mx-auto px-4 space-y-12', [
      // ~Divider
      ComponentPreview(
        title: 'Divider',
        preview: [
          Container(
            [
              contentBox,
              Divider([text('OR')]),
              contentBox,
            ],
            style: [Layout.flex, Layout.flexCol, Size.wFull],
          ),
        ],
        code: '''
Container(
  [
    Container([text('content')], style: [/* styles */]),
    Divider([text('OR')]),
    Container([text('content')], style: [/* styles */]),
  ],
  style: [Layout.flex, Layout.flexCol, Size.wFull],
)
''',
      ),

      // ~Divider horizontal
      ComponentPreview(
        title: 'Divider horizontal',
        preview: [
          Container(
            [
              growingContentBox,
              Divider([text('OR')], style: [Divider.horizontal]),
              growingContentBox,
            ],
            style: [Layout.flex, Size.wFull],
          ),
        ],
        code: '''
Container(
  [
    Container([text('content')], style: [Flex.grow, /* other styles */]),
    Divider([text('OR')], style: [Divider.horizontal]),
    Container([text('content')], style: [Flex.grow, /* other styles */]),
  ],
  style: [Layout.flex, Size.wFull],
)
''',
      ),

      // ~Divider with no text
      ComponentPreview(
        title: 'Divider with no text',
        preview: [
          Container(
            [
              contentBox,
              const Divider([]), // Empty children list
              contentBox,
            ],
            style: [Layout.flex, Layout.flexCol, Size.wFull],
          ),
        ],
        code: '''
Container(
  [
    Container([text('content')], style: [/* styles */]),
    Divider([]),
    Container([text('content')], style: [/* styles */]),
  ],
  style: [Layout.flex, Layout.flexCol, Size.wFull],
)
''',
      ),

      // ~Responsive (lg:divider-horizontal)
      ComponentPreview(
        title: 'Responsive (vertical on small screens, horizontal on large)',
        preview: [
          Container(
            [
              Container(
                [text('content')],
                style: [
                  Size.h(32),
                  Flex.grow,
                  BgUtil.base300,
                  Effects.roundedBox,
                  Layout.grid,
                  Alignment.placeItemsCenter,
                ],
              ),
              Divider(
                [text('OR')],
                style: [Divider.horizontal.at(Breakpoint.lg)],
              ),
              Container(
                [text('content')],
                style: [
                  Size.h(32),
                  Flex.grow,
                  BgUtil.base300,
                  Effects.roundedBox,
                  Layout.grid,
                  Alignment.placeItemsCenter,
                ],
              ),
            ],
            style: [
              Layout.flex,
              Size.wFull,
              Layout.flexCol,
              Layout.flexRow.at(Breakpoint.lg),
            ],
          ),
        ],
        code: '''
// The parent container must also change its flex direction responsively.
Container(
  [
    Container([text('content')], style: [/* styles */]),
    Divider(
      [text('OR')],
      style: [Divider.horizontal.at(Breakpoint.lg)], // Responsive divider
    ),
    Container([text('content')], style: [/* styles */]),
  ],
  style: [
    Layout.flex,
    Size.wFull,
    Layout.flexCol,
    Layout.flexRow.at(Breakpoint.lg)
  ],
)
''',
      ),

      // ~Divider with colors
      ComponentPreview(
        title: 'Divider with colors',
        preview: [
          Container(
            [
              Divider([text('Default')]),
              Divider([text('Neutral')], style: [Divider.neutral]),
              Divider([text('Primary')], style: [Divider.primary]),
              Divider([text('Secondary')], style: [Divider.secondary]),
              Divider([text('Accent')], style: [Divider.accent]),
              Divider([text('Success')], style: [Divider.success]),
              Divider([text('Warning')], style: [Divider.warning]),
              Divider([text('Info')], style: [Divider.info]),
              Divider([text('Error')], style: [Divider.error]),
            ],
            style: [Layout.flex, Layout.flexCol, Size.wFull],
          ),
        ],
        code: '''
Divider([text('Default')]),
Divider([text('Neutral')], style: [Divider.neutral]),
Divider([text('Primary')], style: [Divider.primary]),
Divider([text('Secondary')], style: [Divider.secondary]),
Divider([text('Accent')], style: [Divider.accent]),
Divider([text('Success')], style: [Divider.success]),
Divider([text('Warning')], style: [Divider.warning]),
Divider([text('Info')], style: [Divider.info]),
Divider([text('Error')], style: [Divider.error]),
''',
      ),

      // ~Divider in different positions
      ComponentPreview(
        title: 'Divider in different positions',
        preview: [
          Container(
            [
              Divider([text('Start')], style: [Divider.start]),
              Divider([text('Default')]),
              Divider([text('End')], style: [Divider.end]),
            ],
            style: [Layout.flex, Layout.flexCol, Size.wFull, Size.maxWxs],
          ),
        ],
        code: '''
Divider([text('Start')], style: [Divider.start]),
Divider([text('Default')]),
Divider([text('End')], style: [Divider.end]),
''',
      ),

      // ~Divider in different positions (horizontal)
      ComponentPreview(
        title: 'Divider in different positions (horizontal)',
        preview: [
          Container(
            [
              Divider([text('Start')], style: [Divider.horizontal, Divider.start]),
              Divider([text('Default')], style: [Divider.horizontal]),
              Divider([text('End')], style: [Divider.horizontal, Divider.end]),
            ],
            style: [
              Layout.flex,
              Size.wFull,
              Alignment.justifyCenter,
              Size.h(52)
            ],
          ),
        ],
        code: '''
Container(
  [
    Divider([text('Start')], style: [Divider.horizontal, Divider.start]),
    Divider([text('Default')], style: [Divider.horizontal]),
    Divider([text('End')], style: [Divider.horizontal, Divider.end]),
  ],
  style: [
    Layout.flex,
    Size.wFull,
    Alignment.justifyCenter,
    Size.h(52)
  ],
)
''',
      ),
    ]);
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/divider_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/drawer_preview.dart -->
// This file provides interactive examples for the [Drawer] component from the `deepyr` library.
// It demonstrates various configurations, including basic usage, responsive behavior with a navbar,
// and different placement options, all managed within a stateful Jaspr component.

import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart';

import '../../components/component_preview.dart';

/// A private helper function that returns a hamburger menu icon using the `deepyr` [Icon] component.
/// This promotes code reuse and consistency within the preview.
///
/// Returns a [Component] representing the 'menu' icon.
Component _hamburgerIcon() => Icon('menu', style: [TextUtil.xl2]);

/// A stateful component that renders a collection of [ComponentPreview] widgets
/// to demonstrate the functionality and styling of the `deepyr` [Drawer] component.
class DrawerPreview extends StatefulComponent {
  const DrawerPreview({super.key});

  @override
  State<DrawerPreview> createState() => _DrawerPreviewState();
}

/// The state class for [DrawerPreview].
///
/// This class manages the open/closed state for each of the drawer examples,
/// allowing them to be controlled independently and interactively.
class _DrawerPreviewState extends State<DrawerPreview> {
  /// Controls the visibility of the basic drawer example.
  bool _isBasicDrawerOpen = false;

  /// Controls the visibility of the responsive navbar's mobile drawer.
  bool _isNavbarDrawerOpen = false;

  /// Controls the visibility of the responsive drawer example.
  bool _isResponsiveDrawerOpen = false;

  /// Controls the visibility of the right-side drawer example.
  bool _isRightDrawerOpen = false;

  @override
  Component build(BuildContext context) {
    // A common sidebar menu component used across all drawer examples for consistency.
    final sidebarMenu = Menu(
      [
        MenuItem([
          a(href: '#', [text('Sidebar Item 1')])
        ]),
        MenuItem([
          a(href: '#', [text('Sidebar Item 2')])
        ]),
      ],
      // Standard DaisyUI classes for styling a menu within a drawer.
      classes: 'p-4 w-60 md:w-80 min-h-full bg-base-200 text-base-content',
    );

    return div(classes: 'max-w-5xl mx-auto px-4 space-y-12', [
      // ~Drawer (Basic Example)
      ComponentPreview(
        title: 'Drawer',
        description:
            'A basic drawer that can be toggled open or closed. It can be closed by clicking the overlay.',
        preview: [
          // The Drawer component itself is the root of the preview.
          // This allows its overlay to correctly cover the entire preview area.
          Drawer(
            drawerId: 'my-drawer-1',
            isOpen: _isBasicDrawerOpen,
            onToggle: (isOpen) => setState(() => _isBasicDrawerOpen = isOpen),
            classes: 'h-56 rounded overflow-hidden relative',
            content: DrawerContent([
              div(classes: 'flex flex-col items-center justify-center h-full', [
                // A <label> linked to the drawer's checkbox is the standard way to toggle it.
                label(
                  attributes: {'for': 'my-drawer-1'},
                  classes: 'btn btn-primary',
                  [text('Open drawer')],
                ),
              ]),
            ]),
            side: DrawerSide(
              drawerId: 'my-drawer-1',
              menuContent: sidebarMenu,
              // The z-index ensures the sidebar appears above the content within its container.
              classes: 'z-[1]',
            ),
          ),
        ],
        code: '''
// In your StatefulComponent's state:
// bool _isBasicDrawerOpen = false;

// NOTE: For a true full-page drawer, place the Drawer component
// at the root of your page layout, not inside a smaller container.
Drawer(
  drawerId: 'my-drawer-1',
  isOpen: _isBasicDrawerOpen,
  onToggle: (isOpen) => setState(() => _isBasicDrawerOpen = isOpen),
  content: DrawerContent([
    label(
      attributes: {'for': 'my-drawer-1'},
      classes: 'btn btn-primary',
      [text('Open drawer')],
    ),
  ]),
  side: DrawerSide(
    drawerId: 'my-drawer-1',
    menuContent: Menu([...]), // Your sidebar menu
  ),
)
''',
      ),

      // ~Navbar menu for desktop + sidebar drawer for mobile
      ComponentPreview(
        title: 'Navbar menu for desktop + sidebar drawer for mobile',
        description:
            'A common pattern where a hamburger icon on mobile opens a drawer, while a horizontal menu is shown on desktop.',
        preview: [
          Drawer(
            drawerId: 'my-drawer-3',
            isOpen: _isNavbarDrawerOpen,
            onToggle: (isOpen) => setState(() => _isNavbarDrawerOpen = isOpen),
            classes: 'h-56 rounded overflow-hidden',
            content: DrawerContent([
              // A flex container ensures the navbar stays at the top and content fills the rest.
              div(classes: 'flex flex-col h-full', [
                Navbar(
                  [
                    NavbarStart([
                      // This label acts as the hamburger button on mobile (hidden on large screens).
                      label(
                        attributes: {'for': 'my-drawer-3', 'aria-label': 'open sidebar'},
                        classes: 'btn btn-square btn-ghost lg:hidden',
                        [_hamburgerIcon()],
                      ),
                    ]),
                    NavbarCenter([
                      div(classes: 'flex-1 px-2 mx-2', [text('Navbar Title')]),
                    ]),
                    NavbarEnd([
                      // The horizontal menu is only visible on large screens.
                      div(classes: 'hidden lg:block', [
                        Menu(
                          [
                            MenuItem([
                              a(href: '#', [text('Navbar Item 1')])
                            ]),
                            MenuItem([
                              a(href: '#', [text('Navbar Item 2')])
                            ]),
                          ],
                          style: [Menu.horizontal],
                          ariaLabel: 'Desktop Navigation',
                        ),
                      ]),
                    ]),
                  ],
                  style: [BgUtil.base200],
                  ariaLabel: 'Main Navigation',
                ),
                // The main content area grows to fill the available space.
                div(classes: 'flex justify-center items-center grow', [text('Content')]),
              ]),
            ]),
            side: DrawerSide(
              drawerId: 'my-drawer-3',
              menuContent: sidebarMenu,
              classes: 'z-[1]',
            ),
          ),
        ],
        code: '''
Drawer(
  // ... state management ...
  content: DrawerContent([
    div(classes: 'flex flex-col h-full', [
      Navbar(
        [
          NavbarStart([
            // Hamburger button for mobile, implemented as a label.
            label(
              attributes: {'for': 'my-drawer-3'},
              classes: 'btn btn-square btn-ghost lg:hidden',
              [_hamburgerIcon()],
            ),
          ]),
          NavbarCenter([ text('Navbar Title') ]),
          NavbarEnd([
            // Desktop menu wrapped in a div for responsive visibility.
            div(classes: 'hidden lg:block', [
              Menu([ /* Menu Items */ ], style: [Menu.horizontal]),
            ]),
          ]),
        ],
      ),
      // Page content area.
      div(classes: 'flex justify-center items-center grow', [text('Content')]),
    ]),
  ]),
  side: DrawerSide(
    drawerId: 'my-drawer-3',
    menuContent: Menu([...]),
  ),
)
''',
      ),

      // ~Responsive (Always open on large screens)
      ComponentPreview(
        title: 'Responsive',
        description:
            'The sidebar is permanently visible on large screens (lg:drawer-open), but can be toggled on smaller screens.',
        preview: [
          Drawer(
            drawerId: 'my-drawer-2',
            isOpen: _isResponsiveDrawerOpen,
            onToggle: (isOpen) => setState(() => _isResponsiveDrawerOpen = isOpen),
            // The 'lg:drawer-open' class is the key to this behavior.
            classes: 'lg:drawer-open h-56 rounded overflow-hidden relative',
            content: DrawerContent([
              div(classes: 'flex flex-col items-center justify-center h-full', [
                // The toggle button is hidden on large screens where the drawer is always open.
                label(
                  attributes: {'for': 'my-drawer-2'},
                  classes: 'btn btn-primary lg:hidden',
                  [text('Open drawer')],
                ),
              ]),
            ]),
            side: DrawerSide(
              drawerId: 'my-drawer-2',
              menuContent: sidebarMenu,
              classes: 'z-[1]',
            ),
          ),
        ],
        code: '''
Drawer(
  // ... state management ...
  // This class makes the drawer permanently visible on large screens and above.
  classes: 'lg:drawer-open',
  content: DrawerContent([
    // This label acts as the toggle button but is hidden on large screens.
    label(
      attributes: {'for': 'my-drawer-2'},
      classes: 'btn btn-primary lg:hidden',
      [text('Open drawer')],
    ),
  ]),
  side: DrawerSide(
    drawerId: 'my-drawer-2',
    menuContent: Menu([...]),
  ),
)
''',
      ),

      // ~Drawer that opens from right side of page
      ComponentPreview(
        title: 'Drawer that opens from right side of page',
        description:
            "Using the `Drawer.end` style modifier changes the sidebar's position from left to right.",
        preview: [
          Drawer(
            drawerId: 'my-drawer-4',
            isOpen: _isRightDrawerOpen,
            onToggle: (isOpen) => setState(() => _isRightDrawerOpen = isOpen),
            // The 'end' modifier places the drawer on the right.
            styles: [Drawer.end],
            classes: 'h-56 rounded overflow-hidden relative',
            content: DrawerContent([
              div(classes: 'flex flex-col items-center justify-center h-full', [
                label(
                  attributes: {'for': 'my-drawer-4'},
                  classes: 'btn btn-primary',
                  [text('Open drawer')],
                ),
              ]),
            ]),
            side: DrawerSide(
              drawerId: 'my-drawer-4',
              menuContent: sidebarMenu,
              classes: 'z-[1]',
            ),
          ),
        ],
        code: '''
Drawer(
  // ... state management ...
  // Use the 'Drawer.end' style modifier to change placement.
  style: [Drawer.end],
  content: DrawerContent( /* ... */ ),
  side: DrawerSide( /* ... */ ),
)
''',
      ),
    ]);
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/drawer_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/dropdown_preview.dart -->
import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart' hide Spacing;

import '../../components/component_preview.dart';

/// Renders a collection of [ComponentPreview] widgets to showcase the
/// functionality and styling of the `deepyr` [Dropdown] component.
///
/// This preview covers all three official methods for creating dropdowns as
/// described in the DaisyUI documentation, demonstrating the flexibility of
/// the `trigger`/`content` API.
class DropdownPreview extends StatelessComponent {
  const DropdownPreview({super.key});

  @override
  Component build(BuildContext context) {
    // A common set of menu items used across multiple examples for consistency.
    final menuItems = [
      MenuItem([text('Item 1')]),
      MenuItem([text('Item 2')]),
    ];

    // Common styling for a dropdown menu content area, now fully type-safe.
    final menuContent = DropdownContent(
      menuItems,
      tag: 'ul',
      style: [
        DropdownContent.menu,
        Spacing.p(2),
        Effects.shadowSm,
        BgUtil.base100,
        Effects.roundedBox,
        Size.w(52),
      ],
    );

    return div(classes: 'max-w-5xl mx-auto px-4 space-y-12', [
      h2(classes: 'text-2xl font-bold mt-10 mb-4', [text('Method 1: <details> and <summary>')]),
      // --- Method 1: details and summary ---
      ComponentPreview(
        title: 'Dropdown using details and summary',
        description:
            'Uses native HTML elements for the best accessibility. Opens and closes on click. The `Dropdown` component intelligently wraps the trigger in a `<summary>` tag.',
        preview: [
          Container(
            style: [Spacing.mb(32)],
            [
              Dropdown(
                trigger: Button([text('open or close')], classes: 'm-1'),
                content: menuContent,
              ),
            ],
          ),
        ],
        code: '''
// Define the reusable, type-safe content for the dropdown.
final menuContent = DropdownContent(
  [
    MenuItem([text('Item 1')]),
    MenuItem([text('Item 2')]),
  ],
  tag: 'ul',
  style: [
    DropdownContent.menu,
    Spacing.p(2),
    Effects.shadowSm,
    BgUtil.base100,
    Effects.roundedBox,
    Size.w(52),
  ],
);

// Use the content in the Dropdown.
Dropdown(
  method: DropdownMethod.details,
  trigger: Button([text('open or close')], classes: 'm-1'),
  content: menuContent,
)
''',
      ),

      h2(classes: 'text-2xl font-bold mt-10 mb-4', [
        text('Method 2: Popover API and anchor positioning'),
      ]),
      // --- Method 2: Popover API and anchor positioning (New) ---
      ComponentPreview(
        title: 'Dropdown using popover API and anchor positioning',
        description:
            "This is a new browser standard and is not yet fully supported. It must be built manually with primitive components as `deepyr` doesn't abstract it yet. The dropdown will appear centered like a modal in unsupported browsers.",
        preview: [
          button(
            [text('Button')],
            classes: 'btn',
            attributes: {
              'popovertarget': 'popover-preview-1',
              'style': 'anchor-name: --anchor-1;',
            },
          ),
          ul(
            [
              li([
                a(href: '#', [text('Item 1')]),
              ]),
              li([
                a(href: '#', [text('Item 2')]),
              ]),
            ],
            id: 'popover-preview-1',
            classes: 'dropdown menu w-52 rounded-box bg-base-100 shadow-sm',
            attributes: {
              'popover': '',
              'style': 'position-anchor: --anchor-1;',
            },
          ),
        ],
        code: '''
// Popover API is a new browser feature and not yet abstracted by the Dropdown component.
// It requires manual construction with unique IDs and anchor names.

// Trigger Button
button(
  [text('Button')],
  classes: 'btn',
  attributes: {
    'popovertarget': 'popover-1',       // ID of the popover content
    'style': 'anchor-name: --anchor-1;', // Unique anchor name
  },
),

// Popover Content
ul(
  [
    li([a(href: '#', [text('Item 1')])]),
    li([a(href: '#', [text('Item 2')])]),
  ],
  id: 'popover-1', // Matches popovertarget
  classes: 'dropdown menu w-52 rounded-box bg-base-100 shadow-sm',
  attributes: {
    'popover': '', // Enables popover behavior
    'style': 'position-anchor: --anchor-1;', // Links to anchor name
  },
)
''',
      ),

      h2(classes: 'text-2xl font-bold mt-10 mb-4', [text('Dropdown menu')]),
      // --- Method 3: CSS focus ---
      ComponentPreview(
        title: 'Dropdown menu',
        preview: [
          Container(
            style: [Spacing.mb(32)],
            [
              Dropdown(
                method: DropdownMethod.focus,
                trigger: Container(
                  [text('Click to open')],
                  attributes: {'tabindex': '0', 'role': 'button'},
                  classes: 'btn m-1',
                ),
                content: menuContent,
              ),
            ],
          ),
        ],
        code: '''
Dropdown(
  method: DropdownMethod.focus,
  // Per DaisyUI spec for this method, the trigger should be a focusable `div`.
  trigger: Container(
    [text('Click to open')],
    tag: 'div',
    attributes: {'tabindex': '0', 'role': 'button'},
    classes: 'btn m-1',
  ),
  content: menuContent, // Reusing the type-safe content component
)
''',
      ),

      // --- Positions ---
      h2(classes: 'text-2xl font-bold mt-10 mb-4', [text('Positions')]),
      ..._buildPositionalPreviews(menuContent),

      // --- Modifiers ---
      h2(classes: 'text-2xl font-bold mt-10 mb-4', [text('Modifiers')]),

      ComponentPreview(
        title: 'Dropdown on hover',
        preview: [
          Container(
            style: [Spacing.mb(32)],
            [
              Dropdown(
                method: DropdownMethod.focus,
                style: [Dropdown.hover],
                trigger: Button([text('Hover')], classes: 'm-1'),
                content: menuContent,
              ),
            ],
          ),
        ],
        code: '''
Dropdown(
  method: DropdownMethod.focus, // Hover requires the focus method
  style: [Dropdown.hover],
  trigger: Button([text('Hover')], classes: 'm-1'),
  content: menuContent,
)
''',
      ),

      ComponentPreview(
        title: 'Force open',
        preview: [
          Container(
            style: [Spacing.mb(32)],
            [
              Dropdown(
                method: DropdownMethod.focus,
                style: [Dropdown.open],
                trigger: Button([text('Button')], classes: 'm-1'),
                content: menuContent,
              ),
            ],
          ),
        ],
        code: '''
Dropdown(
  method: DropdownMethod.focus,
  style: [Dropdown.open],
  trigger: Button([text('Button')], classes: 'm-1'),
  content: menuContent,
)
''',
      ),

      // --- More Examples ---
      h2(classes: 'text-2xl font-bold mt-10 mb-4', [text('More examples')]),

      ComponentPreview(
        title: 'Card as dropdown',
        preview: [
          Container(
            style: [Spacing.mb(32)],
            [
              Dropdown(
                method: DropdownMethod.focus,
                trigger: Button([text('Click')], classes: 'm-1'),
                content: DropdownContent(
                  [
                    CardBody([
                      p([text('This is a card. You can use any element as a dropdown.')]),
                    ]),
                  ],
                  style: [
                    DropdownContent.card,
                    Size.w(64),
                    Spacing.p(2),
                    Effects.shadow,
                    BgUtil.base100,
                    TextUtil.baseContent,
                  ],
                ),
              ),
            ],
          ),
        ],
        code: '''
Dropdown(
  method: DropdownMethod.focus,
  trigger: Button([text('Click')], classes: 'm-1'),
  content: DropdownContent(
    [
      CardBody([
        p([text('This is a card. You can use any element as a dropdown.')]),
      ]),
    ],
    style: [
      DropdownContent.card,
      Size.w(64),
      Spacing.p(2),
      Effects.shadow,
      BgUtil.base100,
      TextUtil.baseContent,
    ],
  ),
)
''',
      ),

      // ~Dropdown in navbar
      ComponentPreview(
        title: 'Dropdown in navbar',
        preview: [
          Navbar(
            style: [BgUtil.base200, Spacing.mb40],
            ariaLabel: 'Navbar with dropdown example',
            [
              NavbarStart([
                // The daisyUI title button
                Button(
                  [text('daisyUI')],
                  style: [Button.ghost],
                  classes: 'text-lg font-bold',
                ),
              ]),
              NavbarEnd([
                // This Container replicates the `<div class="flex items-stretch">`
                // from the DaisyUI example to achieve the exact visual layout.
                Container(
                  style: [Layout.flex, Alignment.itemsStretch],
                  [
                    // The first button in the group
                    Button(
                      [text('Button')],
                      style: [Button.ghost],
                      classes: 'rounded-field', // Custom class for specific radius
                    ),
                    // The dropdown, which acts as the second item in the flex container
                    Dropdown(
                      method: DropdownMethod.focus,
                      style: [Dropdown.end],
                      trigger: Container(
                        // The trigger is a focusable div styled like a button,
                        // matching the DaisyUI example for cross-browser consistency.
                        [text('Dropdown')],
                        attributes: {'tabindex': '0', 'role': 'button'},
                        classes: 'btn btn-ghost rounded-field',
                      ),
                      content: DropdownContent(
                        [
                          MenuItem([text('Item 1')]),
                          MenuItem([text('Item 2')]),
                        ],
                        tag: 'ul',
                        style: [
                          DropdownContent.menu,
                          Spacing.p(2),
                          Effects.shadowSm,
                          BgUtil.base200,
                          Effects.roundedBox,
                          Size.w(52),
                          Spacing.mt(4),
                          Layout.z(1), // DaisyUI uses z-1 here
                        ],
                      ),
                    ),
                  ],
                ),
              ]),
            ],
          ),
        ],
        code: '''
// To precisely match the DaisyUI example's visual layout, we replicate its
// flexbox structure inside the NavbarEnd instead of using a semantic Menu.
Navbar(
  style: [BgUtil.base200, Spacing.mb40],
  ariaLabel: 'Navbar with dropdown example',
  [
    NavbarStart([
      Button([text('daisyUI')], style: [Button.ghost], classes: 'text-lg font-bold'),
    ]),
    NavbarEnd([
      // A container to replicate `<div class="flex items-stretch">`
      Container(
        style: [Layout.flex, Alignment.itemsStretch],
        [
          Button([text('Button')], style: [Button.ghost], classes: 'rounded-field'),
          Dropdown(
            method: DropdownMethod.focus,
            style: [Dropdown.end],
            // The trigger is a focusable Container styled as a button
            trigger: Container(
              [text('Dropdown')],
              tag: 'div',
              attributes: {'tabindex': '0', 'role': 'button'},
              classes: 'btn btn-ghost rounded-field',
            ),
            content: DropdownContent(
              [
                MenuItem([text('Item 1')]),
                MenuItem([text('Item 2')]),
              ],
              tag: 'ul',
              style: [
                DropdownContent.menu,
                Spacing.p(2),
                Effects.shadowSm,
                BgUtil.base200,
                Effects.roundedBox,
                Size.w(52),
                Spacing.mt(4),
                Layout.z(1),
              ],
            ),
          ),
        ],
      ),
    ]),
  ],
)
''',
      ),

      ComponentPreview(
        title: 'Helper dropdown',
        preview: [
          div(
            classes: 'mb-28 mt-6 flex gap-1 items-center',
            [
              text('A normal text and a helper dropdown'),
              Dropdown(
                method: DropdownMethod.focus,
                style: [Dropdown.end],
                trigger: Button(
                  [
                    Icon('info'),
                  ],
                  style: [Button.circle, Button.ghost, Button.xs],
                  classes: 'text-info',
                ),
                content: DropdownContent(
                  [
                    CardBody([
                      CardTitle([text('You needed more info?')]),
                      p([text('Here is a description!')]),
                    ]),
                  ],
                  style: [
                    DropdownContent.card,
                    Size.w(64),
                    Effects.shadow,
                    BgUtil.base100,
                    TextUtil.baseContent,
                  ],
                ),
              ),
            ],
          ),
        ],
        code: '''
Dropdown(
  method: DropdownMethod.focus,
  style: [Dropdown.end],
  trigger: Button(
    [Icon('info')],
    style: [Button.circle, Button.ghost, Button.xs],
    classes: 'text-info',
  ),
  content: DropdownContent(
    [
      CardBody([
        CardTitle([text('You needed more info?')]),
        p([text('Here is a description!')]),
      ]),
    ],
    style: [
      DropdownContent.card,
      Size.w(64),
      Effects.shadow,
      BgUtil.base100,
      TextUtil.baseContent,
    ],
  ),
)
''',
      ),
    ]);
  }

  /// Helper function to generate all the positional previews to avoid repetition.
  Iterable<Component> _buildPositionalPreviews(Component menuContent) {
    final positions = {
      'Dropdown / aligns to start of button horizontally': ([Dropdown.start], '⬇️'),
      'Dropdown / aligns to end of button horizontally': ([Dropdown.end], '⬇️'),
      'Dropdown / aligns to center of button horizontally': ([Dropdown.center], '⬇️'),
      'Dropdown top': ([Dropdown.top], '⬆️'),
      'Dropdown top / aligns to center of button horizontally': (
        [Dropdown.top, Dropdown.center],
        '⬆️',
      ),
      'Dropdown top / aligns to end of button horizontally': ([Dropdown.top, Dropdown.end], '⬆️'),
      'Dropdown bottom (default)': ([Dropdown.bottom], '⬇️'),
      'Dropdown bottom (default) / aligns to center of button horizontally': (
        [Dropdown.bottom, Dropdown.center],
        '⬇️',
      ),
      'Dropdown bottom (default) / aligns to end of button horizontally': (
        [Dropdown.bottom, Dropdown.end],
        '⬇️',
      ),
      'Dropdown left': ([Dropdown.left], '⬅️'),
      'Dropdown left / aligns to center of button vertically': (
        [Dropdown.left, Dropdown.center],
        '⬅️',
      ),
      'Dropdown left / aligns to end of button vertically': ([Dropdown.left, Dropdown.end], '⬅️'),
      'Dropdown right': ([Dropdown.right], '➡️'),
      'Dropdown right / aligns to center of button vertically': (
        [Dropdown.right, Dropdown.center],
        '➡️',
      ),
      'Dropdown right / aligns to end of button vertically': ([Dropdown.right, Dropdown.end], '➡️'),
    };

    return positions.entries.map((entry) {
      final title = entry.key;
      final styles = entry.value.$1;
      final icon = entry.value.$2;
      final needsMarginTop = styles.contains(Dropdown.top);

      return ComponentPreview(
        title: title,
        preview: [
          Container(
            style: [if (needsMarginTop) Spacing.mt(32) else Spacing.mb(32)],
            [
              Dropdown(
                method: DropdownMethod.focus,
                style: styles,
                trigger: Button([text('Click $icon')], classes: 'm-1'),
                content: menuContent,
              ),
            ],
          ),
        ],
        code:
            '''
Dropdown(
  method: DropdownMethod.focus,
  style: [${styles.map((s) => 'Dropdown.${s.toString().split('-').last}').join(', ')}],
  trigger: Button([text('Click $icon')], classes: 'm-1'),
  content: menuContent, // Reusing the type-safe content component
)
''',
      );
    });
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/dropdown_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/fieldset_preview.dart -->
import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart' hide Spacing;

import '../../components/component_preview.dart';

/// Renders a collection of [ComponentPreview] widgets to demonstrate the
/// functionality and styling of the `deepyr` [Fieldset], [Legend], and
/// [FormLabel] components.
class FieldsetPreview extends StatelessComponent {
  const FieldsetPreview({super.key});

  @override
  Component build(BuildContext context) {
    return div(classes: 'max-w-5xl mx-auto px-4 space-y-12', [
      // ~Fieldset, fieldset-legend and label
      ComponentPreview(
        title: 'Fieldset, Legend, and Label',
        preview: [
          Fieldset(
            [
              Legend([text('Page title')]),
              const Input(placeholder: 'My awesome page'),
              FormLabel([text('You can edit page title later on from settings')]),
            ],
            style: [Size.wxs],
          ),
        ],
        code: '''
Fieldset(
  [
    Legend([text('Page title')]),
    Input(placeholder: 'My awesome page'),
    FormLabel([
      text('You can edit page title later on from settings'),
    ]),
  ],
  style: [Size.wxs],
)''',
      ),

      // ~Fieldset with background and border
      ComponentPreview(
        title: 'Fieldset with background and border',
        preview: [
          Fieldset(
            [
              Legend([text('Page title')]),
              const Input(placeholder: 'My awesome page'),
              FormLabel([text('You can edit page title later on from settings')]),
            ],
            style: [
              Size.wxs,
              BgUtil.base200,
              Spacing.p(4),
              BorderUtil.border,
              BorderUtil.base300,
              Effects.roundedBox,
            ],
          ),
        ],
        code: '''
Fieldset(
  [
    Legend([text('Page title')]),
    Input(placeholder: 'My awesome page'),
    FormLabel([
      text('You can edit page title later on from settings'),
    ]),
  ],
  style: [
    Size.wxs,
    BgUtil.base200,
    Spacing.p(4),
    BorderUtil.border,
    BorderUtil.base300,
    Effects.roundedBox,
  ],
)''',
      ),

      // ~Fieldset with multiple inputs
      ComponentPreview(
        title: 'Fieldset with multiple inputs',
        preview: [
          Fieldset(
            [
              Legend([text('Page details')]),
              FormLabel([text('Title')], tag: 'label'),
              const Input(placeholder: 'My awesome page'),
              FormLabel([text('Slug')], tag: 'label'),
              const Input(placeholder: 'my-awesome-page'),
              FormLabel([text('Author')], tag: 'label'),
              const Input(placeholder: 'Name'),
            ],
            style: [Size.wxs, BgUtil.base200, Spacing.p(4)],
            classes: 'border border-base-300 rounded-box',
          ),
        ],
        code: '''
Fieldset(
  [
    Legend([text('Page details')]),
    // Using FormLabel with tag:'label' for semantic input labels.
    FormLabel([text('Title')], tag: 'label'),
    Input(placeholder: 'My awesome page'),

    FormLabel([text('Slug')], tag: 'label'),
    Input(placeholder: 'my-awesome-page'),

    FormLabel([text('Author')], tag: 'label'),
    Input(placeholder: 'Name'),
  ],
  style: [Size.wxs, BgUtil.base200, Spacing.p(4)],
  classes: 'border border-base-300 rounded-box',
)''',
      ),

      // ~Fieldset with multiple join items
      ComponentPreview(
        title: 'Fieldset with multiple join items',
        preview: [
          Fieldset(
            [
              Legend([text('Settings')]),
              Join([
                const Input(placeholder: 'Product name', classes: 'join-item'),
                Button([text('save')], classes: 'join-item'),
              ]),
            ],
            style: [Size.wxs, BgUtil.base200, Spacing.p(4)],
            classes: 'border border-base-300 rounded-box',
          ),
        ],
        code: '''
Fieldset(
  [
    Legend([text('Settings')]),
    Join([
      Input(placeholder: 'Product name', classes: 'join-item'),
      Button([text('save')], classes: 'join-item'),
    ]),
  ],
  style: [Size.wxs, BgUtil.base200, Spacing.p(4)],
  classes: 'border border-base-300 rounded-box',
)''',
      ),

      // ~Login form with fieldset
      ComponentPreview(
        title: 'Login form with fieldset',
        preview: [
          Fieldset(
            [
              Legend([text('Login')]),
              FormLabel([text('Email')], tag: 'label'),
              const Input(type: 'email', placeholder: 'Email'),
              FormLabel([text('Password')], tag: 'label'),
              const Input(type: 'password', placeholder: 'Password'),
              Button(
                [text('Login')],
                style: [Button.neutral, Spacing.mt(4)],
              ),
            ],
            style: [Size.wxs, BgUtil.base200, Spacing.p(4)],
            classes: 'border border-base-300 rounded-box',
          ),
        ],
        code: '''
Fieldset(
  [
    Legend([text('Login')]),
    FormLabel([text('Email')], tag: 'label'),
    Input(type: 'email', placeholder: 'Email'),
    FormLabel([text('Password')], tag: 'label'),
    Input(type: 'password', placeholder: 'Password'),
    Button(
      [text('Login')],
      style: [Button.neutral, Spacing.mt(4)],
    ),
  ],
  style: [Size.wxs, BgUtil.base200, Spacing.p(4)],
  classes: 'border border-base-300 rounded-box',
)''',
      ),
    ]);
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/fieldset_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/file_input_preview.dart -->
// This file provides interactive examples for the `deepyr` FileInput component.
//
// It demonstrates the core functionality, various styles, sizes, colors,
// and the correct state management pattern for a controlled component that
// handles file selection events.

import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart';
import 'package:universal_web/web.dart' show FileList;

import '../../components/component_preview.dart';

// #region Stateful Helper Components

/// A stateful helper component to demonstrate the interactive nature of the FileInput.
/// It manages the state of the selected file's name to display it to the user.
class _StatefulFileInputExample extends StatefulComponent {
  const _StatefulFileInputExample({this.styles});

  /// Optional styles to apply to the FileInput component.
  final List<FileInputStyling>? styles;

  @override
  State<_StatefulFileInputExample> createState() => _StatefulFileInputExampleState();
}

class _StatefulFileInputExampleState extends State<_StatefulFileInputExample> {
  String _fileName = 'No file selected';

  @override
  Component build(BuildContext context) {
    return Component.fragment([
      FileInput(
        style: component.styles,
        onFilesSelected: (FileList fileList) {
          setState(() {
            if (fileList.length > 0) {
              final firstFile = fileList.item(0);
              if (firstFile != null) {
                _fileName = firstFile.name;
              } else {
                _fileName = 'No file selected';
              }
            } else {
              _fileName = 'No file selected';
            }
          });
        },
      ),
      // Display the selected file name for demonstration purposes.
      p([text('Selected file: $_fileName')], classes: 'text-sm mt-2'),
    ]);
  }
}

// #endregion

/// Renders a collection of [ComponentPreview] widgets to showcase the
/// functionality and styling of the `deepyr` [FileInput] component.
class FileInputPreview extends StatelessComponent {
  const FileInputPreview({super.key});

  @override
  Component build(BuildContext context) {
    return div(classes: 'max-w-5xl mx-auto px-4 space-y-12', [
      // ~File input
      const ComponentPreview(
        title: 'File input',
        description:
            'The FileInput component is controlled. Use the `onFilesSelected` callback to handle user interactions.',
        preview: [
          _StatefulFileInputExample(),
        ],
        code: r'''
class MyUploader extends StatefulComponent {
  @override
  State<MyUploader> createState() => _MyUploaderState();
}

class _MyUploaderState extends State<MyUploader> {
  String _fileName = 'No file selected';

  @override
  Component build(BuildContext context) {
    return FileInput(
      onFilesSelected: (fileList) {
        setState(() {
          if (fileList.isNotEmpty) {
            _fileName = fileList.first.name;
          } else {
            _fileName = 'No file selected';
          }
        });
      },
    );
    return p([text('Selected file: $_fileName')]);
  }
}
''',
      ),

      // ~File input ghost
      const ComponentPreview(
        title: 'File input ghost',
        preview: [
          _StatefulFileInputExample(styles: [FileInput.ghost]),
        ],
        code: '''
// This requires a stateful parent to manage the selected file.
FileInput(
  style: [FileInput.ghost],
  onFilesSelected: (fileList) { /* handle files */ },
)
''',
      ),

      // ~With fieldset and label
      ComponentPreview(
        title: 'With fieldset and label',
        preview: [
          Fieldset(
            [
              Legend([text('Pick a file')]),
              const FileInput(),
              FormLabel([text('Max size 2MB')]),
            ],
            style: [Size.wFull, Size.maxWxs],
          ),
        ],
        code: '''
Fieldset(
  [
    Legend([text('Pick a file')]),
    FileInput(),
    FormLabel([text('Max size 2MB')]),
  ],
  style: [Size.wFull, Size.maxWxs],
)''',
      ),

      // ~Sizes
      const ComponentPreview(
        title: 'Sizes',
        preview: [
          Container(
            [
              FileInput(style: [FileInput.xs]),
              FileInput(style: [FileInput.sm]),
              FileInput(style: [FileInput.md]),
              FileInput(style: [FileInput.lg]),
              FileInput(style: [FileInput.xl]),
            ],
            style: [
              Layout.flex,
              Layout.flexCol,
              Layout.gap4,
              Size.wFull,
              Size.maxWxs,
              Alignment.itemsCenter,
            ],
          ),
        ],
        code: '''
FileInput(style: [FileInput.xs]),
FileInput(style: [FileInput.sm]),
FileInput(style: [FileInput.md]), // Default
FileInput(style: [FileInput.lg]),
FileInput(style: [FileInput.xl]),''',
      ),

      // ~Colors
      const ComponentPreview(
        title: 'Colors',
        preview: [
          Container(
            [
              FileInput(style: [FileInput.primary]),
              FileInput(style: [FileInput.secondary]),
              FileInput(style: [FileInput.accent]),
              FileInput(style: [FileInput.neutral]),
              FileInput(style: [FileInput.info]),
              FileInput(style: [FileInput.success]),
              FileInput(style: [FileInput.warning]),
              FileInput(style: [FileInput.error]),
            ],
            style: [
              Layout.grid,
              Layout.gap2,
              Size.wFull,
              Size.maxWxs,
            ],
          ),
        ],
        code: '''
FileInput(style: [FileInput.primary]),
FileInput(style: [FileInput.secondary]),
FileInput(style: [FileInput.accent]),
FileInput(style: [FileInput.neutral]),
FileInput(style: [FileInput.info]),
FileInput(style: [FileInput.success]),
FileInput(style: [FileInput.warning]),
FileInput(style: [FileInput.error]),''',
      ),

      // ~Disabled
      const ComponentPreview(
        title: 'Disabled',
        preview: [
          FileInput(disabled: true),
        ],
        code: '''
FileInput(disabled: true)''',
      ),
    ]);
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/file_input_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/footer_preview.dart -->
import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart' hide Flex, Spacing; // Hide Jaspr primitives

import '../../components/component_preview.dart';

// #region SVG Icon Helpers
// Encapsulating complex SVGs into reusable helper functions keeps the preview code clean.

Component _acmeLogo({double size = 50}) => svg(
  attributes: {
    'width': size.toString(),
    'height': size.toString(),
    'viewBox': '0 0 24 24',
    'xmlns': 'http://www.w3.org/2000/svg',
    'fill-rule': 'evenodd',
    'clip-rule': 'evenodd',
  },
  classes: 'fill-current',
  [
    path(
      d: 'M22.672 15.226l-2.432.811.841 2.515c.33 1.019-.209 2.127-1.23 2.456-1.15.325-2.148-.321-2.463-1.226l-.84-2.518-5.013 1.677.84 2.517c.391 1.203-.434 2.542-1.831 2.542-.88 0-1.601-.564-1.86-1.314l-.842-2.516-2.431.809c-1.135.328-2.145-.317-2.463-1.229-.329-1.018.211-2.127 1.231-2.456l2.432-.809-1.621-4.823-2.432.808c-1.355.384-2.558-.59-2.558-1.839 0-.817.509-1.582 1.327-1.846l2.433-.809-.842-2.515c-.33-1.02.211-2.129 1.232-2.458 1.02-.329 2.13.209 2.461 1.229l.842 2.515 5.011-1.677-.839-2.517c-.403-1.238.484-2.553 1.843-2.553.819 0 1.585.509 1.85 1.326l.841 2.517 2.431-.81c1.02-.33 2.131.211 2.461 1.229.332 1.018-.21 2.126-1.23 2.456l-2.433.809 1.622 4.823 2.433-.809c1.242-.401 2.557.484 2.557 1.838 0 .819-.51 1.583-1.328 1.847m-8.992-6.428l-5.01 1.675 1.619 4.828 5.011-1.674-1.62-4.829z',
      [],
    ),
  ],
);

Component _socialIcon(String pathData) => a(
  href: '#',
  [
    svg(
      attributes: {
        'xmlns': 'http://www.w3.org/2000/svg',
        'width': '24',
        'height': '24',
        'viewBox': '0 0 24 24',
      },
      classes: 'fill-current',
      [path(d: pathData, [])],
    ),
  ],
);

Component _twitterIcon() => _socialIcon(
  'M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z',
);
Component _youtubeIcon() => _socialIcon(
  'M19.615 3.184c-3.604-.246-11.631-.245-15.23 0-3.897.266-4.356 2.62-4.385 8.816.029 6.185.484 8.549 4.385 8.816 3.6.245 11.626.246 15.23 0 3.897-.266 4.356-2.62 4.385-8.816-.029-6.185-.484-8.549-4.385-8.816zm-10.615 12.816v-8l8 3.993-8 4.007z',
);
Component _facebookIcon() => _socialIcon(
  'M9 8h-3v4h3v12h5v-12h3.642l.358-4h-4v-1.667c0-.955.192-1.333 1.115-1.333h2.885v-5h-3.808c-3.596 0-5.192 1.583-5.192 4.615v3.385z',
);

// #endregion

/// Renders a collection of [ComponentPreview] widgets to showcase the
/// functionality and styling of the `deepyr` [Footer] component.
class FooterPreview extends StatelessComponent {
  const FooterPreview({super.key});

  @override
  Component build(BuildContext context) {
    // A helper function to create a standard navigation column for the footer.
    Component buildNavColumn(String title, List<String> links) {
      return FooterNav(
        title: title,
        links.map((linkText) => Link([text(linkText)], href: '#', style: [Link.hover])).toList(),
      );
    }

    final year = DateTime.now().year;

    return div(classes: 'max-w-5xl mx-auto px-4 space-y-12', [
      // ~Footer (vertical by default, horizontal for sm and up)
      ComponentPreview(
        title: 'Footer (vertical by default, horizontal for sm and up)',
        preview: [
          Footer(
            style: [
              Footer.horizontal.at(Breakpoint.sm),
              BgUtil.neutral,
              TextUtil.neutralContent,
              Spacing.p10,
            ],
            classes: 'rounded',
            [
              buildNavColumn('Services', ['Branding', 'Design', 'Marketing', 'Advertisement']),
              buildNavColumn('Company', ['About us', 'Contact', 'Jobs', 'Press kit']),
              buildNavColumn('Legal', ['Terms of use', 'Privacy policy', 'Cookie policy']),
            ],
          ),
        ],
        code: '''
Footer(
  style: [
    Footer.horizontal.at(Breakpoint.sm),
    BgUtil.neutral, TextUtil.neutralContent, Spacing.p10,
  ],
  classes: 'rounded',
  [
    FooterNav(
      title: 'Services',
      [ Link([text('Branding')], href: '#', style: [Link.hover]), /* ... */ ],
    ),
    // ... more FooterNav components
  ],
)
''',
      ),

      // ~Footer with a logo section
      ComponentPreview(
        title: 'Footer with a logo section',
        preview: [
          Footer(
            style: [
              Footer.horizontal.at(Breakpoint.sm),
              BgUtil.base200,
              TextUtil.baseContent,
              Spacing.p10,
            ],
            classes: 'rounded',
            [
              FooterAside([
                _acmeLogo(),
                p([text('ACME Industries Ltd.'), br(), text('Providing reliable tech since 1992')]),
              ]),
              buildNavColumn('Services', ['Branding', 'Design', 'Marketing', 'Advertisement']),
              buildNavColumn('Company', ['About us', 'Contact', 'Jobs', 'Press kit']),
              buildNavColumn('Legal', ['Terms of use', 'Privacy policy', 'Cookie policy']),
            ],
          ),
        ],
        code: '''
Footer(
  style: [/*...*/],
  classes: 'rounded',
  [
    FooterAside([
      _acmeLogo(),
      p([text('ACME Industries Ltd.'), br(), text('Providing reliable tech since 1992')]),
    ]),
    // ... FooterNav components
  ],
)
''',
      ),

      // ~Footer with a form
      ComponentPreview(
        title: 'Footer with a form',
        preview: [
          Footer(
            style: [
              Footer.horizontal.at(Breakpoint.sm),
              BgUtil.base200,
              TextUtil.baseContent,
              Spacing.p10,
            ],
            classes: 'rounded',
            [
              buildNavColumn('Services', ['Branding', 'Design', 'Marketing', 'Advertisement']),
              buildNavColumn('Company', ['About us', 'Contact', 'Jobs', 'Press kit']),
              buildNavColumn('Legal', ['Terms of use', 'Privacy policy', 'Cookie policy']),
              form([
                FooterTitle([text('Newsletter')]),
                Fieldset(
                  style: [Size.w80],
                  [
                    label([text('Enter your email address')], classes: 'label', htmlFor: 'input1'),
                    Join([
                      const Input(
                        id: 'input1',
                        placeholder: 'username@site.com',
                        style: [Input.bordered],
                      ),
                      Button([text('Subscribe')], style: [Button.primary]),
                    ]),
                  ],
                ),
              ]),
            ],
          ),
        ],
        code: '''
Footer(
  style: [/*...*/],
  [
    // ... FooterNav components
    form([
      FooterTitle([text('Newsletter')]),
      Fieldset(
        style: [Size.w80],
        [
          label([text('Enter your email address')], classes: 'label'),
          Join([
            Input(placeholder: 'username@site.com', style: [Input.bordered]),
            Button([text('Subscribe')], style: [Button.primary]),
          ]),
        ],
      ),
    ]),
  ],
)
''',
      ),

      // ~Footer with logo and social icons
      ComponentPreview(
        title: 'Footer with logo and social icons',
        preview: [
          Footer(
            style: [
              Footer.horizontal.at(Breakpoint.sm),
              BgUtil.neutral,
              TextUtil.neutralContent,
              Spacing.p10,
            ],
            classes: 'rounded',
            [
              FooterAside([
                _acmeLogo(),
                p([text('ACME Industries Ltd.'), br(), text('Providing reliable tech since 1992')]),
              ]),
              FooterNav(
                title: 'Social',
                [
                  div(
                    classes: 'grid grid-flow-col gap-4',
                    [
                      _twitterIcon(),
                      _youtubeIcon(),
                      _facebookIcon(),
                    ],
                  ),
                ],
              ),
            ],
          ),
        ],
        code: '''
Footer(
  style: [/*...*/],
  [
    FooterAside([/* ... */]),
    FooterNav(
      title: 'Social',
      [
        div(
          classes: 'grid grid-flow-col gap-4',
          [ _twitterIcon(), _youtubeIcon(), _facebookIcon() ],
        )
      ],
    ),
  ],
)
''',
      ),

      // ~Footer with copyright text
      ComponentPreview(
        title: 'Footer with copyright text',
        preview: [
          Footer(
            style: [Footer.center, Spacing.p4],
            classes: 'bg-base-300 text-base-content rounded',
            [
              FooterAside([
                p([text('Copyright © $year - All right reserved by ACME Industries Ltd')]),
              ]),
            ],
          ),
        ],
        code: r'''
Footer(
  style: [Footer.center, Spacing.p4],
  classes: 'bg-base-300 text-base-content rounded',
  [
    FooterAside([
      p([text('Copyright © ${DateTime.now().year} - All right reserved by ACME Industries Ltd')]),
    ]),
  ],
)
''',
      ),

      // ~Footer with copyright text and social icons
      ComponentPreview(
        title: 'Footer with copyright text and social icons',
        preview: [
          Footer(
            style: [Spacing.p4],
            classes: 'bg-neutral text-neutral-content items-center rounded',
            [
              FooterAside(
                classes: '${[Alignment.itemsCenter].toClasses()} grid-flow-col',
                [
                  _acmeLogo(size: 36),
                  p([text('Copyright © $year - All right reserved')]),
                ],
              ),
              FooterNav(
                classes: 'grid-flow-col gap-4 md:place-self-center md:justify-self-end',
                [
                  _twitterIcon(),
                  _youtubeIcon(),
                  _facebookIcon(),
                ],
              ),
            ],
          ),
        ],
        code: r'''
Footer(
  style: [Spacing.p4],
  classes: 'bg-neutral text-neutral-content items-center rounded',
  [
    FooterAside(
      classes: '${[Alignment.itemsCenter].toClasses()} grid-flow-col',
      [ /* ... */ ],
    ),
    FooterNav(
      classes: 'grid-flow-col gap-4 md:place-self-center md:justify-self-end',
      [ /* ... social icons */ ],
    ),
  ],
)
''',
      ),

      // ~Footer with links and social icons
      ComponentPreview(
        title: 'Footer with links and social icons',
        preview: [
          Footer(
            style: [
              Footer.horizontal.at(Breakpoint.sm),
              BgUtil.base300,
              TextUtil.baseContent,
              Spacing.p10,
            ],
            classes: 'rounded',
            [
              buildNavColumn('Services', ['Branding', 'Design', 'Marketing', 'Advertisement']),
              buildNavColumn('Company', ['About us', 'Contact', 'Jobs', 'Press kit']),
              FooterNav(
                title: 'Social',
                [
                  div(
                    classes: 'grid grid-flow-col gap-4',
                    [
                      _twitterIcon(),
                      _youtubeIcon(),
                      _facebookIcon(),
                    ],
                  ),
                ],
              ),
            ],
          ),
        ],
        code: '''
Footer(
  style: [/*...*/],
  classes: 'rounded',
  [
    FooterNav(title: 'Services', [/*...*/]),
    FooterNav(title: 'Company', [/*...*/]),
    FooterNav(
      title: 'Social',
      [
        div(
          classes: 'grid grid-flow-col gap-4',
          [ _twitterIcon(), _youtubeIcon(), _facebookIcon() ],
        )
      ],
    ),
  ],
)
''',
      ),

      // ~Footer with 2 rows
      ComponentPreview(
        title: 'Footer with 2 rows',
        preview: [
          Footer(
            style: [
              Footer.horizontal.at(Breakpoint.sm),
              BgUtil.neutral,
              TextUtil.neutralContent,
              Spacing.p10,
            ],
            classes: 'rounded grid-rows-2',
            [
              buildNavColumn('Services', ['Branding', 'Design', 'Marketing', 'Advertisement']),
              buildNavColumn('Company', ['About us', 'Contact', 'Jobs', 'Press kit']),
              buildNavColumn('Legal', ['Terms of use', 'Privacy policy', 'Cookie policy']),
              buildNavColumn('Social', ['Twitter', 'Instagram', 'Facebook', 'GitHub']),
              buildNavColumn('Explore', ['Features', 'Enterprise', 'Security', 'Pricing']),
              buildNavColumn('Apps', ['Mac', 'Windows', 'iPhone', 'Android']),
            ],
          ),
        ],
        code: '''
Footer(
  style: [Footer.horizontal.at(Breakpoint.sm), /*...*/],
  // Use `classes` for grid utilities not yet in `deepyr`
  classes: 'rounded grid-rows-2',
  [
    // ... six FooterNav components
  ],
)
''',
      ),

      // ~Centered footer with logo and social icons
      ComponentPreview(
        title: 'Centered footer with logo and social icons',
        preview: [
          Footer(
            // Corrected: Added horizontal and center styles, corrected colors
            style: [
              Footer.horizontal,
              Footer.center,
              BgUtil.primary,
              TextUtil.primaryContent,
              Spacing.p10,
            ],
            classes: 'rounded',
            [
              FooterAside(
                style: [Alignment.itemsCenter], // This is a deepyr component, `style` is correct
                [
                  _acmeLogo(),
                  p(
                    classes: [FontUtil.bold].toClasses(),
                    [
                      text('ACME Industries Ltd.'),
                      br(),
                      text('Providing reliable tech since 1992'),
                    ],
                  ),
                  p([text('Copyright © $year - All right reserved')]),
                ],
              ),
              FooterNav(
                [
                  div(
                    classes: 'grid grid-flow-col gap-4',
                    [
                      _twitterIcon(),
                      _youtubeIcon(),
                      _facebookIcon(),
                    ],
                  ),
                ],
              ),
            ],
          ),
        ],
        code: r'''
Footer(
  // Corrected styles to match the specification
  style: [Footer.horizontal, Footer.center, BgUtil.primary, TextUtil.primaryContent, Spacing.p10],
  classes: 'rounded',
  [
    FooterAside(
      style: [Alignment.itemsCenter],
      [
        _acmeLogo(size: 50),
        p(
          classes: [FontUtil.bold].toClasses(),
          [text('ACME Industries Ltd.'), br(), text('Providing reliable tech since 1992')],
        ),
        p([text('Copyright © ${DateTime.now().year} - All right reserved')]),
      ],
    ),
    FooterNav(
      [
        div(
          classes: 'grid grid-flow-col gap-4',
          [_twitterIcon(), _youtubeIcon(), _facebookIcon()],
        )
      ],
    ),
  ],
)
''',
      ),

      // ~Centered footer with social icons
      ComponentPreview(
        title: 'Centered footer with social icons',
        preview: [
          Footer(
            // Corrected: Added horizontal and center styles to match visual layout
            style: [
              Footer.horizontal,
              Footer.center,
              BgUtil.base200,
              TextUtil.baseContent,
              Spacing.p10,
            ],
            classes: 'rounded',
            [
              FooterNav(
                classes: 'grid grid-flow-col gap-4',
                [
                  'About us',
                  'Contact',
                  'Jobs',
                  'Press kit',
                ].map((e) => Link([text(e)], href: '#', style: [Link.hover])).toList(),
              ),
              FooterNav(
                [
                  div(
                    classes: 'grid grid-flow-col gap-4',
                    [
                      _twitterIcon(),
                      _youtubeIcon(),
                      _facebookIcon(),
                    ],
                  ),
                ],
              ),
              FooterAside([
                p([text('Copyright © $year - All right reserved by ACME Industries Ltd')]),
              ]),
            ],
          ),
        ],
        code: r'''
Footer(
  style: [Footer.horizontal, Footer.center, BgUtil.base200, TextUtil.baseContent, Spacing.p10],
  classes: 'rounded',
  [
    FooterNav(
      classes: 'grid grid-flow-col gap-4',
      [ /* ... Links ... */ ],
    ),
    FooterNav(
      [
        div(
          classes: 'grid grid-flow-col gap-4',
          [ _twitterIcon(), _youtubeIcon(), _facebookIcon() ],
        )
      ],
    ),
    FooterAside([
      p([text('Copyright © ${DateTime.now().year} - All right reserved')]),
    ]),
  ],
)
''',
      ),

      // ~Two footer
      ComponentPreview(
        title: 'Two footers',
        preview: [
          div(classes: [Size.wFull].toClasses(), [
            Footer(
              style: [
                Footer.horizontal.at(Breakpoint.sm),
                BgUtil.base200,
                TextUtil.baseContent,
                Spacing.p10,
              ],
              [
                buildNavColumn('Services', ['Branding', 'Design', 'Marketing', 'Advertisement']),
                buildNavColumn('Company', ['About us', 'Contact', 'Jobs', 'Press kit']),
                buildNavColumn('Legal', ['Terms of use', 'Privacy policy', 'Cookie policy']),
              ],
            ),
            Footer(
              // Corrected: Swapped classes and style for clarity and correctness
              style: [Spacing.px10, Spacing.py4, BorderUtil.border, BorderUtil.base300],
              classes: 'bg-base-200 text-base-content',
              [
                FooterAside(
                  classes: '${[Alignment.itemsCenter].toClasses()} grid-flow-col',
                  [
                    _acmeLogo(size: 24),
                    p([
                      text('ACME Industries Ltd.'),
                      br(),
                      text('Providing reliable tech since 1992'),
                    ]),
                  ],
                ),
                FooterNav(
                  classes: 'md:place-self-center md:justify-self-end',
                  [
                    div(
                      classes: 'grid grid-flow-col gap-4',
                      [
                        _twitterIcon(),
                        _youtubeIcon(),
                        _facebookIcon(),
                      ],
                    ),
                  ],
                ),
              ],
            ),
          ]),
        ],
        code: r'''
div([
  Footer(
    style: [Footer.horizontal.at(Breakpoint.sm), BgUtil.base200, TextUtil.baseContent, Spacing.p10],
    [ /* ... main footer content ... */ ],
  ),
  Footer(
    style: [Spacing.px10, Spacing.py4, BorderUtil.border, BorderUtil.base300],
    classes: 'bg-base-200 text-base-content',
    [
      FooterAside(
        classes: '${[Alignment.itemsCenter].toClasses()} grid-flow-col',
        [ /* ... aside content ... */ ],
      ),
      FooterNav(
        classes: 'md:place-self-center md:justify-self-end',
        [ /* ... social icons ... */ ],
      ),
    ],
  ),
])
''',
      ),
    ]);
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/footer_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/hero_preview.dart -->
import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart'
    hide Flex, Spacing; // Hide Jaspr primitives to avoid name conflicts

import '../../components/component_preview.dart';

/// Renders a collection of [ComponentPreview] widgets to showcase the
/// functionality and styling of the `deepyr` [Hero] component.
class HeroPreview extends StatelessComponent {
  const HeroPreview({super.key});

  @override
  Component build(BuildContext context) {
    return div(classes: 'max-w-5xl mx-auto px-4 space-y-12', [
      // ~Centered hero
      ComponentPreview(
        title: 'Centered hero',
        preview: [
          Hero(
            style: [const Size('min-h-[30rem]'), BgUtil.base200, Effects.roundedBox],
            [
              HeroContent(
                style: [TextUtil.center],
                [
                  Container(
                    style: [Size.maxWmd],
                    [
                      h1([text('Hello there')], classes: [TextUtil.xl5, FontUtil.bold].toClasses()),
                      p(
                        [
                          text(
                              'Provident cupiditate voluptatem et in. Quaerat fugiat ut assumenda excepturi exercitationem quasi. In deleniti eaque aut repudiandae et a id nisi.')
                        ],
                        classes: [Spacing.py6].toClasses(),
                      ),
                      Button([text('Get Started')], style: [Button.primary]),
                    ],
                  ),
                ],
              ),
            ],
          ),
        ],
        code: '''
Hero(
  style: [Size.minH96, BgUtil.base200, Effects.roundedBox],
  [
    HeroContent(
      style: [TextUtil.center],
      [
        Container(
          style: [Size.maxWmd],
          [
            h1([text('Hello there')], classes: [TextUtil.xl5, FontUtil.bold].toClasses()),
            p(
              [text('Provident cupiditate voluptatem et in...')],
              classes: [Spacing.py6].toClasses(),
            ),
            Button([text('Get Started')], style: [Button.primary]),
          ],
        ),
      ],
    ),
  ],
)
''',
      ),

      // ~Hero with figure
      ComponentPreview(
        title: 'Hero with figure',
        preview: [
          Hero(
            style: [Size.minH96, BgUtil.base200, Effects.roundedBox],
            [
              HeroContent(
                style: [Layout.flexCol, Layout.flexRow.at(Breakpoint.lg)],
                [
                  img(
                    src: '/images/astronaut.jpg',
                    alt: 'Astronaut',
                    classes: 'max-w-sm max-h-86 rounded-lg shadow-2xl',
                  ),
                  Container(
                    [
                      h1([text('Box Office News!')],
                          classes: [TextUtil.xl5, FontUtil.bold].toClasses()),
                      p(
                        [
                          text(
                              'Provident cupiditate voluptatem et in. Quaerat fugiat ut assumenda excepturi exercitationem quasi. In deleniti eaque aut repudiandae et a id nisi.')
                        ],
                        classes: [Spacing.py6].toClasses(),
                      ),
                      Button([text('Get Started')], style: [Button.primary]),
                    ],
                  ),
                ],
              ),
            ],
          ),
        ],
        code: '''
Hero(
  style: [Size.minH96, BgUtil.base200, Effects.roundedBox],
  [
    HeroContent(
      // Responsive flex direction
      style: [Layout.flexCol, Layout.flexRow.at(Breakpoint.lg)],
      [
        img(
          src: '...',
          classes: 'max-w-sm rounded-lg shadow-2xl',
        ),
        Container([
          h1([text('Box Office News!')], classes: [TextUtil.xl5, FontUtil.bold].toClasses()),
          p([text('Provident cupiditate...')], classes: [Spacing.py6].toClasses()),
          Button([text('Get Started')], style: [Button.primary]),
        ]),
      ],
    ),
  ],
)
''',
      ),

      // ~Hero with figure but reverse order
      ComponentPreview(
        title: 'Hero with figure but reverse order',
        preview: [
          Hero(
            style: [Size.minH96, BgUtil.base200, Effects.roundedBox],
            [
              HeroContent(
                style: [Layout.flexCol, Layout.flexRowReverse.at(Breakpoint.lg)],
                [
                  img(
                    src: '/images/astronaut.jpg',
                    alt: 'Astronaut',
                    classes: 'max-w-sm max-h-86 rounded-lg shadow-2xl',
                  ),
                  Container(
                    [
                      h1([text('Box Office News!')],
                          classes: [TextUtil.xl5, FontUtil.bold].toClasses()),
                      p(
                        [
                          text(
                              'Provident cupiditate voluptatem et in. Quaerat fugiat ut assumenda excepturi exercitationem quasi. In deleniti eaque aut repudiandae et a id nisi.')
                        ],
                        classes: [Spacing.py6].toClasses(),
                      ),
                      Button([text('Get Started')], style: [Button.primary]),
                    ],
                  ),
                ],
              ),
            ],
          ),
        ],
        code: '''
Hero(
  style: [Size.minH96, BgUtil.base200, Effects.roundedBox],
  [
    HeroContent(
      // Responsive reversed flex direction
      style: [Layout.flexCol, Layout.flexRowReverse.at(Breakpoint.lg)],
      [
        img(src: '...', classes: 'max-w-sm rounded-lg shadow-2xl'),
        Container([
          h1([text('Box Office News!')], classes: [TextUtil.xl5, FontUtil.bold].toClasses()),
          p([text('Provident cupiditate...')], classes: [Spacing.py6].toClasses()),
          Button([text('Get Started')], style: [Button.primary]),
        ]),
      ],
    ),
  ],
)
''',
      ),

      // ~Hero with form
      ComponentPreview(
        title: 'Hero with form',
        preview: [
          Hero(
            style: [Size.minH96, BgUtil.base200, Effects.roundedBox],
            [
              HeroContent(
                style: [Layout.flexCol, Layout.flexRowReverse.at(Breakpoint.lg)],
                [
                  Container(
                    style: [TextUtil.center, TextUtil.left.at(Breakpoint.lg)],
                    [
                      h1([text('Login now!')], classes: [TextUtil.xl5, FontUtil.bold].toClasses()),
                      p(
                        [
                          text(
                              'Provident cupiditate voluptatem et in. Quaerat fugiat ut assumenda excepturi exercitationem quasi. In deleniti eaque aut repudiandae et a id nisi.')
                        ],
                        classes: [Spacing.py6].toClasses(),
                      ),
                    ],
                  ),
                  Card(
                    style: [
                      Flex.shrink0,
                      Size.wFull,
                      Size.maxWsm,
                      Effects.shadow2xl,
                      BgUtil.base100
                    ],
                    [
                      CardBody([
                        Fieldset([
                          label([
                            span([text('Email')], classes: 'label-text')
                          ], classes: 'label'),
                          const Input(type: 'email', placeholder: 'Email'),
                          label([
                            span([text('Password')], classes: 'label-text')
                          ], classes: 'label'),
                          const Input(type: 'password', placeholder: 'Password'),
                          div([
                            Link([text('Forgot password?')], style: [Link.hover])
                          ]),
                          Button([text('Login')], style: [Button.neutral, Spacing.mt4]),
                        ]),
                      ])
                    ],
                  ),
                ],
              ),
            ],
          ),
        ],
        code: '''
Hero(
  style: [Size.minH96, BgUtil.base200, Effects.roundedBox],
  [
    HeroContent(
      style: [Layout.flexCol, Layout.flexRowReverse.at(Breakpoint.lg)],
      [
        // Text Content Container
        Container(
          style: [TextUtil.center, TextUtil.left.at(Breakpoint.lg)],
          [
            h1([text('Login now!')], classes: [TextUtil.xl5, FontUtil.bold].toClasses()),
            p([text('Provident cupiditate...')], classes: [Spacing.py6].toClasses()),
          ],
        ),
        // Form Card Container
        Card(
          style: [Flex.shrink0, Size.wFull, Size.maxWsm, Effects.shadow2xl, BgUtil.base100],
          [
            CardBody([
              Fieldset([
                label([span([text('Email')], classes: 'label-text')], classes: 'label'),
                Input(type: 'email', placeholder: 'Email'),

                label([span([text('Password')], classes: 'label-text')], classes: 'label'),
                Input(type: 'password', placeholder: 'Password'),

                div([Link([text('Forgot password?')], style: [Link.hover])]),

                Button([text('Login')], style: [Button.neutral, Spacing.mt4]),
              ]),
            ])
          ],
        ),
      ],
    ),
  ],
)
''',
      ),

      // ~Hero with overlay image
      ComponentPreview(
        title: 'Hero with overlay image',
        preview: [
          Hero(
            style: [Size.minH96, Effects.roundedBox],
            css: const Styles(raw: {
              'background-image': 'url(/images/background.jpg)',
            }),
            [
              const HeroOverlay(style: [BgUtil.opacity75, Effects.roundedBox]),
              HeroContent(
                style: [TextUtil.center, TextUtil.neutralContent],
                [
                  Container(
                    style: [Size.maxWmd],
                    [
                      h1(
                        [text('Hello there')],
                        classes: [Spacing.mb5, TextUtil.xl5, FontUtil.bold].toClasses(),
                      ),
                      p(
                        [
                          text(
                              'Provident cupiditate voluptatem et in. Quaerat fugiat ut assumenda excepturi exercitationem quasi. In deleniti eaque aut repudiandae et a id nisi.')
                        ],
                        classes: [Spacing.mb5].toClasses(),
                      ),
                      Button([text('Get Started')], style: [Button.primary]),
                    ],
                  ),
                ],
              ),
            ],
          ),
        ],
        code: '''
Hero(
  style: [Size.minH96, Effects.roundedBox],
  css: Styles.raw({
    'background-image': 'url(path/to/image.webp)',
  }),
  [
    HeroOverlay(style: [BgUtil.opacity60, Effects.roundedBox]),
    HeroContent(
      style: [TextUtil.center, TextUtil.neutralContent],
      [
        Container(
          style: [Size.maxWmd],
          [
            h1([text('Hello there')], classes: [Spacing.mb5, TextUtil.xl5, FontUtil.bold].toClasses()),
            p([text('Provident cupiditate...')], classes: [Spacing.mb5].toClasses()),
            Button([text('Get Started')], style: [Button.primary]),
          ],
        ),
      ],
    ),
  ],
)
''',
      ),
    ]);
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/hero_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/icon_preview.dart -->
import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart';

import '../../components/component_preview.dart';

class IconPreview extends StatelessComponent {
  const IconPreview({super.key});

  @override
  Component build(BuildContext context) {
    return div(classes: 'max-w-5xl mx-auto px-4', [
      // Basic Icon
      ComponentPreview(
        title: 'Basic Icon',
        preview: [Icon('home')],
        code: '''
Icon('home'),
''',
      ),

      // Icon Sizes
      ComponentPreview(
        title: 'Icon Sizes',
        preview: [
          Icon('home', style: [TextUtil.xs]),
          Icon('home', style: [TextUtil.sm]),
          Icon('home', style: [TextUtil.base]),
          Icon('home', style: [TextUtil.lg]),
          Icon('home', style: [TextUtil.xl]),
          Icon('home', style: [TextUtil.xl2]),
          Icon('home', style: [TextUtil.xl3]),
        ],
        code: '''
Icon('home', style: [TextUtil.xs]),
Icon('home', style: [TextUtil.sm]),
Icon('home', style: [TextUtil.base]),
Icon('home', style: [TextUtil.lg]),
Icon('home', style: [TextUtil.xl]),
Icon('home', style: [TextUtil.xl2]),
Icon('home', style: [TextUtil.xl3]),
''',
      ),

      // Icon Colors
      ComponentPreview(
        title: 'Icon Colors',
        preview: [
          Icon('warning', style: [TextUtil.primary]),
          Icon('warning', style: [TextUtil.secondary]),
          Icon('warning', style: [TextUtil.accent]),
          Icon('warning', style: [TextUtil.info]),
          Icon('warning', style: [TextUtil.success]),
          Icon('warning', style: [TextUtil.warning]),
          Icon('warning', style: [TextUtil.error]),
        ],
        code: '''
Icon('warning', style: [TextUtil.primary]),
Icon('warning', style: [TextUtil.secondary]),
Icon('warning', style: [TextUtil.accent]),
Icon('warning', style: [TextUtil.info]),
Icon('warning', style: [TextUtil.success]),
Icon('warning', style: [TextUtil.warning]),
Icon('warning', style: [TextUtil.error]),
''',
      ),

      // Fill Variations
      ComponentPreview(
        title: 'Fill Variations',
        preview: [
          Icon('favorite'),
          // TODO - Add fill modifier
          Icon('favorite', style: [TextUtil.error]),
        ],
        code: '''
Icon('favorite'),
Icon('favorite', style:[TextUtil.fill]),
''',
      ),

      // Weight Variations
      ComponentPreview(
        title: 'Weight Variations',
        preview: [
          Icon('star', style: [TextUtil.thin]),
          Icon('star', style: [TextUtil.normal]),
          Icon('star', style: [TextUtil.bold]),
        ],
        code: '''
Icon('star', style: [TextUtil.thin]),
Icon('star', style: [TextUtil.regular]),
Icon('star', style: [TextUtil.bold]),
''',
      ),

      // Common Icons Example
      ComponentPreview(
        title: 'Common Icons Example',
        preview: [
          Icon('home'),
          Icon('person'),
          Icon('settings'),
          Icon('favorite'),
          Icon('search'),
          Icon('menu'),
          Icon('close'),
          Icon('check'),
          Icon('error'),
          Icon('info'),
          Icon('warning'),
          Icon('mail'),
          Icon('phone'),
          Icon('location_on'),
        ],
        code: '''
Icon('home'),
Icon('person'),
Icon('settings'),
Icon('favorite'),
Icon('search'),
Icon('menu'),
Icon('close'),
Icon('check'),
Icon('error'),
Icon('info'),
Icon('warning'),
Icon('mail'),
Icon('phone'),
Icon('location_on'),
''',
      ),
    ]);
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/icon_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/indicator_preview.dart -->
// This file provides interactive examples for the `deepyr` Indicator component.
//
// It demonstrates how to place indicator items on various components like
// Buttons, Avatars, Cards, and Tabs, and showcases all positional variations.

import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart' hide Spacing;

import '../../components/component_preview.dart';

/// Renders a collection of [ComponentPreview] widgets to showcase the
/// functionality and styling of the `deepyr` [Indicator] component.
class IndicatorPreview extends StatelessComponent {
  const IndicatorPreview({super.key});

  @override
  Component build(BuildContext context) {
    return div(classes: 'max-w-5xl mx-auto px-4 space-y-12', [
      // ~Status Indicator
      ComponentPreview(
        title: 'Status Indicator',
        description:
            "Note: 'status' is a distinct DaisyUI component. A dedicated `Status` component will be created in deepyr. For now, we use a styled Container as a placeholder.",
        preview: [
          Indicator([
            const IndicatorItem([
              Container(
                [],
                classes: 'status status-success',
              ),
            ]),
            Container(
              [text('content')],
              style: [
                Size.w(32),
                Size.h(32),
                Effects.rounded,
                BgUtil.base300,
                Layout.grid,
                Alignment.placeItemsCenter,
              ],
            ),
          ]),
        ],
        code: '''
Indicator([
  // TODO: Replace with a dedicated Status() component when available.
  IndicatorItem([
    Container([], classes: 'status status-success')
  ]),
  Container(
    [text('content')],
    style: [
      Size.w(32),
      Size.h(32),
      Effects.rounded,
      BgUtil.base300,
      Layout.grid,
      Alignment.placeItemsCenter,
    ],
  ),
])''',
      ),

      // ~Badge as indicator
      ComponentPreview(
        title: 'Badge as indicator',
        preview: [
          Indicator([
            IndicatorItem([
              Badge([text('New')], style: [Badge.primary]),
            ]),
            Container(
              [text('content')],
              style: [
                Size.w(32),
                Size.h(32),
                Effects.rounded,
                BgUtil.base300,
                Layout.grid,
                Alignment.placeItemsCenter,
              ],
            ),
          ]),
        ],
        code: '''
Indicator([
  IndicatorItem([
    Badge([text('New')], style: [Badge.primary]),
  ]),
  Container(
    [text('content')],
    style: [
      Size.w(32),
      Size.h(32),
      Effects.rounded,
      BgUtil.base300,
      Layout.grid,
      Alignment.placeItemsCenter,
    ],
  ),
])''',
      ),

      // ~for button
      ComponentPreview(
        title: 'For a button',
        preview: [
          Indicator([
            IndicatorItem([
              Badge([text('12')], style: [Badge.secondary]),
            ]),
            Button([text('inbox')]),
          ]),
        ],
        code: '''
Indicator([
  IndicatorItem([
    Badge([text('12')], style: [Badge.secondary]),
  ]),
  Button([text('inbox')]),
])''',
      ),

      // ~for tab
      ComponentPreview(
        title: 'For a tab',
        preview: [
          Tabs(
            [
              Tab([text('Messages')]),
              Indicator([
                IndicatorItem([
                  Badge([text('8')]),
                ]),
                Tab([text('Notifications')], isActive: true),
              ]),
              Tab([text('Requests')]),
            ],
            style: [Tabs.lift],
          ),
        ],
        code: '''
Tabs(
  [
    Tab([text('Messages')]),
    Indicator([
      IndicatorItem([Badge([text('8')])]),
      Tab([text('Notifications')], isActive: true),
    ]),
    Tab([text('Requests')]),
  ],
  style: [Tabs.lift],
)''',
      ),

      // ~for avatar
      ComponentPreview(
        title: 'For an avatar',
        preview: [
          Indicator(
            [
              IndicatorItem([
                Badge([text('Justice')], style: [Badge.secondary]),
              ]),
              Avatar([
                Container(
                  [
                    img(
                      src: '/images/user1.webp',
                      alt: 'Avatar',
                    ),
                  ],
                  style: [Size.w20, Size.h20, Effects.roundedLg],
                ),
              ]),
            ],
          ),
        ],
        code: '''
Indicator([
  IndicatorItem([
    Badge([text('Justice')], style: [Badge.secondary]),
  ]),
  Avatar([
    Container(
      [img(src: '/images/user1.webp')],
      style: [Size.w20, Size.h20, Effects.roundedLg],
    )
  ]),
])''',
      ),

      // ~for an input
      ComponentPreview(
        title: 'For an input',
        preview: [
          Indicator([
            IndicatorItem([
              Badge([text('Required')]),
            ]),
            const Input(
              placeholder: 'Your email address',
              style: [Input.bordered],
            ),
          ]),
        ],
        code: '''
Indicator([
  IndicatorItem([Badge([text('Required')])]),
  Input(
    placeholder: 'Your email address',
    style: [Input.bordered],
  ),
])''',
      ),

      // ~A button as an indicator for a card
      ComponentPreview(
        title: 'A button as an indicator for a card',
        preview: [
          Indicator(
            [
              IndicatorItem(
                [
                  Button([text('Apply')], style: [Button.primary]),
                ],
                style: [IndicatorItem.bottom],
              ),
              Card(
                [
                  CardBody([
                    CardTitle([text('Job Title')]),
                    p([text('Rerum reiciendis beatae tenetur excepturi')]),
                  ]),
                ],
                style: [BgUtil.base100, Effects.shadowSm],
              ),
            ],
            style: [Spacing.my(6), Spacing.mx(10)],
          ),
        ],
        code: '''
Indicator(
  [
    IndicatorItem(
      [Button([text('Apply')], style: [Button.primary])],
      style: [IndicatorItem.bottom],
    ),
    Card(
      [
        CardBody([
          CardTitle([text('Job Title')]),
          p([text('Rerum reiciendis beatae tenetur excepturi')]),
        ]),
      ],
      style: [BgUtil.base100, Effects.shadowSm],
    ),
  ],
  style: [Spacing.my(6), Spacing.mx(10)],
)''',
      ),

      // ~in center of an image
      ComponentPreview(
        title: 'In center of an image',
        preview: [
          Indicator(
            [
              IndicatorItem(
                [
                  Badge(
                    [text('Only available for Pro users')],
                  ),
                ],
                style: [IndicatorItem.center, IndicatorItem.middle],
              ),
              img(
                src: '/images/sneaker.png',
                alt: 'Shoes',
                classes: 'rounded',
              ),
            ],
            style: [Size.maxWxs],
          ),
        ],
        code: '''
Indicator([
  IndicatorItem(
    [Badge([text('Only available for Pro users')])],
    style: [IndicatorItem.center, IndicatorItem.middle],
  ),
  img(
    src: '/images/sneaker.png',
    alt: 'Shoes',
    classes: 'rounded'
  ),
],
style: [Size.maxWxs],
)''',
      ),

      // ~ Positional Indicators
      _buildPositionalPreviews(),

      // ~multiple indicators
      ComponentPreview(
        title: 'Multiple indicators',
        preview: [
          Indicator([
            IndicatorItem(
              [
                Badge([text('↖︎')]),
              ],
              style: [IndicatorItem.top, IndicatorItem.start],
            ),
            IndicatorItem(
              [
                Badge([text('↑')]),
              ],
              style: [IndicatorItem.top, IndicatorItem.center],
            ),
            IndicatorItem(
              [
                Badge([text('↗︎')]),
              ],
              style: [IndicatorItem.top, IndicatorItem.end],
            ),
            IndicatorItem(
              [
                Badge([text('←')]),
              ],
              style: [IndicatorItem.middle, IndicatorItem.start],
            ),
            IndicatorItem(
              [
                Badge([text('●')]),
              ],
              style: [IndicatorItem.middle, IndicatorItem.center],
            ),
            IndicatorItem(
              [
                Badge([text('→')]),
              ],
              style: [IndicatorItem.middle, IndicatorItem.end],
            ),
            IndicatorItem(
              [
                Badge([text('↙︎')]),
              ],
              style: [IndicatorItem.bottom, IndicatorItem.start],
            ),
            IndicatorItem(
              [
                Badge([text('↓')]),
              ],
              style: [IndicatorItem.bottom, IndicatorItem.center],
            ),
            IndicatorItem(
              [
                Badge([text('↘︎')]),
              ],
              style: [IndicatorItem.bottom, IndicatorItem.end],
            ),
            Container(
              [text('Box')],
              style: [
                Size.w(60),
                Size.h(32),
                BgUtil.base300,
                Layout.grid,
                Alignment.placeItemsCenter,
                Effects.rounded,
              ],
            ),
          ]),
        ],
        code: '''
Indicator([
  IndicatorItem([Badge([text('↖︎')])], style: [IndicatorItem.top, IndicatorItem.start]),
  IndicatorItem([Badge([text('↑')])], style: [IndicatorItem.top, IndicatorItem.center]),
  IndicatorItem([Badge([text('↗︎')])], style: [IndicatorItem.top, IndicatorItem.end]),
  IndicatorItem([Badge([text('←')])], style: [IndicatorItem.middle, IndicatorItem.start]),
  IndicatorItem([Badge([text('●')])], style: [IndicatorItem.middle, IndicatorItem.center]),
  IndicatorItem([Badge([text('→')])], style: [IndicatorItem.middle, IndicatorItem.end]),
  IndicatorItem([Badge([text('↙︎')])], style: [IndicatorItem.bottom, IndicatorItem.start]),
  IndicatorItem([Badge([text('↓')])], style: [IndicatorItem.bottom, IndicatorItem.center]),
  IndicatorItem([Badge([text('↘︎')])], style: [IndicatorItem.bottom, IndicatorItem.end]),
  Container(
    [text('Box')],
    style: [
      Size.w(60),
      Size.h(32),
      BgUtil.base300,
      Layout.grid,
      Alignment.placeItemsCenter,
      Effects.rounded,
    ],
  ),
])''',
      ),

      // ~Responsive
      ComponentPreview(
        title: 'Responsive',
        description: 'Indicator changes position based on the screen resolution.',
        preview: [
          Indicator([
            IndicatorItem(
              [
                const Badge([], style: [Badge.secondary]),
              ],
              style: [
                IndicatorItem.start, // Default (mobile)
                IndicatorItem.middle.at(Breakpoint.sm), // sm and up
                IndicatorItem.bottom.at(Breakpoint.md), // md and up
                IndicatorItem.center.at(Breakpoint.lg), // lg and up
                IndicatorItem.end.at(Breakpoint.xl), // xl and up
              ],
            ),
            Container(
              [text('content')],
              style: [
                Size.w(32),
                Size.h(32),
                Effects.rounded,
                BgUtil.base300,
                Layout.grid,
                Alignment.placeItemsCenter,
              ],
            ),
          ]),
        ],
        code: '''
Indicator([
  IndicatorItem(
    [Badge([], style: [Badge.secondary])],
    style: [
      IndicatorItem.start,                      // Default (mobile)
      IndicatorItem.middle.at(Breakpoint.sm), // sm and up
      IndicatorItem.bottom.at(Breakpoint.md), // md and up
      IndicatorItem.center.at(Breakpoint.lg), // lg and up
      IndicatorItem.end.at(Breakpoint.xl),    // xl and up
    ],
  ),
  Container(
    [text('content')],
    style: [
      Size.w(32),
      Size.h(32),
      Effects.rounded,
      BgUtil.base300,
      Layout.grid,
      Alignment.placeItemsCenter,
    ],
  ),
])''',
      ),
    ]);
  }
}

/// Helper function to generate the individual positional previews.
/// This restores the clear, simple examples that were previously missing.
Component _buildPositionalPreviews() {
  Container contentBox({double width = 32, double height = 32}) => Container(
    [text('content')],
    style: [
      Size.w(width),
      Size.h(height),
      Effects.rounded,
      BgUtil.base300,
      Layout.grid,
      Alignment.placeItemsCenter,
    ],
  );

  final positions = {
    'Top Start': [IndicatorItem.top, IndicatorItem.start],
    'Top Center': [IndicatorItem.top, IndicatorItem.center],
    'Top End (Default)': [IndicatorItem.top, IndicatorItem.end],
    'Middle Start': [IndicatorItem.middle, IndicatorItem.start],
    'Middle Center': [IndicatorItem.middle, IndicatorItem.center],
    'Middle End': [IndicatorItem.middle, IndicatorItem.end],
    'Bottom Start': [IndicatorItem.bottom, IndicatorItem.start],
    'Bottom Center': [IndicatorItem.bottom, IndicatorItem.center],
    'Bottom End': [IndicatorItem.bottom, IndicatorItem.end],
  };

  return ComponentPreview(
    title: 'Positional Indicators',
    description:
        'Place the indicator on any corner or edge. The component now handles centering automatically.',
    previewClasses: 'grid grid-cols-3 gap-6 place-items-center w-full m-8',
    preview: [
      for (final entry in positions.entries)
        Indicator(
          [
            IndicatorItem(
              [
                const Badge([], style: [Badge.secondary]),
              ],
              style: entry.value,
            ),
            contentBox(),
          ],
          // style: [Spacing.m12],
        ),
    ],
    code: '''
// Example for middle-center position.
Indicator([
  IndicatorItem(
    [Badge([], style: [Badge.secondary])],
    style: [IndicatorItem.middle, IndicatorItem.center],
  ),
  Container(
    [text('content')],
    style: [
      Size.w(32),
      Size.h(32),
      Effects.rounded,
      BgUtil.base300,
      Layout.grid,
      Alignment.placeItemsCenter,
    ],
  ),
])''',
  );
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/indicator_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/input_preview.dart -->
// This file provides interactive examples for the `deepyr` Input component.
//
// It demonstrates the core functionality, various styles, sizes, colors,
// and advanced compositions using other deepyr components like `Label`, `Fieldset`,
// `Join`, `Datalist`, and `ValidatorHint`.

import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart' hide Flex;

import '../../components/component_preview.dart';

/// Renders a collection of [ComponentPreview] widgets to showcase the
/// functionality and styling of the `deepyr` [Input] component.
class InputPreview extends StatelessComponent {
  const InputPreview({super.key});

  @override
  Component build(BuildContext context) {
    return div(classes: 'max-w-5xl mx-auto px-4 space-y-12', [
      // ~Text input
      const ComponentPreview(
        title: 'Text input',
        preview: [
          Input(
            placeholder: 'Type here',
            style: [Input.bordered],
          ),
        ],
        code: '''
Input(
  placeholder: 'Type here',
  style: [Input.bordered],
)''',
      ),

      // ~Text input with text label inside
      ComponentPreview(
        title: 'Text input with text label inside',
        description:
            'Use the Label component as a styled container to add icons and other elements inside the input field.',
        preview: [
          Container(
            [
              Label(
                [
                  Icon('search'),
                  const Input(
                    type: 'search',
                    placeholder: 'Search',
                    style: [Flex.grow], // Makes the input fill the space
                  ),
                  Kbd([text('⌘')], style: [Kbd.sm]),
                  Kbd([text('K')], style: [Kbd.sm]),
                ],
                type: LabelContainerType.input,
                style: [Layout.flex, Alignment.itemsCenter, Layout.gap(2)],
              ),
              Label(
                [
                  Icon('description'), // 'file' icon
                  const Input(
                    placeholder: 'index.php',
                    style: [Flex.grow],
                  ),
                ],
                type: LabelContainerType.input,
                style: [Layout.flex, Alignment.itemsCenter, Layout.gap(2)],
              ),
              Label(
                [
                  FormLabel([text('Path')], tag: 'span'),
                  const Input(
                    placeholder: 'src/app/',
                    style: [Flex.grow],
                  ),
                  Badge([text('Optional')], style: [Badge.neutral, Badge.xs]),
                ],
                type: LabelContainerType.input,
                style: [Layout.flex, Alignment.itemsCenter, Layout.gap(2)],
              ),
            ],
            style: [Layout.grid, Layout.gap(4), Size.wxs],
          ),
        ],
        code: '''
Label(
  [
    Icon('search'),
    Input(type: 'search', placeholder: 'Search', style: [Flex.grow]),
    Kbd([text('⌘')], style: [Kbd.sm]),
    Kbd([text('K')], style: [Kbd.sm]),
  ],
  type: LabelContainerType.input,
  style: [Layout.flex, Alignment.itemsCenter, Layout.gap(2)],
),
Label(
  [
    Icon('description'),
    Input(placeholder: 'index.php', style: [Flex.grow]),
  ],
  type: LabelContainerType.input,
  style: [Layout.flex, Alignment.itemsCenter, Layout.gap(2)],
),
Label(
  [
    FormLabel([text('Path')], tag: 'span'),
    Input(placeholder: 'src/app/', style: [Flex.grow]),
    Badge([text('Optional')], style: [Badge.neutral, Badge.xs]),
  ],
  type: LabelContainerType.input,
  style: [Layout.flex, Alignment.itemsCenter, Layout.gap(2)],
)''',
      ),

      // ~Ghost style
      const ComponentPreview(
        title: 'Ghost style',
        preview: [
          Input(
            placeholder: 'Type here',
            style: [Input.ghost, Input.bordered],
          ),
        ],
        code: '''
Input(
  placeholder: 'Type here',
  style: [Input.ghost, Input.bordered],
)''',
      ),

      // ~With fieldset and fieldset-legend
      ComponentPreview(
        title: 'With fieldset and legend',
        preview: [
          Fieldset(
            [
              Legend([text('What is your name?')]),
              const Input(
                placeholder: 'Type here',
                style: [Input.bordered],
              ),
              FormLabel([text('Optional')]),
            ],
            style: [Size.wxs],
          ),
        ],
        code: '''
Fieldset(
  [
    Legend([text('What is your name?')]),
    Input(placeholder: 'Type here', style: [Input.bordered]),
    FormLabel([text('Optional')]),
  ],
  style: [Size.wxs],
)''',
      ),

      // ~Input colors
      ComponentPreview(
        title: 'Input colors',
        preview: [
          Container(
            [
              const Input(placeholder: 'neutral', style: [Input.bordered, Input.neutral]),
              const Input(placeholder: 'Primary', style: [Input.bordered, Input.primary]),
              const Input(placeholder: 'Secondary', style: [Input.bordered, Input.secondary]),
              const Input(placeholder: 'Accent', style: [Input.bordered, Input.accent]),
              const Input(placeholder: 'Info', style: [Input.bordered, Input.info]),
              const Input(placeholder: 'Success', style: [Input.bordered, Input.success]),
              const Input(placeholder: 'Warning', style: [Input.bordered, Input.warning]),
              const Input(placeholder: 'Error', style: [Input.bordered, Input.error]),
            ],
            style: [Layout.grid, Layout.gap(4), Size.wxs],
          ),
        ],
        code: '''
Input(placeholder: 'neutral', style: [Input.bordered, Input.neutral]),
Input(placeholder: 'Primary', style: [Input.bordered, Input.primary]),
Input(placeholder: 'Secondary', style: [Input.bordered, Input.secondary]),
Input(placeholder: 'Accent', style: [Input.bordered, Input.accent]),
Input(placeholder: 'Info', style: [Input.bordered, Input.info]),
Input(placeholder: 'Success', style: [Input.bordered, Input.success]),
Input(placeholder: 'Warning', style: [Input.bordered, Input.warning]),
Input(placeholder: 'Error', style: [Input.bordered, Input.error]),''',
      ),

      // ~Sizes
      ComponentPreview(
        title: 'Sizes',
        preview: [
          Container(
            [
              const Input(placeholder: 'Xsmall', style: [Input.bordered, Input.xs]),
              const Input(placeholder: 'Small', style: [Input.bordered, Input.sm]),
              const Input(placeholder: 'Medium', style: [Input.bordered, Input.md]),
              const Input(placeholder: 'Large', style: [Input.bordered, Input.lg]),
              const Input(placeholder: 'Xlarge', style: [Input.bordered, Input.xl]),
            ],
            style: [Layout.grid, Layout.gap(4), Size.wxs],
          ),
        ],
        code: '''
Input(placeholder: 'Xsmall', style: [Input.bordered, Input.xs]),
Input(placeholder: 'Small', style: [Input.bordered, Input.sm]),
Input(placeholder: 'Medium', style: [Input.bordered, Input.md]),
Input(placeholder: 'Large', style: [Input.bordered, Input.lg]),
Input(placeholder: 'Xlarge', style: [Input.bordered, Input.xl]),''',
      ),

      // ~Disabled
      const ComponentPreview(
        title: 'Disabled',
        preview: [
          Input(
            placeholder: "You can't touch this",
            style: [Input.bordered],
            disabled: true,
          ),
        ],
        code: '''
Input(
  placeholder: "You can't touch this",
  style: [Input.bordered],
  disabled: true,
)''',
      ),

      // ~Text input with data list suggestion
      ComponentPreview(
        title: 'Text input with data list suggestion',
        preview: [
          const Input(
            placeholder: 'Which browser do you use',
            style: [Input.bordered],
            attributes: {'list': 'browsers'},
          ),
          Datalist(
            id: 'browsers',
            [
              option([], value: 'Chrome'),
              option([], value: 'Firefox'),
              option([], value: 'Safari'),
              option([], value: 'Opera'),
              option([], value: 'Edge'),
            ],
          ),
        ],
        code: '''
Input(
  placeholder: 'Which browser do you use',
  style: [Input.bordered],
  attributes: {'list': 'browsers'},
),
Datalist(
  id: 'browsers',
  [
    option([], value: 'Chrome'),
    option([], value: 'Firefox'),
    option([], value: 'Safari'),
    option([], value: 'Opera'),
    option([], value: 'Edge'),
  ],
)''',
      ),

      // ~Different Input Types
      ComponentPreview(
        title: 'Different Input Types',
        preview: [
          Container(
            [
              const Input(type: 'date', style: [Input.bordered]),
              const Input(type: 'time', style: [Input.bordered]),
              const Input(type: 'datetime-local', style: [Input.bordered]),
            ],
            style: [Layout.grid, Layout.gap(4)],
          )
        ],
        code: '''
Input(type: 'date', style: [Input.bordered]),
Input(type: 'time', style: [Input.bordered]),
Input(type: 'datetime-local', style: [Input.bordered]),''',
      ),

      // ~Username text input with icon and validator
      ComponentPreview(
        title: 'Username input with icon and validator',
        preview: [
          Container(
            [
              Label(
                [
                  Icon('person'),
                  const Input(
                    placeholder: 'Username',
                    required: true,
                    pattern: r'[A-Za-z][A-Za-z0-9\-]*',
                    minLength: 3,
                    maxLength: 30,
                    title: 'Only letters, numbers or dash',
                  ),
                ],
                type: LabelContainerType.input,
                style: [Layout.flex, Alignment.itemsCenter, Layout.gap(2)],
              ),
              ValidatorHint([
                text('Must be 3 to 30 characters'),
                br(),
                text('containing only letters, numbers or dash'),
              ]),
            ],
            style: [Size.wFull, Size.maxWxs],
          )
        ],
        code: r'''
Label(
  [
    Icon('person'),
    Input(
      placeholder: 'Username',
      required: true,
      pattern: r'[A-Za-z][A-Za-z0-9\-]*',
      minLength: 3,
      maxLength: 30,
      title: 'Only letters, numbers or dash',
    ),
  ],
  type: LabelContainerType.input,
  style: [Layout.flex, Alignment.itemsCenter, Layout.gap(2)],
),
ValidatorHint([
  text('Must be 3 to 30 characters'),
  br(),
  text('containing only letters, numbers or dash'),
])''',
      ),

      // ~Email input with icon, validator, button, join
      ComponentPreview(
        title: 'Email input with icon, validator, and joined button',
        description: 'The smart `Join` component automatically styles its `deepyr` children.',
        preview: [
          Join([
            // The Join component will automatically add 'join-item' to this Container
            Container([
              Label(
                [
                  Icon('mail'),
                  const Input(
                    type: 'email',
                    placeholder: 'mail@site.com',
                    required: true,
                  ),
                ],
                type: LabelContainerType.input,
                style: [Layout.flex, Alignment.itemsCenter, Layout.gap(2)],
              ),
              ValidatorHint(
                [text('Enter valid email address')],
                style: [Layout.hidden],
              ),
            ]),
            // The Join component will automatically add 'join-item' to this Button
            Button([text('Join')], style: [Button.neutral]),
          ]),
        ],
        code: '''
// The `Join` component handles adding the `join-item` class automatically.
Join([
  // This Container groups the Label and Hint and becomes a single join-item.
  Container([
    Label(
      [
        Icon('mail'),
        Input(
          type: 'email',
          placeholder: 'mail@site.com',
          required: true,
        ),
      ],
      type: LabelContainerType.input,
      style: [Layout.flex, Alignment.itemsCenter, Layout.gap(2)],
    ),
    ValidatorHint(
      [text('Enter valid email address')],
      style: [Layout.hidden], // Hide hint until invalid
    ),
  ]),
  // This Button becomes the second join-item.
  Button([text('Join')], style: [Button.neutral]),
])''',
      ),

      // ~Password input with icon and validator
      ComponentPreview(
        title: 'Password input with icon and validator',
        preview: [
          Container(
            [
              Label(
                [
                  Icon('key'),
                  const Input(
                    type: 'password',
                    placeholder: 'Password',
                    required: true,
                    minLength: 8,
                    pattern: r'(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}',
                    title:
                        'Must be more than 8 characters, including number, lowercase letter, uppercase letter',
                  ),
                ],
                type: LabelContainerType.input,
                style: [Layout.flex, Alignment.itemsCenter, Layout.gap(2)],
              ),
              ValidatorHint(
                [
                  text('Must be more than 8 characters, including'),
                  br(),
                  text('At least one number'),
                  br(),
                  text('At least one lowercase letter'),
                  br(),
                  text('At least one uppercase letter'),
                ],
                style: [Layout.hidden],
              ),
            ],
            style: [Size.wFull, Size.maxWxs],
          ),
        ],
        code: r'''
Label(
  [
    Icon('key'),
    Input(
      type: 'password',
      placeholder: 'Password',
      required: true,
      minLength: 8,
      pattern: r'(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}',
      title: 'Must be more than 8 characters...',
    ),
  ],
  type: LabelContainerType.input,
  style: [Layout.flex, Alignment.itemsCenter, Layout.gap(2)],
),
ValidatorHint(
  [ /* Hint text with <br> */ ],
  style: [Layout.hidden],
)''',
      ),

      // ~Telephone number input with icon and validator
      ComponentPreview(
        title: 'Telephone number input with icon and validator',
        preview: [
          Container(
            [
              Label(
                [
                  Icon('phone_iphone'),
                  const Input(
                    type: 'tel',
                    placeholder: 'Phone',
                    required: true,
                    pattern: '[0-9]*',
                    minLength: 10,
                    maxLength: 10,
                    title: 'Must be 10 digits',
                    classes: 'tabular-nums',
                  ),
                ],
                type: LabelContainerType.input,
                style: [Layout.flex, Alignment.itemsCenter, Layout.gap(2)],
              ),
              ValidatorHint([text('Must be 10 digits')]),
            ],
            style: [Size.wFull, Size.maxWxs],
          ),
        ],
        code: '''
Label(
  [
    Icon('phone_iphone'),
    Input(
      type: 'tel',
      placeholder: 'Phone',
      required: true,
      pattern: r'[0-9]*',
      minLength: 10,
      maxLength: 10,
      title: 'Must be 10 digits',
      // 'tabular-nums' is a specific utility not yet in deepyr,
      // so 'classes' is the appropriate escape hatch.
      classes: 'tabular-nums',
    ),
  ],
  type: LabelContainerType.input,
  style: [Layout.flex, Alignment.itemsCenter, Layout.gap(2)],
),
ValidatorHint([text('Must be 10 digits')])''',
      ),

      // ~URL with icon and validator
      ComponentPreview(
        title: 'URL input with icon and validator',
        preview: [
          Container(
            [
              Label(
                [
                  Icon('link'),
                  const Input(
                    type: 'url',
                    placeholder: 'https://',
                    value: 'https://',
                    required: true,
                    pattern:
                        r'^(https?://)?([a-zA-Z0-9]([a-zA-Z0-9\-].*[a-zA-Z0-9])?\.)+[a-zA-Z].*$',
                    title: 'Must be valid URL',
                  ),
                ],
                type: LabelContainerType.input,
                style: [Layout.flex, Alignment.itemsCenter, Layout.gap(2)],
              ),
              ValidatorHint([text('Must be valid URL')]),
            ],
            style: [Size.wFull, Size.maxWxs],
          ),
        ],
        code: r'''
Label(
  [
    Icon('link'),
    Input(
      type: 'url',
      placeholder: 'https://',
      value: 'https://',
      required: true,
      pattern: r'^(https?://)?([a-zA-Z0-9]([a-zA-Z0-9\-].*[a-zA-Z0-9])?\.)+[a-zA-Z].*$',
      title: 'Must be valid URL',
    ),
  ],
  type: LabelContainerType.input,
  style: [Layout.flex, Alignment.itemsCenter, Layout.gap(2)],
),
ValidatorHint([text('Must be valid URL')])''',
      ),
    ]);
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/input_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/join_preview.dart -->
// This file provides interactive examples for the `deepyr` Join component.
//
// It demonstrates how the "smart" Join container automatically styles its direct
// `deepyr` children, and how to compose it with components like `Button`,
// `Input`, `Select`, and `Indicator`. It also covers responsive behavior and
// edge cases like using primitive Jaspr components.

import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart';

import '../../components/component_preview.dart';

/// Renders a collection of [ComponentPreview] widgets to demonstrate the
/// functionality and styling of the `deepyr` [Join] component.
class JoinPreview extends StatelessComponent {
  const JoinPreview({super.key});

  @override
  Component build(BuildContext context) {
    return div(classes: 'max-w-5xl mx-auto px-4 space-y-12', [
      // ~Join
      ComponentPreview(
        title: 'Join',
        description:
            'Group multiple `deepyr` components together. The `Join` container automatically applies the `join-item` class to its direct children.',
        preview: [
          Join([
            Button([text('Button')]),
            Button([text('Button')]),
            Button([text('Button')]),
          ]),
        ],
        code: '''
Join([
  Button([text('Button')]),
  Button([text('Button')]),
  Button([text('Button')]),
])
''',
      ),

      // ~Group items vertically
      ComponentPreview(
        title: 'Group items vertically',
        preview: [
          Join(
            [
              Button([text('Button')]),
              Button([text('Button')]),
              Button([text('Button')]),
            ],
            style: [Join.vertical],
          ),
        ],
        code: '''
Join(
  [
    Button([text('Button')]),
    Button([text('Button')]),
    Button([text('Button')]),
  ],
  style: [Join.vertical],
)
''',
      ),

      // ~Responsive
      ComponentPreview(
        title: 'Responsive: vertical on small screen, horizontal on large screen',
        preview: [
          Join(
            [
              Button([text('Button')]),
              Button([text('Button')]),
              Button([text('Button')]),
            ],
            style: [Join.vertical, Join.horizontal.at(Breakpoint.lg)],
          ),
        ],
        code: '''
Join(
  [
    Button([text('Button')]),
    Button([text('Button')]),
    Button([text('Button')]),
  ],
  style: [Join.vertical, Join.horizontal.at(Breakpoint.lg)],
)
''',
      ),

      // ~With extra elements in the group
      ComponentPreview(
        title: 'With extra elements in the group',
        description: 'Demonstrates composing `Input`, `Select`, and `Button` with an `Indicator`.',
        preview: [
          Join([
            Input(
              placeholder: 'Search',
              style: [Size.w(21.2), Size.w(52).at(Breakpoint.md)],
            ),
            Select(
              style: [Size.w(23.2), Size.wAuto.at(Breakpoint.md)],
              [
                option([text('Filter')], disabled: true, selected: true),
                option([text('Sci-fi')]),
                option([text('Drama')]),
                option([text('Action')]),
              ],
            ),
            Indicator(
              // The Indicator component itself becomes a join-item
              [
                IndicatorItem([
                  Badge([text('new')], style: [Badge.secondary]),
                ]),
                Button([text('Search')]), // The Button is styled by its parent context
              ],
            ),
          ]),
        ],
        code: '''
Join([
  Input(
    placeholder: 'Search',
    style: [Size.w(21.2), Size.w(52).at(Breakpoint.md)],
  ),
  Select(
    style: [Size.w(23.2), Size.wAuto.at(Breakpoint.md)],
    [
      option([text('Filter')], disabled: true, selected: true),
      option([text('Sci-fi')]),
      option([text('Drama')]),
      option([text('Action')]),
    ],
  ),
  Indicator(
    [
      IndicatorItem([
        Badge([text('new')], style: [Badge.secondary]),
      ]),
      Button([text('Search')]),
    ],
  ),
])
''',
      ),

      // ~Custom border radius
      ComponentPreview(
        title: 'Custom border radius',
        preview: [
          Join([
            Input(
              placeholder: 'Email',
              style: [Size.w(36), Size.w(52).at(Breakpoint.lg)],
            ),
            Button(
              [text('Subscribe')],
              // The `rounded-r-full` utility is not yet in `Effects`.
              // Using `classes` is a temporary, acceptable escape hatch.
              classes: 'rounded-r-full',
            ),
          ]),
        ],
        code: '''
Join([
  Input(
    placeholder: 'Email',
    style: [Size.w(36), Size.w(52).at(Breakpoint.lg)],
  ),
  Button(
    [text('Subscribe')],
    // 'rounded-r-full' will be available in a future Effects update.
    classes: 'rounded-r-full',
  ),
])
''',
      ),

      // ~Join radio inputs with btn style
      ComponentPreview(
        title: 'Join radio inputs with btn style',
        description:
            "This uses primitive `input()` components. Since they don't extend `UiComponent`, the `join-item` class must be added manually via `classes`.",
        preview: [
          Join([
            input(
              type: InputType.radio,
              name: 'options',
              classes: 'join-item btn', // Manual class application
              attributes: {'aria-label': 'Radio 1'},
            ),
            input(
              type: InputType.radio,
              name: 'options',
              classes: 'join-item btn', // Manual class application
              attributes: {'aria-label': 'Radio 2', 'checked': ''},
            ),
            input(
              type: InputType.radio,
              name: 'options',
              classes: 'join-item btn', // Manual class application
              attributes: {'aria-label': 'Radio 3'},
            ),
          ]),
        ],
        code: '''
// The "smart" Join component only works on `UiComponent` children.
// For primitive components like `input()`, add `join-item` manually.
Join([
  input(
    type: InputType.radio,
    name: 'options',
    classes: 'join-item btn',
    attributes: {'aria-label': 'Radio 1'},
  ),
  input(
    type: InputType.radio,
    name: 'options',
    classes: 'join-item btn',
    attributes: {'aria-label': 'Radio 2', 'checked': ''},
  ),
  input(
    type: InputType.radio,
    name: 'options',
    classes: 'join-item btn',
    attributes: {'aria-label': 'Radio 3'},
  ),
])
''',
      ),
    ]);
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/join_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/kbd_preview.dart -->
import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart' hide Spacing;

import '../../components/component_preview.dart';

/// Renders a collection of [ComponentPreview] widgets to demonstrate the
/// functionality and styling of the `deepyr` [Kbd] component.
class KbdPreview extends StatelessComponent {
  const KbdPreview({super.key});

  @override
  Component build(BuildContext context) {
    return div(classes: 'max-w-5xl mx-auto px-4 space-y-12', [
      // ~Kbd
      ComponentPreview(
        title: 'Kbd',
        preview: [
          Kbd([text('K')]),
        ],
        code: '''
Kbd([text('K')])
''',
      ),

      // ~Kbd sizes
      ComponentPreview(
        title: 'Kbd sizes',
        preview: [
          Kbd([text('Xsmall')], style: [Kbd.xs]),
          Kbd([text('Small')], style: [Kbd.sm]),
          Kbd([text('Medium')], style: [Kbd.md]),
          Kbd([text('Large')], style: [Kbd.lg]),
          Kbd([text('Xlarge')], style: [Kbd.xl]),
        ],
        code: '''
Kbd([text('Xsmall')], style: [Kbd.xs]),
Kbd([text('Small')], style: [Kbd.sm]),
Kbd([text('Medium')], style: [Kbd.md]), // Default
Kbd([text('Large')], style: [Kbd.lg]),
Kbd([text('Xlarge')], style: [Kbd.xl]),
''',
      ),

      // ~In text
      ComponentPreview(
        title: 'In text',
        preview: [
          span([
            text('Press '),
            Kbd([text('F')], style: [Kbd.sm]),
            text(' to pay respects.'),
          ]),
        ],
        code: '''
span([
  text('Press '),
  Kbd([text('F')], style: [Kbd.sm]),
  text(' to pay respects.'),
])
''',
      ),

      // ~Key combination
      ComponentPreview(
        title: 'Key combination',
        preview: [
          Kbd([text('ctrl')]),
          text('+'),
          Kbd([text('shift')]),
          text('+'),
          Kbd([text('del')]),
        ],
        code: '''
Kbd([text('ctrl')]),
text('+'),
Kbd([text('shift')]),
text('+'),
Kbd([text('del')]),
''',
      ),

      // ~Function Keys
      ComponentPreview(
        title: 'Function Keys',
        preview: [
          Kbd([text('⌘')]),
          Kbd([text('⌥')]),
          Kbd([text('⇧')]),
          Kbd([text('⌃')]),
        ],
        code: '''
Kbd([text('⌘')]),
Kbd([text('⌥')]),
Kbd([text('⇧')]),
Kbd([text('⌃')]),
''',
      ),

      // ~A full keyboard
      ComponentPreview(
        title: 'A full keyboard',
        preview: [
          div(classes: 'overflow-x-auto', [
            Container(
              [
                text('q'),
                text('w'),
                text('e'),
                text('r'),
                text('t'),
                text('y'),
                text('u'),
                text('i'),
                text('o'),
                text('p')
              ].map((key) => Kbd([key])).toList(),
              style: [Layout.flex, Alignment.justifyCenter, Layout.gap1, Spacing.mb(1)],
            ),
            Container(
              [
                text('a'),
                text('s'),
                text('d'),
                text('f'),
                text('g'),
                text('h'),
                text('j'),
                text('k'),
                text('l')
              ].map((key) => Kbd([key])).toList(),
              style: [Layout.flex, Alignment.justifyCenter, Layout.gap1, Spacing.mb(1)],
            ),
            Container(
              [
                text('z'),
                text('x'),
                text('c'),
                text('v'),
                text('b'),
                text('n'),
                text('m'),
                text('/')
              ].map((key) => Kbd([key])).toList(),
              style: [Layout.flex, Alignment.justifyCenter, Layout.gap1, Spacing.mb(1)],
            ),
          ]),
        ],
        code: '''
// Helper list of keys
final row1 = ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'];
final row2 = ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l'];
final row3 = ['z', 'x', 'c', 'v', 'b', 'n', 'm', '/'];

div(classes: 'overflow-x-auto', [
  Container(
    row1.map((key) => Kbd([text(key)])).toList(),
    style: [Layout.flex, Alignment.justifyCenter, Layout.gap1, Spacing.mb(1)],
  ),
  Container(
    row2.map((key) => Kbd([text(key)])).toList(),
    style: [Layout.flex, Alignment.justifyCenter, Layout.gap1, Spacing.mb(1)],
  ),
  Container(
    row3.map((key) => Kbd([text(key)])).toList(),
    style: [Layout.flex, Alignment.justifyCenter, Layout.gap1, Spacing.mb(1)],
  ),
])
''',
      ),

      // ~Arrow Keys
      ComponentPreview(
        title: 'Arrow Keys',
        preview: [
          // Use a grid layout for the cross shape. Since deepyr's grid utilities
          // might be incomplete, we can construct this with nested flex containers
          // which is a reliable method.
          Container(
            [
              // Top row (Up arrow)
              Kbd([text('▲')]),
              // Middle row (Left and Right arrows)
              Container(
                [
                  Kbd([text('◀︎')]),
                  Kbd([text('▶︎')]),
                ],
                style: [Layout.flex, Layout.gap12], // A small gap between left/right

              ),
              // Bottom row (Down arrow)
              Kbd([text('▼')]),
            ],
            // Main container styles: vertical flex, centered items, small gap between rows
            style: [Layout.flex, Layout.flexCol, Alignment.itemsCenter, Layout.gap1],
          ),
        ],
        code: '''
// Use a nested flexbox structure to create the cross layout.
Container(
  [
    // Up arrow
    Kbd([text('▲')]),
    // Middle row for left and right arrows
    Container(
      [
        Kbd([text('◀︎')]),
        Kbd([text('▶︎')]),
      ],
      style: [Layout.flex, Layout.gap12],
    ),
    // Down arrow
    Kbd([text('▼')]),
  ],
  // Main container: lays out the three rows vertically and centers them
  style: [Layout.flex, Layout.flexCol, Alignment.itemsCenter, Layout.gap1],
)
''',
      ),
    ]);
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/kbd_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/label_preview.dart -->
import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart' hide Flex;

import '../../components/component_preview.dart';

/// A component that renders a collection of [ComponentPreview] widgets
/// to demonstrate the functionality and styling of the `deepyr` [Label] component.
///
/// This preview demonstrates how to compose the `Label` container with `Input`,
/// `Select`, and the new `FormLabel` component, following deepyr's best practices.
class LabelPreview extends StatelessComponent {
  const LabelPreview({super.key});

  @override
  Component build(BuildContext context) {
    return div(classes: 'max-w-5xl mx-auto px-4 space-y-12', [
      // ~Label for input using the new API
      ComponentPreview(
        title: 'Label as an Input Container',
        preview: [
          Label(
            [
              FormLabel([text('https://')], tag: 'span'),
              const Input(
                placeholder: 'URL',
                style: [Flex.grow], // Use Flex.grow instead of classes: 'grow'
              ),
            ],
            type: LabelContainerType.input,
            style: [Layout.flex, Alignment.itemsCenter, Layout.gap2],
          ),
        ],
        code: '''
Label(
  [
    // Use the FormLabel component for the descriptive text part.
    FormLabel([text('https://')], tag: 'span'),
    // Use the style property for layout behavior like 'grow'.
    Input(placeholder: 'URL', style: [Flex.grow]),
  ],
  type: LabelContainerType.input,
  isBordered: true,
  style: [Layout.flex, Alignment.itemsCenter, Layout.gap2],
)
''',
      ),

      // ~Label for input at the end
      ComponentPreview(
        title: 'Label for input at the end',
        preview: [
          Label(
            [
              const Input(
                placeholder: 'domain name',
                style: [Flex.grow], // Use Flex.grow
              ),
              FormLabel([text('.com')], tag: 'span'),
            ],
            type: LabelContainerType.input,
            style: [Layout.flex, Alignment.itemsCenter, Layout.gap2],
          ),
        ],
        code: '''
Label(
  [
    Input(placeholder: 'domain name', style: [Flex.grow]),
    FormLabel([text('.com')], tag: 'span'),
  ],
  type: LabelContainerType.input,
  isBordered: true,
  style: [Layout.flex, Alignment.itemsCenter, Layout.gap2],
)
''',
      ),

      // ~Label for select
      ComponentPreview(
        title: 'Label as a Select Container',
        preview: [
          Label(
            [
              FormLabel([text('Type')], tag: 'span'),
              Select(
                [
                  option([text('Personal')]),
                  option([text('Business')]),
                ],
                style: [Flex.grow], // Use Flex.grow
              ),
            ],
            type: LabelContainerType.select,
            style: [Layout.flex, Alignment.itemsCenter, Layout.gap2],
          ),
        ],
        code: '''
Label(
  [
    FormLabel([text('Type')], tag: 'span'),
    Select(
      [
        option([text('Personal')]),
        option([text('Business')]),
      ],
      style: [Flex.grow],
    ),
  ],
  type: LabelContainerType.select,
  isBordered: true,
  style: [Layout.flex, Alignment.itemsCenter, Layout.gap2],
)
''',
      ),

      // ~Label for date input
      ComponentPreview(
        title: 'Label for date input',
        preview: [
          Label(
            [
              FormLabel([text('Publish date')], tag: 'span'),
              const Input(type: 'date', style: [Flex.grow]), // Use Flex.grow
            ],
            type: LabelContainerType.input,
            style: [Layout.flex, Alignment.itemsCenter, Layout.gap2],
          ),
        ],
        code: '''
Label(
  [
    FormLabel([text('Publish date')], tag: 'span'),
    Input(type: 'date', style: [Flex.grow]),
  ],
  type: LabelContainerType.input,
  isBordered: true,
  style: [Layout.flex, Alignment.itemsCenter, Layout.gap2],
)
''',
      ),

      // ~Floating Label
      ComponentPreview(
        title: 'Floating Label',
        preview: [
          Label(
            [
              // For this specific pattern, DaisyUI uses a span *without* the 'label' class.
              // Therefore, we use a plain `span` as there is no deepyr abstraction for it.
              span([text('Your Email')]),
              const Input(
                type: 'email',
                placeholder: 'mail@site.com',
                style: [Input.md],
              ),
            ],
            type: LabelContainerType.input,
            isBordered: false,
            style: [Label.floating, Size.wFull, Size.maxWxs], // Use Size utilities
          ),
        ],
        code: '''
Label(
  [
    // The floating label pattern uses a plain <span> without the 'label' class.
    span([text('Your Email')]),
    Input(
      type: 'email',
      placeholder: 'mail@site.com',
      style: [Input.md],
    ),
  ],
  type: LabelContainerType.input,
  isBordered: false,
  // Use the `style` property for modifiers and sizing.
  style: [Label.floating, Size.wFull, Size.maxWxs],
)
''',
      ),
    ]);
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/label_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/link_preview.dart -->
// This file provides interactive examples for the `deepyr` Link component.
//
// It demonstrates how to create styled links, apply different colors, control
// the hover behavior, and use the component with different underlying HTML tags.

import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart';

import '../../components/component_preview.dart';

/// Renders a collection of [ComponentPreview] widgets to showcase the
/// functionality and styling of the `deepyr` [Link] component.
class LinkPreview extends StatelessComponent {
  const LinkPreview({super.key});

  @override
  Component build(BuildContext context) {
    return div(classes: 'max-w-5xl mx-auto px-4 space-y-12', [
      // ~Link
      ComponentPreview(
        title: 'Link',
        description: 'The Link component renders an `<a>` tag by default, but can be any tag.',
        preview: [
          Link([text('Click me')]),
        ],
        code: '''
Link([text('Click me')])
''',
      ),

      // ~Link in a sentence
      ComponentPreview(
        title: 'Link in a sentence',
        preview: [
          p([
            text('Tailwind CSS resets the style of links by default.'),
            br(),
            text('Add the Link component to make it look like a '),
            Link([text('normal link')], href: '#'),
            text(' again.'),
          ]),
        ],
        code: '''
p([
  text('Tailwind CSS resets the style of links by default.'),
  br(),
  text('Add the Link component to make it look like a '),
  Link([text('normal link')], href: '#'),
  text(' again.'),
])
''',
      ),

      // ~Generate previews for each color
      ..._buildColorPreviews(),

      // ~Show underline only on hover
      ComponentPreview(
        title: 'Show underline only on hover',
        preview: [
          Link([text('Click me')], href: '#', style: [Link.hover]),
        ],
        code: '''
Link([text('Click me')], href: '#', style: [Link.hover])
''',
      ),
    ]);
  }

  /// Helper function to generate all the color previews to avoid repetition.
  Iterable<Component> _buildColorPreviews() {
    final colors = {
      'Primary': Link.primary,
      'Secondary': Link.secondary,
      'Accent': Link.accent,
      'Neutral': Link.neutral,
      'Success': Link.success,
      'Info': Link.info,
      'Warning': Link.warning,
      'Error': Link.error,
    };

    return colors.entries.map((entry) {
      final title = '${entry.key} color';
      final style = entry.value;

      return ComponentPreview(
        title: title,
        preview: [
          Link([text('Click me')], href: '#', style: [style]),
        ],
        code: '''
Link(
  [text('Click me')],
  href: '#',
  style: [Link.${entry.key.toLowerCase()}],
)
''',
      );
    });
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/link_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/loading_preview.dart -->
// This file provides interactive examples for the `deepyr` Loading component.
//
// It demonstrates all available animation styles, sizes, and the correct
// method for applying colors using general text utility classes.

import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart';

import '../../components/component_preview.dart';

/// Renders a collection of [ComponentPreview] widgets to showcase the
/// functionality and styling of the `deepyr` [Loading] component.
class LoadingPreview extends StatelessComponent {
  const LoadingPreview({super.key});

  @override
  Component build(BuildContext context) {
    return div(classes: 'max-w-5xl mx-auto px-4 space-y-12', [
      // ~Generate previews for each animation type
      ..._buildAnimationPreviews(),

      // ~Loading with colors
      const ComponentPreview(
        title: 'Loading with colors',
        description:
            'Color is applied using general-purpose text color utilities, not component-specific styles.',
        preview: [
          Loading(style: [Loading.spinner, TextUtil.primary]),
          Loading(style: [Loading.spinner, TextUtil.secondary]),
          Loading(style: [Loading.spinner, TextUtil.accent]),
          Loading(style: [Loading.spinner, TextUtil.neutral]),
          Loading(style: [Loading.spinner, TextUtil.info]),
          Loading(style: [Loading.spinner, TextUtil.success]),
          Loading(style: [Loading.spinner, TextUtil.warning]),
          Loading(style: [Loading.spinner, TextUtil.error]),
        ],
        code: '''
// Apply color using TextUtil.<color>
Loading(style: [Loading.spinner, TextUtil.primary]),
Loading(style: [Loading.spinner, TextUtil.secondary]),
Loading(style: [Loading.spinner, TextUtil.accent]),
Loading(style: [Loading.spinner, TextUtil.neutral]),
Loading(style: [Loading.spinner, TextUtil.info]),
Loading(style: [Loading.spinner, TextUtil.success]),
Loading(style: [Loading.spinner, TextUtil.warning]),
Loading(style: [Loading.spinner, TextUtil.error]),
''',
      ),
    ]);
  }

  /// Helper function to generate the previews for each animation style to avoid repetition.
  Iterable<Component> _buildAnimationPreviews() {
    final animationTypes = {
      'spinner': Loading.spinner,
      'dots': Loading.dots,
      'ring': Loading.ring,
      'ball': Loading.ball,
      'bars': Loading.bars,
      'infinity': Loading.infinity,
    };

    return animationTypes.entries.map((entry) {
      final name = entry.key;
      final style = entry.value;

      return ComponentPreview(
        title: 'Loading $name',
        preview: [
          Loading(style: [style, Loading.xs]),
          Loading(style: [style, Loading.sm]),
          Loading(style: [style, Loading.md]),
          Loading(style: [style, Loading.lg]),
          Loading(style: [style, Loading.xl]),
        ],
        code: '''
Loading(style: [Loading.$name, Loading.xs]),
Loading(style: [Loading.$name, Loading.sm]),
Loading(style: [Loading.$name, Loading.md]),
Loading(style: [Loading.$name, Loading.lg]),
Loading(style: [Loading.$name, Loading.xl]),
''',
      );
    });
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/loading_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/menu_preview.dart -->
import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart' hide Spacing;

import '../../components/component_preview.dart';

// #region SVG Icon Helpers
// Private helper functions to create the specific SVG icons used in the
// DaisyUI examples, ensuring the preview code remains clean and focused on
// the component itself. Material Symbols are used where possible via the Icon component.

Component _homeIcon({double size = 5}) => Icon('home', style: [Size('w-$size'), Size('h-$size')]);
Component _detailsIcon({double size = 5}) =>
    Icon('info', style: [Size('w-$size'), Size('h-$size')]);
Component _statsIcon({double size = 5}) =>
    Icon('analytics', style: [Size('w-$size'), Size('h-$size')]);

// #endregion

// #region File Tree SVG Icon Helpers
// These helpers replicate the *exact* SVG icons from the DaisyUI documentation
// for the "File tree" example to ensure perfect visual fidelity.

Component _fileTreeFileIcon() => svg(
  attributes: {
    'xmlns': 'http://www.w3.org/2000/svg',
    'fill': 'none',
    'viewBox': '0 0 24 24',
    'stroke-width': '1.5',
    'stroke': 'currentColor',
  },
  classes: 'w-4 h-4',
  [
    path(
      [],
      attributes: {
        'stroke-linecap': 'round',
        'stroke-linejoin': 'round',
        'd':
            'M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9z',
      },
    ),
  ],
);

Component _fileTreeFolderIcon() => svg(
  attributes: {
    'xmlns': 'http://www.w3.org/2000/svg',
    'fill': 'none',
    'viewBox': '0 0 24 24',
    'stroke-width': '1.5',
    'stroke': 'currentColor',
  },
  classes: 'w-4 h-4',
  [
    path(
      [],
      attributes: {
        'stroke-linecap': 'round',
        'stroke-linejoin': 'round',
        'd':
            'M2.25 12.75V12A2.25 2.25 0 014.5 9.75h15A2.25 2.25 0 0121.75 12v.75m-8.69-6.44l-2.12-2.12a1.5 1.5 0 00-1.061-.44H4.5A2.25 2.25 0 002.25 6v12a2.25 2.25 0 002.25 2.25h15A2.25 2.25 0 0021.75 18V9a2.25 2.25 0 00-2.25-2.25h-5.379a1.5 1.5 0 01-1.06-.44z',
      },
    ),
  ],
);

Component _fileTreeImageIcon() => svg(
  attributes: {
    'xmlns': 'http://www.w3.org/2000/svg',
    'fill': 'none',
    'viewBox': '0 0 24 24',
    'stroke-width': '1.5',
    'stroke': 'currentColor',
  },
  classes: 'w-4 h-4',
  [
    path(
      [],
      attributes: {
        'stroke-linecap': 'round',
        'stroke-linejoin': 'round',
        'd':
            'M2.25 15.75l5.159-5.159a2.25 2.25 0 013.182 0l5.159 5.159m-1.5-1.5l1.409-1.409a2.25 2.25 0 013.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 001.5-1.5V6a1.5 1.5 0 00-1.5-1.5H3.75A1.5 1.5 0 002.25 6v12a1.5 1.5 0 001.5 1.5zm10.5-11.25h.008v.008h-.008V8.25zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z',
      },
    ),
  ],
);
// #endregion

// #region Stateful Helper Components

/// A stateful component to demonstrate a JS-controlled collapsible submenu pattern.
class _JsControlledSubmenu extends StatefulComponent {
  const _JsControlledSubmenu();

  @override
  State<_JsControlledSubmenu> createState() => _JsControlledSubmenuState();
}

class _JsControlledSubmenuState extends State<_JsControlledSubmenu> {
  bool _isOpen = false;

  @override
  Component build(BuildContext context) {
    return Menu(
      style: [BgUtil.base200, Size.w56, Effects.roundedBox],
      [
        MenuItem([text('Item 1')]),
        li([
          MenuDropdownToggle(
            [text('Parent')],
            onClick: (_) => setState(() => _isOpen = !_isOpen),
          ),
          MenuDropdownContent(
            [
              MenuItem([text('Submenu 1')]),
              MenuItem([text('Submenu 2')]),
            ],
            classes: _isOpen ? 'menu-dropdown-show' : '',
          ),
        ]),
      ],
    );
  }
}

// #endregion

/// Renders a collection of [ComponentPreview] widgets to showcase the
/// functionality and styling of the `deepyr` [Menu] component.
class MenuPreview extends StatelessComponent {
  const MenuPreview({super.key});

  @override
  Component build(BuildContext context) {
    return div(classes: 'max-w-5xl mx-auto px-4 space-y-12', [
      // ~Menu
      ComponentPreview(
        title: 'Menu',
        preview: [
          Menu(
            style: [Size.w56, BgUtil.base200, Effects.roundedBox],
            [
              MenuItem([text('Item 1')]),
              MenuItem([text('Item 2')]),
              MenuItem([text('Item 3')]),
            ],
          ),
        ],
        code: '''
Menu(
  style: [Size.w56, BgUtil.base200, Effects.roundedBox],
  [
    MenuItem([text('Item 1')]),
    MenuItem([text('Item 2')]),
    MenuItem([text('Item 3')]),
  ],
)''',
      ),

      // ~Responsive
      ComponentPreview(
        title: 'Responsive: vertical on small screen, horizontal on large',
        preview: [
          Menu(
            style: [Menu.horizontal.at(Breakpoint.lg), BgUtil.base200, Effects.roundedBox],
            [
              MenuItem([text('Item 1')]),
              MenuItem([text('Item 2')]),
              MenuItem([text('Item 3')]),
            ],
          ),
        ],
        code: '''
Menu(
  style: [
    Menu.horizontal.at(Breakpoint.lg),
    BgUtil.base200,
    Effects.roundedBox,
  ],
  [
    MenuItem([text('Item 1')]),
    MenuItem([text('Item 2')]),
    MenuItem([text('Item 3')]),
  ],
)''',
      ),

      // ~Menu with icon only
      ComponentPreview(
        title: 'Menu with icon only',
        preview: [
          Menu(
            style: [BgUtil.base200, Effects.roundedBox],
            [
              MenuItem([_homeIcon()]),
              MenuItem([_detailsIcon()]),
              MenuItem([_statsIcon()]),
            ],
          ),
        ],
        code: '''
Menu(
  style: [BgUtil.base200, Effects.roundedBox],
  [
    MenuItem([Icon('home', style: [Size.w5, Size.h5])]),
    MenuItem([Icon('info', style: [Size.w5, Size.h5])]),
    MenuItem([Icon('analytics', style: [Size.w5, Size.h5])]),
  ],
)''',
      ),

      // ~Menu with icon only (horizontal)
      ComponentPreview(
        title: 'Menu with icon only (horizontal)',
        preview: [
          Menu(
            style: [Menu.horizontal, BgUtil.base200, Effects.roundedBox],
            [
              MenuItem([_homeIcon()]),
              MenuItem([_detailsIcon()]),
              MenuItem([_statsIcon()]),
            ],
          ),
        ],
        code: '''
Menu(
  style: [Menu.horizontal, BgUtil.base200, Effects.roundedBox],
  [
    MenuItem([Icon('home', style: [Size.w5, Size.h5])]),
    MenuItem([Icon('info', style: [Size.w5, Size.h5])]),
    MenuItem([Icon('analytics', style: [Size.w5, Size.h5])]),
  ],
)''',
      ),

      // ~Menu with icon only with tooltip
      ComponentPreview(
        title: 'Menu with icon only with tooltip',
        preview: [
          Menu(
            style: [BgUtil.base200, Effects.roundedBox],
            [
              MenuItem(
                [_homeIcon()],
                classes: 'tooltip tooltip-right',
                attributes: {'data-tip': 'Home'},
              ),
              MenuItem(
                [_detailsIcon()],
                classes: 'tooltip tooltip-right',
                attributes: {'data-tip': 'Details'},
              ),
              MenuItem(
                [_statsIcon()],
                classes: 'tooltip tooltip-right',
                attributes: {'data-tip': 'Stats'},
              ),
            ],
          ),
        ],
        code: '''
// While a Tooltip component exists, for menus it's best to apply
// tooltip classes directly to the MenuItem to preserve the required
// ul > li > a HTML structure for correct styling.
Menu(
  style: [BgUtil.base200, Effects.roundedBox],
  [
    MenuItem(
      [Icon('home')],
      classes: 'tooltip tooltip-right',
      attributes: {'data-tip': 'Home'},
    ),
    MenuItem(
      [Icon('info')],
      classes: 'tooltip tooltip-right',
      attributes: {'data-tip': 'Details'},
    ),
    MenuItem(
      [Icon('analytics')],
      classes: 'tooltip tooltip-right',
      attributes: {'data-tip': 'Stats'},
    ),
  ],
)''',
      ),

      // ~Menu with icon only (horizontal) with tooltip
      ComponentPreview(
        title: 'Menu with icon only (horizontal) with tooltip',
        preview: [
          Menu(
            style: [Menu.horizontal, BgUtil.base200, Effects.roundedBox, Spacing.mt(6)],
            [
              MenuItem(
                [_homeIcon()],
                classes: 'tooltip',
                attributes: {'data-tip': 'Home'},
              ),
              MenuItem(
                [_detailsIcon()],
                classes: 'tooltip',
                attributes: {'data-tip': 'Details'},
              ),
              MenuItem(
                [_statsIcon()],
                classes: 'tooltip',
                attributes: {'data-tip': 'Stats'},
              ),
            ],
          ),
        ],
        code: '''
Menu(
  style: [Menu.horizontal, BgUtil.base200, Effects.roundedBox],
  [
    MenuItem(
      [Icon('home')],
      classes: 'tooltip',
      attributes: {'data-tip': 'Home'},
    ),
    MenuItem(
      [Icon('info')],
      classes: 'tooltip',
      attributes: {'data-tip': 'Details'},
    ),
    MenuItem(
      [Icon('analytics')],
      classes: 'tooltip',
      attributes: {'data-tip': 'Stats'},
    ),
  ],
)''',
      ),

      // ~Menu sizes
      ComponentPreview(
        title: 'Menu sizes',
        preview: [
          Container(
            [
              Menu(
                style: [Menu.xs, BgUtil.base200, Size.w56, Effects.roundedBox],
                [
                  MenuItem([text('Xsmall 1')]),
                  MenuItem([text('Xsmall 2')]),
                ],
              ),
              Menu(
                style: [Menu.sm, BgUtil.base200, Size.w56, Effects.roundedBox],
                [
                  MenuItem([text('Small 1')]),
                  MenuItem([text('Small 2')]),
                ],
              ),
              Menu(
                style: [Menu.md, BgUtil.base200, Size.w56, Effects.roundedBox],
                [
                  MenuItem([text('Medium 1')]),
                  MenuItem([text('Medium 2')]),
                ],
              ),
              Menu(
                style: [Menu.lg, BgUtil.base200, Size.w56, Effects.roundedBox],
                [
                  MenuItem([text('Large 1')]),
                  MenuItem([text('Large 2')]),
                ],
              ),
              Menu(
                style: [Menu.xl, BgUtil.base200, Size.w56, Effects.roundedBox],
                [
                  MenuItem([text('Xlarge 1')]),
                  MenuItem([text('Xlarge 2')]),
                ],
              ),
            ],
            style: [Layout.grid, Layout.gap(6)],
          ),
        ],
        code: '''
Menu(style: [Menu.xs, ...], [/* ... */]),
Menu(style: [Menu.sm, ...], [/* ... */]),
Menu(style: [Menu.md, ...], [/* ... */]), // Default
Menu(style: [Menu.lg, ...], [/* ... */]),
Menu(style: [Menu.xl, ...], [/* ... */]),''',
      ),

      // ~Menu with disabled items
      ComponentPreview(
        title: 'Menu with disabled items',
        preview: [
          Menu(
            style: [BgUtil.base200, Size.w56, Effects.roundedBox],
            [
              MenuItem([text('Enabled item')]),
              MenuItem([text('Disabled item')], isDisabled: true),
              MenuItem([text('Disabled item')], isDisabled: true),
            ],
          ),
        ],
        code: '''
Menu(
  style: [BgUtil.base200, Size.w56, Effects.roundedBox],
  [
    MenuItem([text('Enabled item')]),
    MenuItem([text('Disabled item')], isDisabled: true),
    MenuItem([text('Disabled item')], isDisabled: true),
  ],
)''',
      ),

      // ~Menu with icons and badge (responsive)
      ComponentPreview(
        title: 'Menu with icons and badge (responsive)',
        preview: [
          Menu(
            style: [Menu.horizontal.at(Breakpoint.lg), BgUtil.base200, Effects.roundedBox],
            [
              MenuItem([
                _homeIcon(),
                text('Inbox'),
                Badge([text('99+')], style: [Badge.sm]),
              ]),
              MenuItem([
                _detailsIcon(),
                text('Updates'),
                Badge([text('NEW')], style: [Badge.xs, Badge.warning]),
              ]),
              MenuItem([
                text('Stats'),
                const Badge([], style: [Badge.xs, Badge.info]),
              ]),
            ],
          ),
        ],
        code: '''
Menu(
  style: [Menu.horizontal.at(Breakpoint.lg), BgUtil.base200, Effects.roundedBox],
  [
    MenuItem([Icon('home'), text('Inbox'), Badge([text('99+')], style: [Badge.sm])]),
    MenuItem([Icon('info'), text('Updates'), Badge([text('NEW')], style: [Badge.xs, Badge.warning])]),
    MenuItem([text('Stats'), Badge([], style: [Badge.xs, Badge.info])]),
  ],
)''',
      ),

      // ~Menu without padding and border radius
      ComponentPreview(
        title: 'Menu without padding and border radius',
        preview: [
          Menu(
            style: [BgUtil.base200, Size.w56],
            classes: '[&_li>*]:rounded-none p-0',
            [
              MenuItem([text('Item 1')]),
              MenuItem([text('Item 2')]),
              MenuItem([text('Item 3')]),
            ],
          ),
        ],
        code: '''
// Use `classes` for complex Tailwind selectors not covered by deepyr utilities.
Menu(
  style: [BgUtil.base200, Size.w56],
  classes: '[&_li>*]:rounded-none p-0',
  [
    MenuItem([text('Item 1')]),
    MenuItem([text('Item 2')]),
    MenuItem([text('Item 3')]),
  ],
)''',
      ),

      // ~Menu with title
      ComponentPreview(
        title: 'Menu with title',
        preview: [
          Menu(
            style: [BgUtil.base200, Size.w56, Effects.roundedBox],
            [
              MenuTitle([text('Title')]),
              MenuItem([text('Item 1')]),
              MenuItem([text('Item 2')]),
              MenuItem([text('Item 3')]),
            ],
          ),
        ],
        code: '''
Menu(
  style: [BgUtil.base200, Size.w56, Effects.roundedBox],
  [
    MenuTitle([text('Title')]),
    MenuItem([text('Item 1')]),
    MenuItem([text('Item 2')]),
    MenuItem([text('Item 3')]),
  ],
)''',
      ),

      // ~Menu with title as a parent
      ComponentPreview(
        title: 'Menu with title as a parent',
        preview: [
          Menu(
            style: [BgUtil.base200, Size.w56, Effects.roundedBox],
            [
              li([
                MenuTitle([text('Title')]),
                ul([
                  MenuItem([text('Item 1')]),
                  MenuItem([text('Item 2')]),
                  MenuItem([text('Item 3')]),
                ]),
              ]),
            ],
          ),
        ],
        code: '''
Menu(
  style: [BgUtil.base200, Size.w56, Effects.roundedBox],
  [
    li([
      MenuTitle([text('Title')]),
      ul([
        MenuItem([text('Item 1')]),
        MenuItem([text('Item 2')]),
        MenuItem([text('Item 3')]),
      ])
    ])
  ],
)''',
      ),

      // ~Submenu
      ComponentPreview(
        title: 'Submenu',
        description: 'This is a hoverable submenu, suitable for horizontal menus.',
        preview: [
          Menu(
            style: [BgUtil.base200, Size.w56, Effects.roundedBox],
            [
              MenuItem([text('Item 1')]),
              MenuHoverSubmenu(
                label: text('Parent'),
                children: [
                  MenuItem([text('Submenu 1')]),
                  MenuItem([text('Submenu 2')]),
                  MenuHoverSubmenu(
                    label: text('Parent'),
                    children: [
                      MenuItem([text('Submenu 1')]),
                      MenuItem([text('Submenu 2')]),
                    ],
                  ),
                ],
              ),
              MenuItem([text('Item 3')]),
            ],
          ),
        ],
        code: '''
Menu(
  style: [BgUtil.base200, Size.w56, Effects.roundedBox],
  [
    MenuItem([text('Item 1')]),
    MenuHoverSubmenu(
      label: text('Parent'),
      children: [
        MenuItem([text('Submenu 1')]),
        MenuItem([text('Submenu 2')]),
        MenuHoverSubmenu(
          label: text('Parent'),
          children: [
            MenuItem([text('Submenu 1')]),
            MenuItem([text('Submenu 2')]),
          ],
        ),
      ],
    ),
    MenuItem([text('Item 3')]),
  ],
)''',
      ),

      // ~Collapsible submenu
      ComponentPreview(
        title: 'Collapsible submenu',
        description:
            'Uses the MenuSubmenu component which renders accessible <details> and <summary> tags.',
        preview: [
          Menu(
            style: [BgUtil.base200, Size.w56, Effects.roundedBox],
            [
              MenuItem([text('Item 1')]),
              MenuSubmenu(
                initiallyOpen: true,
                label: text('Parent'),
                children: [
                  MenuItem([text('Submenu 1')]),
                  MenuItem([text('Submenu 2')]),
                  MenuSubmenu(
                    initiallyOpen: true,
                    label: text('Parent'),
                    children: [
                      MenuItem([text('Submenu 1')]),
                      MenuItem([text('Submenu 2')]),
                    ],
                  ),
                ],
              ),
              MenuItem([text('Item 3')]),
            ],
          ),
        ],
        code: '''
Menu(
  style: [BgUtil.base200, Size.w56, Effects.roundedBox],
  [
    MenuItem([text('Item 1')]),
    MenuSubmenu(
      initiallyOpen: true,
      label: text('Parent'),
      children: [
        MenuItem([text('Submenu 1')]),
        MenuItem([text('Submenu 2')]),
        MenuSubmenu(
          initiallyOpen: true,
          label: text('Parent'),
          children: [
            MenuItem([text('Submenu 1')]),
            MenuItem([text('Submenu 2')]),
          ],
        ),
      ],
    ),
    MenuItem([text('Item 3')]),
  ],
)''',
      ),

      // ~Collapsible submenu that works with class names
      const ComponentPreview(
        title: 'Collapsible submenu controlled by state',
        description: 'You can open/close the submenu by managing a state variable.',
        preview: [
          _JsControlledSubmenu(),
        ],
        code: '''
class JsControlledSubmenu extends StatefulComponent {
  bool _isOpen = false;

  @override
  State<StatefulComponent> createState() => _JsControlledSubmenuState();
}

class _JsControlledSubmenuState extends State<JsControlledSubmenu> {
  @override
  Component build(BuildContext context) {
    return Menu(
      style: [BgUtil.base200, Size.w56, Effects.roundedBox],
      [
        MenuItem([text('Item 1')]),
        li([
          MenuDropdownToggle(
            [text('Parent')],
            onClick: (_) => setState(() => _isOpen = !_isOpen),
          ),
          MenuDropdownContent(
            [
              MenuItem([text('Submenu 1')]),
              MenuItem([text('Submenu 2')]),
            ],
            // Conditionally add the 'menu-dropdown-show' class
            classes: _isOpen ? 'menu-dropdown-show' : '',
          ),
        ]),
      ],
    );
  }
}''',
      ),

      // ~File tree
      ComponentPreview(
        title: 'File tree',
        preview: [
          Menu(
            style: [Menu.xs, BgUtil.base200, Effects.roundedBox, Size.wFull, Size.maxWxs],
            [
              MenuItem([_fileTreeFileIcon(), text('resume.pdf')]),
              MenuSubmenu(
                label: Component.element(
                  tag: 'span',
                  children: [_fileTreeFolderIcon(), text('My Files')],
                ),
                initiallyOpen: true,
                children: [
                  MenuItem([_fileTreeFileIcon(), text('Project-final.psd')]),
                  MenuItem([_fileTreeFileIcon(), text('Project-final-2.psd')]),
                  MenuSubmenu(
                    label: Component.element(
                      tag: 'span',
                      children: [_fileTreeFolderIcon(), text('Images')],
                    ),
                    initiallyOpen: true,
                    children: [
                      MenuItem([_fileTreeImageIcon(), text('Screenshot1.png')]),
                      MenuItem([_fileTreeImageIcon(), text('Screenshot2.png')]),
                      MenuSubmenu(
                        label: Component.element(
                          tag: 'span',
                          children: [_fileTreeFolderIcon(), text('Others')],
                        ),
                        initiallyOpen: true,
                        children: [
                          MenuItem([_fileTreeImageIcon(), text('Screenshot3.png')]),
                        ],
                      ),
                    ],
                  ),
                ],
              ),
              MenuItem([_fileTreeFileIcon(), text('reports-final-2.pdf')]),
            ],
          ),
        ],
        code: '''
// For pixel-perfect replication, raw SVG helpers are used for this example.
Component _fileTreeFileIcon() => svg(/* ... */);
Component _fileTreeFolderIcon() => svg(/* ... */);
Component _fileTreeImageIcon() => svg(/* ... */);

Menu(
  style: [Menu.xs, BgUtil.base200, Effects.roundedBox, Size.wFull, Size.maxWxs],
  [
    MenuItem([_fileTreeFileIcon(), text('resume.pdf')]),
    MenuSubmenu(
      label: Component.element(tag: 'span', children: [_fileTreeFolderIcon(), text('My Files')]),
      initiallyOpen: true,
      children: [
        MenuItem([_fileTreeFileIcon(), text('Project-final.psd')]),
        // ... more items and nested submenus
      ],
    ),
    MenuItem([_fileTreeFileIcon(), text('reports-final-2.pdf')]),
  ],
)''',
      ),

      // ~Menu with active item
      ComponentPreview(
        title: 'Menu with active item',
        preview: [
          Menu(
            style: [BgUtil.base200, Size.w56, Effects.roundedBox],
            [
              MenuItem([text('Item 1')]),
              MenuItem([text('Item 2')], isActive: true),
              MenuItem([text('Item 3')]),
            ],
          ),
        ],
        code: '''
Menu(
  style: [BgUtil.base200, Size.w56, Effects.roundedBox],
  [
    MenuItem([text('Item 1')]),
    MenuItem([text('Item 2')], isActive: true),
    MenuItem([text('Item 3')]),
  ],
)''',
      ),

      // ~Horizontal menu
      ComponentPreview(
        title: 'Horizontal menu',
        preview: [
          Menu(
            style: [Menu.horizontal, BgUtil.base200, Effects.roundedBox],
            [
              MenuItem([text('Item 1')]),
              MenuItem([text('Item 2')]),
              MenuItem([text('Item 3')]),
            ],
          ),
        ],
        code: '''
Menu(
  style: [Menu.horizontal, BgUtil.base200, Effects.roundedBox],
  [
    MenuItem([text('Item 1')]),
    MenuItem([text('Item 2')]),
    MenuItem([text('Item 3')]),
  ],
)''',
      ),

      // ~Horizontal submenu
      ComponentPreview(
        title: 'Horizontal submenu',
        preview: [
          Menu(
            style: [Menu.horizontal, BgUtil.base200, Effects.roundedBox],
            [
              MenuItem([text('Item 1')]),
              MenuHoverSubmenu(
                label: text('Parent'),
                children: [
                  MenuItem([text('Submenu 1')]),
                  MenuItem([text('Submenu 2')]),
                ],
              ),
              MenuItem([text('Item 3')]),
            ],
          ),
        ],
        code: '''
Menu(
  style: [Menu.horizontal, BgUtil.base200, Effects.roundedBox],
  [
    MenuItem([text('Item 1')]),
    MenuHoverSubmenu(
      label: text('Parent'),
      children: [
        MenuItem([text('Submenu 1')]),
        MenuItem([text('Submenu 2')]),
      ],
    ),
    MenuItem([text('Item 3')]),
  ],
)''',
      ),

      // ~Mega menu with submenu (responsive)
      ComponentPreview(
        title: 'Mega menu with submenu (responsive)',
        preview: [
          Menu(
            style: [
              Menu.horizontal.at(Breakpoint.xl),
              BgUtil.base200,
              Effects.roundedBox,
              Size.minWMax.at(Breakpoint.lg),
            ],
            [
              MenuHoverSubmenu(
                label: text('Solutions'),
                children: [
                  MenuItem([text('Design')]),
                  MenuItem([text('Development')]),
                  MenuItem([text('Hosting')]),
                  MenuItem([text('Domain register')]),
                ],
              ),
              MenuHoverSubmenu(
                label: text('Enterprise'),
                children: [
                  MenuItem([text('CRM software')]),
                  MenuItem([text('Marketing management')]),
                  MenuItem([text('Security')]),
                  MenuItem([text('Consulting')]),
                ],
              ),
              MenuHoverSubmenu(
                label: text('Products'),
                children: [
                  MenuItem([text('UI Kit')]),
                  MenuItem([text('WordPress themes')]),
                  MenuItem([text('WordPress plugins')]),
                  MenuHoverSubmenu(
                    label: text('Open source'),
                    children: [
                      MenuItem([text('Auth management system')]),
                      MenuItem([text('VScode theme')]),
                      MenuItem([text('Color picker app')]),
                    ],
                  ),
                ],
              ),
              MenuHoverSubmenu(
                label: text('Company'),
                children: [
                  MenuItem([text('About us')]),
                  MenuItem([text('Contact us')]),
                  MenuItem([text('Privacy policy')]),
                  MenuItem([text('Press kit')]),
                ],
              ),
            ],
          ),
        ],
        code: '''
Menu(
  style: [
    Menu.horizontal.at(Breakpoint.xl),
    BgUtil.base200,
    Effects.roundedBox,
    Size.minWMax.at(Breakpoint.lg),
  ],
  [
    MenuHoverSubmenu(label: text('Solutions'), children: [ /* ... */ ]),
    MenuHoverSubmenu(label: text('Enterprise'), children: [ /* ... */ ]),
    MenuHoverSubmenu(label: text('Products'), children: [
      MenuItem([text('UI Kit')]),
      // ... more items
      MenuHoverSubmenu(label: text('Open source'), children: [ /* ... nested items */ ])
    ]),
    MenuHoverSubmenu(label: text('Company'), children: [ /* ... */ ]),
  ],
)''',
      ),

      // ~Collapsible with submenu (responsive)
      ComponentPreview(
        title: 'Collapsible with submenu (responsive)',
        preview: [
          Menu(
            style: [Menu.horizontal.at(Breakpoint.lg), BgUtil.base200, Effects.roundedBox],
            classes: 'lg:mb-64', // Add margin for visibility
            [
              MenuItem([text('Item 1')]),
              MenuSubmenu(
                label: text('Parent item'),
                initiallyOpen: true,
                children: [
                  MenuItem([text('Submenu 1')]),
                  MenuItem([text('Submenu 2')]),
                  MenuSubmenu(
                    label: text('Parent'),
                    initiallyOpen: true,
                    children: [
                      MenuItem([text('item 1')]),
                      MenuItem([text('item 2')]),
                    ],
                  ),
                ],
              ),
              MenuItem([text('Item 3')]),
            ],
          ),
        ],
        code: '''
Menu(
  style: [Menu.horizontal.at(Breakpoint.lg), BgUtil.base200, Effects.roundedBox],
  classes: 'lg:mb-64', // Margin for visibility in preview
  [
    MenuItem([text('Item 1')]),
    MenuSubmenu(
      label: text('Parent item'),
      initiallyOpen: true,
      children: [
        MenuItem([text('Submenu 1')]),
        MenuItem([text('Submenu 2')]),
        MenuSubmenu(
          label: text('Parent'),
          initiallyOpen: true,
          children: [
            MenuItem([text('item 1')]),
            MenuItem([text('item 2')]),
          ]
        )
      ]
    ),
    MenuItem([text('Item 3')]),
  ]
)''',
      ),
    ]);
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/menu_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/modal_preview.dart -->
import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart';
import 'package:universal_web/web.dart';

import '../../components/component_preview.dart';

// Helper function for modal close
void closeModal(String modalId) {
  if (kIsWeb) {
    final dialog = document.getElementById(modalId) as HTMLElement?;
    if (dialog != null) {
      (dialog as dynamic).close();
    }
  }
}

class ModalPreview extends StatelessComponent {
  const ModalPreview({super.key});

  @override
  Component build(BuildContext context) {
    return div(classes: 'max-w-5xl mx-auto px-4 space-y-10', [
      // Title
      h1(classes: 'text-4xl font-bold mb-6', [text('Modal')]),
      p(classes: 'text-lg mb-8', [
        text('Modal is used to show a dialog or a box when you click a button.')
      ]),

      // Method 1: HTML dialog element (recommended)
      h2(
          classes: 'text-3xl font-bold mt-12 mb-6',
          [text('Method 1: HTML dialog element (recommended)')]),
      p(classes: 'mb-6', [
        text(
            'HTML dialog element is a native way to create modals. It is accessible and we can close the modal using Esc key.')
      ]),

      // Basic dialog modal
      ComponentPreview(
        title: 'Dialog modal',
        description:
            'Opens on click using ID.showModal() method. Can be closed using ID.close() method',
        preview: [
          Button(
            [text('open modal')],
            onClick: (_) {
              if (kIsWeb) {
                final dialog =
                    document.getElementById('my_modal_1') as HTMLElement?;
                if (dialog != null) {
                  (dialog as dynamic).showModal();
                }
              }
            },
          ),
          Modal(
            [
              ModalBox([
                h3(classes: 'font-bold text-lg', [text('Hello!')]),
                p(
                    classes: 'py-4',
                    [text('Press ESC key or click the button below to close')]),
                ModalAction([
                  form(attributes: {
                    'method': 'dialog'
                  }, [
                    Button(
                      [text('Close')],
                      htmlType: ButtonHtmlType.submit,
                      attributes: {'type': 'submit'},
                      onClick: (_) => closeModal('modal_bottom'), // Fallback
                    ),
                  ]),
                ]),
              ]),
            ],
            tag: 'dialog',
            id: 'my_modal_1',
          ),
        ],
        code: '''
// Trigger Button
Button(
  [text('open modal')],
  onClick: (_) {
    if (kIsWeb) {
      final dialog = document.getElementById('my_modal_1') as HtmlElement?;
      if (dialog != null) {
        (dialog as dynamic).showModal();
      }
    }
  },
),

// Modal
Modal(
  [
    ModalBox([
      h3(classes: 'font-bold text-lg', [text('Hello!')]),
      p(classes: 'py-4', [text('Press ESC key or click the button below to close')]),
      ModalAction([
        form(attributes: {'method': 'dialog'}, [
          Button([text('Close')], htmlType: ButtonHtmlType.submit),
        ]),
      ]),
    ]),
  ],
  tag: 'dialog',
  id: 'my_modal_1',
)
''',
      ),

      // Dialog modal that closes when clicked outside
      ComponentPreview(
        title: 'Dialog modal, closes when clicked outside',
        description:
            "There is a second form with 'modal-backdrop' class and it covers the screen so we can close the modal when clicked outside",
        preview: [
          Button(
            [text('open modal')],
            onClick: (_) {
              if (kIsWeb) {
                final dialog =
                    document.getElementById('my_modal_2') as HTMLElement?;
                if (dialog != null) {
                  (dialog as dynamic).showModal();
                }
              }
            },
          ),
          Modal(
            [
              ModalBox([
                h3(classes: 'font-bold text-lg', [text('Hello!')]),
                p(
                    classes: 'py-4',
                    [text('Press ESC key or click outside to close')]),
              ]),
              form(classes: 'modal-backdrop', attributes: {
                'method': 'dialog'
              }, [
                button([text('close')]),
              ]),
            ],
            tag: 'dialog',
            id: 'my_modal_2',
          ),
        ],
        code: '''
// Trigger Button
Button(
  [text('open modal')],
  onClick: (_) {
    if (kIsWeb) {
      final dialog = document.getElementById('my_modal_2') as HtmlElement?;
      if (dialog != null) {
        (dialog as dynamic).showModal();
      }
    }
  },
),

// Modal
Modal(
  [
    ModalBox([
      h3(classes: 'font-bold text-lg', [text('Hello!')]),
      p(classes: 'py-4', [text('Press ESC key or click outside to close')]),
    ]),
    form(classes: 'modal-backdrop', attributes: {'method': 'dialog'}, [
      button([text('close')]),
    ]),
  ],
  tag: 'dialog',
  id: 'my_modal_2',
)
''',
      ),

      // Dialog modal with close button at corner
      ComponentPreview(
        title: 'Dialog modal with a close button at corner',
        preview: [
          Button(
            [text('open modal')],
            onClick: (_) {
              if (kIsWeb) {
                final dialog =
                    document.getElementById('my_modal_3') as HTMLElement?;
                if (dialog != null) {
                  (dialog as dynamic).showModal();
                }
              }
            },
          ),
          Modal(
            [
              ModalBox([
                form(attributes: {
                  'method': 'dialog'
                }, [
                  Button(
                    [Icon('close')],
                    htmlType:
                        ButtonHtmlType.submit, // Required for dialog close
                    style: [
                      Button.sm,
                      Button.circle,
                      Button.ghost,
                    ],
                    classes:
                        'absolute right-2 top-2', // Use classes until Position is exported
                  ),
                ]),
                h3(classes: 'font-bold text-lg', [text('Hello!')]),
                p(
                    classes: 'py-4',
                    [text('Press ESC key or click on ✕ button to close')]),
              ]),
            ],
            tag: 'dialog',
            id: 'my_modal_3',
          ),
        ],
        code: '''
// Trigger Button
Button(
  [text('open modal')],
  onClick: (_) {
    if (kIsWeb) {
      final dialog = document.getElementById('my_modal_3') as HtmlElement?;
      if (dialog != null) {
        (dialog as dynamic).showModal();
      }
    }
  },
),

// Modal
Modal(
  [
    ModalBox([
      form(attributes: {'method': 'dialog'}, [
        Button(
          [Icon('close')],
          htmlType: ButtonHtmlType.submit, // Required for dialog close
          style: [
            Button.sm,
            Button.circle,
            Button.ghost,
          ],
          classes: 'absolute right-2 top-2', // Use classes until Position is exported
        ),
      ]),
      h3(classes: 'font-bold text-lg', [text('Hello!')]),
      p(classes: 'py-4', [text('Press ESC key or click on ✕ button to close')]),
    ]),
  ],
  tag: 'dialog',
  id: 'my_modal_3',
)
''',
      ),

      // Dialog modal with custom width
      ComponentPreview(
        title: 'Dialog modal with custom width',
        description:
            'You can use any w-* and max-w-* utility class to customize the width',
        preview: [
          Button(
            [text('open modal')],
            onClick: (_) {
              if (kIsWeb) {
                final dialog =
                    document.getElementById('my_modal_4') as HTMLElement?;
                if (dialog != null) {
                  (dialog as dynamic).showModal();
                }
              }
            },
          ),
          Modal(
            [
              ModalBox([
                h3(classes: 'font-bold text-lg', [text('Hello!')]),
                p(classes: 'py-4', [text('Click the button below to close')]),
                ModalAction([
                  form(attributes: {
                    'method': 'dialog'
                  }, [
                    Button(
                      [text('Close')],
                      htmlType: ButtonHtmlType.submit,
                      attributes: {'type': 'submit'},
                      onClick: (_) => closeModal('modal_start'), // Fallback
                    ),
                  ]),
                ]),
              ], style: [
                Size.w11_12,
                Size.maxW5xl
              ]),
            ],
            tag: 'dialog',
            id: 'my_modal_4',
          ),
        ],
        code: '''
// Trigger Button
Button(
  [text('open modal')],
  onClick: (_) {
    if (kIsWeb) {
      final dialog = document.getElementById('my_modal_4') as HtmlElement?;
      if (dialog != null) {
        (dialog as dynamic).showModal();
      }
    }
  },
),

// Modal with custom width
Modal(
  [
    ModalBox([
      h3(classes: 'font-bold text-lg', [text('Hello!')]),
      p(classes: 'py-4', [text('Click the button below to close')]),
      ModalAction([
        form(attributes: {'method': 'dialog'}, [
          Button([text('Close')], htmlType: ButtonHtmlType.submit),
        ]),
      ]),
    ], style: [Size.w11_12, Size.maxW5xl]), // Custom width
  ],
  tag: 'dialog',
  id: 'my_modal_4',
)
''',
      ),

      // Responsive modal
      ComponentPreview(
        title: 'Responsive',
        description:
            'Modal goes bottom on SM screen size, goes middle on MD screen size',
        preview: [
          Button(
            [text('open modal')],
            onClick: (_) {
              if (kIsWeb) {
                final dialog =
                    document.getElementById('my_modal_5') as HTMLElement?;
                if (dialog != null) {
                  (dialog as dynamic).showModal();
                }
              }
            },
          ),
          Modal(
            [
              ModalBox([
                h3(classes: 'font-bold text-lg', [text('Hello!')]),
                p(
                    classes: 'py-4',
                    [text('Press ESC key or click the button below to close')]),
                ModalAction([
                  form(attributes: {
                    'method': 'dialog'
                  }, [
                    Button(
                      [text('Close')],
                      htmlType: ButtonHtmlType.submit,
                      attributes: {'type': 'submit'},
                      onClick: (_) => closeModal('modal_end'), // Fallback
                    ),
                  ]),
                ]),
              ]),
            ],
            tag: 'dialog',
            id: 'my_modal_5',
            style: [
              Modal.bottom,
              Modal.middle.at(Breakpoint.sm),
            ],
          ),
        ],
        code: '''
// Trigger Button
Button(
  [text('open modal')],
  onClick: (_) {
    if (kIsWeb) {
      final dialog = document.getElementById('my_modal_5') as HtmlElement?;
      if (dialog != null) {
        (dialog as dynamic).showModal();
      }
    }
  },
),

// Responsive Modal
Modal(
  [
    ModalBox([
      h3(classes: 'font-bold text-lg', [text('Hello!')]),
      p(classes: 'py-4', [text('Press ESC key or click the button below to close')]),
      ModalAction([
        form(attributes: {'method': 'dialog'}, [
          Button([text('Close')], htmlType: ButtonHtmlType.submit),
        ]),
      ]),
    ]),
  ],
  tag: 'dialog',
  id: 'my_modal_5',
  style: [
    Modal.bottom,                    // Default: bottom on mobile
    Modal.middle.at(Breakpoint.sm),  // Middle on small screens and up
  ],
)
''',
      ),

      // Method 2: Checkbox (legacy)
      h2(
          classes: 'text-3xl font-bold mt-12 mb-6',
          [text('Method 2: Checkbox (legacy)')]),
      p(classes: 'mb-6', [
        text(
            'A hidden checkbox can control the state of modal and labels can toggle the checkbox so we can open/close the modal.')
      ]),

      // Modal using checkbox
      ComponentPreview(
        title: 'Modal using checkbox',
        preview: [
          label(
              classes: 'btn',
              attributes: {'for': 'my_modal_6'},
              [text('open modal')]),
          ModalToggle(id: 'my_modal_6'),
          Modal([
            ModalBox([
              h3(classes: 'text-lg font-bold', [text('Hello!')]),
              p(
                  classes: 'py-4',
                  [text('This modal works with a hidden checkbox!')]),
              ModalAction([
                label(
                    classes: 'btn',
                    attributes: {'for': 'my_modal_6'},
                    [text('Close!')]),
              ]),
            ]),
          ]),
        ],
        code: '''
// Trigger Label
label(classes: 'btn', attributes: {'for': 'my_modal_6'}, [text('open modal')]),

// Hidden Checkbox
ModalToggle(id: 'my_modal_6'),

// Modal
Modal([
  ModalBox([
    h3(classes: 'text-lg font-bold', [text('Hello!')]),
    p(classes: 'py-4', [text('This modal works with a hidden checkbox!')]),
    ModalAction([
      label(classes: 'btn', attributes: {'for': 'my_modal_6'}, [text('Close!')]),
    ]),
  ]),
])
''',
      ),

      // Modal that closes when clicked outside (checkbox method)
      ComponentPreview(
        title: 'Modal that closes when clicked outside',
        description:
            "Modal works with a hidden checkbox and labels can toggle the checkbox so we can use another label tag with 'modal-backdrop' class that covers the screen so we can close the modal when clicked outside",
        preview: [
          label(
              classes: 'btn',
              attributes: {'for': 'my_modal_7'},
              [text('open modal')]),
          ModalToggle(id: 'my_modal_7'),
          Modal([
            ModalBox([
              h3(classes: 'text-lg font-bold', [text('Hello!')]),
              p(
                  classes: 'py-4',
                  [text('This modal works with a hidden checkbox!')]),
            ]),
            ModalBackdrop([text('Close')], htmlFor: 'my_modal_7'),
          ]),
        ],
        code: '''
// Trigger Label
label(classes: 'btn', attributes: {'for': 'my_modal_7'}, [text('open modal')]),

// Hidden Checkbox
ModalToggle(id: 'my_modal_7'),

// Modal
Modal([
  ModalBox([
    h3(classes: 'text-lg font-bold', [text('Hello!')]),
    p(classes: 'py-4', [text('This modal works with a hidden checkbox!')]),
  ]),
  ModalBackdrop([text('Close')], htmlFor: 'my_modal_7'),
])
''',
      ),

      // Method 3: Anchor links (legacy)
      h2(
          classes: 'text-3xl font-bold mt-12 mb-6',
          [text('Method 3: Using anchor links (legacy)')]),
      p(classes: 'mb-6', [
        text(
            'A link adds a parameter to the URL and you only see the modal when the URL has that parameter. When modal is closed, the page will scroll to the top because of the anchor link. Anchor links might not work well on some SPA frameworks.')
      ]),

      // Modal using anchor link
      ComponentPreview(
        title: 'Modal using anchor link',
        preview: [
          a(href: '#my_modal_8', classes: 'btn', [text('open modal')]),
          Modal([
            ModalBox([
              h3(classes: 'text-lg font-bold', [text('Hello!')]),
              p(classes: 'py-4', [text('This modal works with anchor links')]),
              ModalAction([
                a(href: '#', classes: 'btn', [text('Yay!')]),
              ]),
            ]),
          ], id: 'my_modal_8'),
        ],
        code: '''
// Trigger Link
a(href: '#my_modal_8', classes: 'btn', [text('open modal')]),

// Modal
Modal([
  ModalBox([
    h3(classes: 'text-lg font-bold', [text('Hello!')]),
    p(classes: 'py-4', [text('This modal works with anchor links')]),
    ModalAction([
      a(href: '#', classes: 'btn', [text('Yay!')]),
    ]),
  ]),
], id: 'my_modal_8')
''',
      ),

      // Modal Placement Examples
      h2(classes: 'text-3xl font-bold mt-12 mb-6', [text('Modal Placement')]),

      // Modal Top
      ComponentPreview(
        title: 'Modal Top',
        preview: [
          Button(
            [text('open modal')],
            onClick: (_) {
              if (kIsWeb) {
                final dialog =
                    document.getElementById('modal_top') as HTMLElement?;
                if (dialog != null) {
                  (dialog as dynamic).showModal();
                }
              }
            },
          ),
          Modal(
            [
              ModalBox([
                h3(classes: 'font-bold text-lg', [text('Modal at top')]),
                p(classes: 'py-4', [
                  text('This modal is positioned at the top of the screen.')
                ]),
                ModalAction([
                  form(attributes: {
                    'method': 'dialog'
                  }, [
                    Button(
                      [text('Close')],
                      htmlType: ButtonHtmlType.submit,
                      attributes: {'type': 'submit'},
                      onClick: (_) =>
                          closeModal('modal_top'), // Fallback for consistency
                    ),
                  ]),
                ]),
              ]),
            ],
            tag: 'dialog',
            id: 'modal_top',
            style: [Modal.top],
          ),
        ],
        code: '''
Modal(
  [
    ModalBox([
      h3(classes: 'font-bold text-lg', [text('Modal at top')]),
      p(classes: 'py-4', [text('This modal is positioned at the top of the screen.')]),
      ModalAction([
        form(attributes: {'method': 'dialog'}, [
          Button([text('Close')],
            htmlType: ButtonHtmlType.submit,
            attributes: {'type': 'submit'},
            onClick: (_) => closeModal('modal_top'), // Fallback for consistency
          ),
        ]),
      ]),
    ]),
  ],
  tag: 'dialog',
  id: 'modal_top',
  style: [Modal.top],
)
''',
      ),

      // Modal Bottom
      ComponentPreview(
        title: 'Modal Bottom',
        preview: [
          Button(
            [text('open modal')],
            onClick: (_) {
              if (kIsWeb) {
                final dialog =
                    document.getElementById('modal_bottom') as HTMLElement?;
                if (dialog != null) {
                  (dialog as dynamic).showModal();
                }
              }
            },
          ),
          Modal(
            [
              ModalBox([
                h3(classes: 'font-bold text-lg', [text('Modal at bottom')]),
                p(classes: 'py-4', [
                  text('This modal is positioned at the bottom of the screen.')
                ]),
                ModalAction([
                  form(attributes: {
                    'method': 'dialog'
                  }, [
                    Button([text('Close')]),
                  ]),
                ]),
              ]),
            ],
            tag: 'dialog',
            id: 'modal_bottom',
            style: [Modal.bottom],
          ),
        ],
        code: '''
// Helper function for reliable modal closing
void closeModal(String modalId) {
  if (kIsWeb) {
    final dialog = document.getElementById(modalId) as HtmlElement?;
    if (dialog != null) {
      (dialog as dynamic).close();
    }
  }
}

Modal(
  [
    ModalBox([
      h3(classes: 'font-bold text-lg', [text('Modal at bottom')]),
      p(classes: 'py-4', [text('This modal is positioned at the bottom of the screen.')]),
      ModalAction([
        form(attributes: {'method': 'dialog'}, [
          Button([text('Close')],
            htmlType: ButtonHtmlType.submit,
            attributes: {'type': 'submit'},
            onClick: (_) => closeModal('modal_bottom'), // Fallback for positioning issues
          ),
        ]),
      ]),
    ]),
  ],
  tag: 'dialog',
  id: 'modal_bottom',
  style: [Modal.bottom],
)
''',
      ),

      // Modal Start
      ComponentPreview(
        title: 'Modal Start',
        preview: [
          Button(
            [text('open modal')],
            onClick: (_) {
              if (kIsWeb) {
                final dialog =
                    document.getElementById('modal_start') as HTMLElement?;
                if (dialog != null) {
                  (dialog as dynamic).showModal();
                }
              }
            },
          ),
          Modal(
            [
              ModalBox([
                h3(classes: 'font-bold text-lg', [text('Modal at start')]),
                p(classes: 'py-4', [
                  text('This modal is positioned at the start horizontally.')
                ]),
                ModalAction([
                  form(attributes: {
                    'method': 'dialog'
                  }, [
                    Button([text('Close')]),
                  ]),
                ]),
              ]),
            ],
            tag: 'dialog',
            id: 'modal_start',
            style: [Modal.start],
          ),
        ],
        code: '''
Modal(
  [
    ModalBox([
      h3(classes: 'font-bold text-lg', [text('Modal at start')]),
      p(classes: 'py-4', [text('This modal is positioned at the start horizontally.')]),
      ModalAction([
        form(attributes: {'method': 'dialog'}, [
          Button([text('Close')],
            htmlType: ButtonHtmlType.submit,
            attributes: {'type': 'submit'},
            onClick: (_) => closeModal('modal_start'), // Fallback for positioning issues
          ),
        ]),
      ]),
    ]),
  ],
  tag: 'dialog',
  id: 'modal_start',
  style: [Modal.start],
)
''',
      ),

      // Modal End
      ComponentPreview(
        title: 'Modal End',
        preview: [
          Button(
            [text('open modal')],
            onClick: (_) {
              if (kIsWeb) {
                final dialog =
                    document.getElementById('modal_end') as HTMLElement?;
                if (dialog != null) {
                  (dialog as dynamic).showModal();
                }
              }
            },
          ),
          Modal(
            [
              ModalBox([
                h3(classes: 'font-bold text-lg', [text('Modal at end')]),
                p(classes: 'py-4', [
                  text('This modal is positioned at the end horizontally.')
                ]),
                ModalAction([
                  form(attributes: {
                    'method': 'dialog'
                  }, [
                    Button([text('Close')]),
                  ]),
                ]),
              ]),
            ],
            tag: 'dialog',
            id: 'modal_end',
            style: [Modal.end],
          ),
        ],
        code: '''
Modal(
  [
    ModalBox([
      h3(classes: 'font-bold text-lg', [text('Modal at end')]),
      p(classes: 'py-4', [text('This modal is positioned at the end horizontally.')]),
      ModalAction([
        form(attributes: {'method': 'dialog'}, [
          Button([text('Close')],
            htmlType: ButtonHtmlType.submit,
            attributes: {'type': 'submit'},
            onClick: (_) => closeModal('modal_end'), // Fallback for positioning issues
          ),
        ]),
      ]),
    ]),
  ],
  tag: 'dialog',
  id: 'modal_end',
  style: [Modal.end],
)
''',
      ),
    ]);
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/modal_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/navbar_preview.dart -->
import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart' hide Spacing;

import '../../components/component_preview.dart';

/// Renders a collection of [ComponentPreview] widgets to demonstrate the
/// functionality and styling of the `deepyr` [Navbar] component and its
/// sub-components (`NavbarStart`, `NavbarCenter`, `NavbarEnd`).
///
/// This preview faithfully recreates all the examples from the official
/// DaisyUI documentation using the type-safe and compositional approach
/// of the Deepyr library, preferring the `Icon` component over raw SVGs.
class NavbarPreview extends StatelessComponent {
  const NavbarPreview({super.key});

  @override
  Component build(BuildContext context) {
    return div(classes: 'max-w-6xl mx-auto px-4 space-y-12', [
      // ~Navbar with title only
      ComponentPreview(
        title: 'Navbar with title only',
        preview: [
          Navbar(
            style: [BgUtil.base100, Effects.shadowSm],
            ariaLabel: 'Navbar with title',
            [
              NavbarStart([
                Button(
                  [text('daisyUI')],
                  style: [Button.ghost, TextUtil.xl],
                ),
              ]),
            ],
          ),
        ],
        code: '''
Navbar(
  style: [BgUtil.base100, Effects.shadowSm],
  ariaLabel: 'Navbar with title',
  [
    NavbarStart([
      Button(
        [text('daisyUI')],
        style: [Button.ghost, TextUtil.xl],
      ),
    ]),
  ],
)''',
      ),

      // ~Navbar with title and icon
      ComponentPreview(
        title: 'Navbar with title and icon',
        preview: [
          Navbar(
            style: [BgUtil.base100, Effects.shadowSm],
            ariaLabel: 'Navbar with title and icon',
            [
              NavbarStart([
                Button(
                  [text('daisyUI')],
                  style: [Button.ghost, TextUtil.xl],
                ),
              ]),
              NavbarEnd([
                Button(
                  [
                    Icon('more_horiz', style: [Size.w5, Size.h5]),
                  ],
                  style: [Button.ghost, Button.square],
                ),
              ]),
            ],
          ),
        ],
        code: '''
Navbar(
  style: [BgUtil.base100, Effects.shadowSm],
  ariaLabel: 'Navbar with title and icon',
  [
    NavbarStart([
      Button([text('daisyUI')], style: [Button.ghost, TextUtil.xl]),
    ]),
    NavbarEnd([
      Button(
        [Icon('more_horiz', style: [Size.w5, Size.h5])],
        style: [Button.ghost, Button.square],
      ),
    ]),
  ],
)''',
      ),

      // ~Navbar with icon at start and end
      ComponentPreview(
        title: 'Navbar with icon at start and end',
        preview: [
          Navbar(
            style: [BgUtil.base100, Effects.shadowSm],
            ariaLabel: 'Navbar with icons at start and end',
            [
              NavbarStart([
                Button(
                  [
                    Icon('menu', style: [Size.w5, Size.h5]),
                  ],
                  style: [Button.ghost, Button.square],
                ),
              ]),
              NavbarCenter([
                Button(
                  [text('daisyUI')],
                  style: [Button.ghost, TextUtil.xl],
                ),
              ]),
              NavbarEnd([
                Button(
                  [
                    Icon('more_horiz', style: [Size.w5, Size.h5]),
                  ],
                  style: [Button.ghost, Button.square],
                ),
              ]),
            ],
          ),
        ],
        code: '''
Navbar(
  style: [BgUtil.base100, Effects.shadowSm],
  ariaLabel: 'Navbar with icons at start and end',
  [
    NavbarStart([
      Button(
        [Icon('menu', style: [Size.w5, Size.h5])],
        style: [Button.ghost, Button.square],
      ),
    ]),
    NavbarCenter([
      Button([text('daisyUI')], style: [Button.ghost, TextUtil.xl]),
    ]),
    NavbarEnd([
      Button(
        [Icon('more_horiz', style: [Size.w5, Size.h5])],
        style: [Button.ghost, Button.square],
      ),
    ]),
  ],
)''',
      ),

      // ~Navbar with menu and submenu
      ComponentPreview(
        title: 'Navbar with menu and submenu',
        preview: [
          Container(
            style: [Size.wFull, Spacing.mb(32)], // Added wFull to fix width
            [
              Navbar(
                style: [BgUtil.base100, Effects.shadowSm],
                ariaLabel: 'Navbar with menu and submenu',
                [
                  NavbarStart([
                    Button([text('daisyUI')], style: [Button.ghost, TextUtil.xl]),
                  ]),
                  NavbarEnd([
                    Menu(
                      style: [Menu.horizontal, Spacing.px(1)],
                      [
                        MenuItem([text('Link')]),
                        MenuSubmenu(
                          label: text('Parent'),
                          ulStyle: [Spacing.p(2), BgUtil.base100, Effects.roundedTNone],
                          children: [
                            MenuItem([text('Link 1')]),
                            MenuItem([text('Link 2')]),
                          ],
                        ),
                      ],
                    ),
                  ]),
                ],
              ),
            ],
          ),
        ],
        code: '''
import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart';

Container(
  style: [Size.wFull, Spacing.mb(32)],
  [
    Navbar(
      style: [BgUtil.base100, Effects.shadowSm],
      ariaLabel: 'Navbar with menu and submenu',
      [
        NavbarStart([
          Button([text('daisyUI')], style: [Button.ghost, TextUtil.xl]),
        ]),
        NavbarEnd([
          Menu(
            style: [Menu.horizontal, Spacing.px(1)],
            [
              MenuItem([text('Link')]),
              MenuSubmenu(
                label: text('Parent'),
                // The new ulStyle property allows type-safe styling of the submenu panel.
                ulStyle: [Spacing.p(2), BgUtil.base100, Effects.roundedTNone],
                children: [
                  MenuItem([text('Link 1')]),
                  MenuItem([text('Link 2')]),
                ],
              ),
            ],
          ),
        ]),
      ],
    ),
  ],
)''',
      ),

      // ~Navbar with search input and dropdown
      ComponentPreview(
        title: 'Navbar with search input and dropdown',
        preview: [
          Container(
            style: [Size.wFull, Spacing.mb(32)],
            [
              Navbar(
                style: [BgUtil.base100, Effects.shadowSm],
                ariaLabel: 'Navbar with search and user menu',
                [
                  NavbarStart([
                    Button([text('daisyUI')], style: [Button.ghost, TextUtil.xl]),
                  ]),
                  NavbarEnd([
                    Container(
                      style: [Layout.flex, Layout.gap(2)],
                      [
                        Input(
                          placeholder: 'Search',
                          style: [Input.bordered, Size.w(24), Size.wAuto.at(Breakpoint.md)],
                        ),
                        Dropdown(
                          method: DropdownMethod.focus,
                          style: [Dropdown.end],
                          trigger: Button(
                            [
                              Avatar([
                                Container(
                                  [
                                    img(
                                      src:
                                          'https://img.daisyui.com/images/stock/photo-1534528741775-53994a69daeb.webp',
                                    ),
                                  ],
                                  style: [Size.w10, Effects.roundedFull],
                                ),
                              ]),
                            ],
                            style: [Button.ghost, Button.circle],
                          ),
                          content: DropdownContent(
                            [
                              Menu(
                                [
                                  MenuItem(
                                    [
                                      text('Profile'),
                                      Badge([text('New')]),
                                    ],
                                    classes: 'justify-between',
                                  ),
                                  MenuItem([text('Settings')]),
                                  MenuItem([text('Logout')]),
                                ],
                                style: [Menu.sm, Size.w52],
                              ),
                            ],
                            tag: 'ul',
                            style: [
                              DropdownContent.menu,
                              Spacing.mt(3),
                              Spacing.p(2),
                              Effects.shadow,
                              BgUtil.base100,
                              Effects.roundedBox,
                              Layout.z(1),
                            ],
                          ),
                        ),
                      ],
                    ),
                  ]),
                ],
              ),
            ],
          ),
        ],
        code: '''
Navbar(
  style: [BgUtil.base100, Effects.shadowSm],
  ariaLabel: 'Navbar with search and user menu',
  [
    NavbarStart([
      Button([text('daisyUI')], style: [Button.ghost, TextUtil.xl]),
    ]),
    NavbarEnd([
      Container(
        style: [Layout.flex, Layout.gap(2)],
        [
          Input(
            placeholder: 'Search',
            style: [Input.bordered, Size.w(24), Size.wAuto.at(Breakpoint.md)],
          ),
          Dropdown(
            method: DropdownMethod.focus,
            style: [Dropdown.end],
            trigger: Button(
              [
                Avatar([
                  Container(
                    [img(src: '...')],
                    style: [Size.w10, Effects.roundedFull],
                  ),
                ]),
              ],
              style: [Button.ghost, Button.circle],
            ),
            content: DropdownContent(
              [
                Menu(
                  [
                    MenuItem(
                      [text('Profile'), Badge([text('New')])],
                      classes: 'justify-between',
                    ),
                    MenuItem([text('Settings')]),
                    MenuItem([text('Logout')]),
                  ],
                  style: [Menu.sm, Size.w52],
                ),
              ],
              tag: 'ul',
              style: [
                DropdownContent.menu, Spacing.mt(3), Spacing.p(2),
                Effects.shadow, BgUtil.base100, Effects.roundedBox, Layout.z(1)
              ],
            ),
          ),
        ],
      ),
    ]),
  ],
)''',
      ),

      // ~Navbar responsive
      ComponentPreview(
        title: 'Responsive: dropdown on small screen, center menu on large screen',
        description: 'Resize screen to see changes',
        preview: [
          Container(
            style: [Size.wFull, Spacing.mb(48)],
            [
              Navbar(
                style: [BgUtil.base100, Effects.shadowSm],
                ariaLabel: 'Responsive navbar with dropdown and horizontal menu',
                [
                  NavbarStart([
                    // Mobile Dropdown
                    Container(
                      style: [Layout.hidden.at(Breakpoint.lg)], // Hide on large screens
                      [
                        Dropdown(
                          method: DropdownMethod.focus,
                          trigger: Button(
                            [
                              Icon('menu', style: [Size.w5, Size.h5]),
                            ],
                            style: [Button.ghost],
                          ),
                          content: DropdownContent(
                            [
                              Menu(
                                [
                                  MenuItem([text('Item 1')]),
                                  MenuSubmenu(
                                    label: text('Parent'),
                                    children: [
                                      MenuItem([text('Submenu 1')]),
                                      MenuItem([text('Submenu 2')]),
                                    ],
                                  ),
                                  MenuItem([text('Item 3')]),
                                ],
                                style: [Menu.sm, Size.w52],
                              ),
                            ],
                            tag: 'ul',
                            style: [
                              DropdownContent.menu,
                              Spacing.mt(3),
                              Spacing.p(2),
                              Effects.shadow,
                              BgUtil.base100,
                              Effects.roundedBox,
                              Layout.z(1),
                            ],
                          ),
                        ),
                      ],
                    ),
                    Button([text('daisyUI')], style: [Button.ghost, TextUtil.xl]),
                  ]),
                  // Desktop Menu
                  NavbarCenter(
                    style: [
                      Layout.hidden,
                      Layout.flex.at(Breakpoint.lg),
                    ], // Hide on small, flex on large
                    [
                      Menu(
                        style: [Menu.horizontal, Spacing.px(1)],
                        [
                          MenuItem([text('Item 1')]),
                          MenuSubmenu(
                            label: text('Parent'),
                            ulStyle: [Size.w40],
                            children: [
                              MenuItem([text('Submenu 1')], style: [Size.w52]),
                              MenuItem([text('Submenu 2')]),
                            ],
                          ),
                          MenuItem([text('Item 3')]),
                        ],
                      ),
                    ],
                  ),
                  NavbarEnd([
                    Button([text('Button')]),
                  ]),
                ],
              ),
            ],
          ),
        ],
        code: '''
Navbar(
  style: [BgUtil.base100, Effects.shadowSm],
  ariaLabel: 'Responsive navbar with dropdown and horizontal menu',
  [
    NavbarStart([
      // Mobile Dropdown - hidden on large screens
      Container(
        style: [Layout.hidden.at(Breakpoint.lg)], // Hides on lg screens and up.
        [
          Dropdown(
            method: DropdownMethod.focus,
            trigger: Button(
              [Icon('menu', style: [Size.w5, Size.h5])],
              style: [Button.ghost],
            ),
            content: DropdownContent(
              [
                Menu(
                  [
                    MenuItem([text('Item 1')]),
                    MenuSubmenu(
                      label: text('Parent'),
                      children: [
                        MenuItem([text('Submenu 1')]),
                        MenuItem([text('Submenu 2')]),
                      ],
                    ),
                    MenuItem([text('Item 3')]),
                  ],
                  style: [Menu.sm, Size.w52],
                ),
              ],
              tag: 'ul',
              style: [
                DropdownContent.menu, Spacing.mt(3), Spacing.p(2),
                Effects.shadow, BgUtil.base100, Effects.roundedBox, Layout.z(1)
              ],
            ),
          ),
        ],
      ),
      Button([text('daisyUI')], style: [Button.ghost, TextUtil.xl]),
    ]),
    // Desktop Menu - hidden on small, flex on large
    NavbarCenter(
      style: [Layout.hidden, Layout.flex.at(Breakpoint.lg)],
      [
        Menu(
          style: [Menu.horizontal, Spacing.px(1)],
          [
            MenuItem([text('Item 1')]),
            MenuSubmenu(
              label: text('Parent'),
              children: [
                MenuItem([text('Submenu 1')]),
                MenuItem([text('Submenu 2')]),
              ],
            ),
            MenuItem([text('Item 3')]),
          ],
        ),
      ],
    ),
    NavbarEnd([
      Button([text('Button')]),
    ]),
  ],
)''',
      ),

      // ~Navbar with colors
      ComponentPreview(
        title: 'Navbar with colors',
        layoutDirection: PreviewLayoutDirection.vertical,
        preview: [
          Navbar(
            style: [BgUtil.neutral, TextUtil.neutralContent],
            ariaLabel: 'Neutral colored navbar',
            [
              Button([text('daisyUI')], style: [Button.ghost, TextUtil.xl]),
            ],
          ),
          Navbar(
            style: [BgUtil.base300],
            ariaLabel: 'Base colored navbar',
            [
              Button([text('daisyUI')], style: [Button.ghost, TextUtil.xl]),
            ],
          ),
          Navbar(
            style: [BgUtil.primary, TextUtil.primaryContent],
            ariaLabel: 'Primary colored navbar',
            [
              Button([text('daisyUI')], style: [Button.ghost, TextUtil.xl]),
            ],
          ),
        ],
        code: '''
// Navbar with Neutral color
Navbar(
  style: [BgUtil.neutral, TextUtil.neutralContent],
  ariaLabel: 'Neutral colored navbar',
  [Button([text('daisyUI')], style: [Button.ghost, TextUtil.xl])],
)

// Navbar with Base-300 color
Navbar(
  style: [BgUtil.base300],
  ariaLabel: 'Base colored navbar',
  [Button([text('daisyUI')], style: [Button.ghost, TextUtil.xl])],
)

// Navbar with Primary color
Navbar(
  style: [BgUtil.primary, TextUtil.primaryContent],
  ariaLabel: 'Primary colored navbar',
  [Button([text('daisyUI')], style: [Button.ghost, TextUtil.xl])],
)''',
      ),
    ]);
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/navbar_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/pagination_preview.dart -->
// This file provides interactive examples for creating pagination elements
// using the `deepyr` library.
//
// It demonstrates how to use the "smart" `Join` component as the foundation for
// pagination, composing it with styled `Button` components to achieve various
// looks and functionalities, as seen in the DaisyUI documentation.

import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart';

import '../../components/component_preview.dart';

/// Renders a collection of [ComponentPreview] widgets to demonstrate how to
/// create pagination elements by composing the `deepyr` [Join] and [Button] components.
class PaginationPreview extends StatelessComponent {
  const PaginationPreview({super.key});

  @override
  Component build(BuildContext context) {
    return div(classes: 'max-w-5xl mx-auto px-4 space-y-12', [
      div([
        h2(classes: 'text-2xl font-bold', [text('Pagination')]),
        p(classes: 'text-base-content/70', [
          text(
              'For pagination, we use the Join component to group multiple links or buttons next to each other.')
        ]),
      ]),

      // ~Pagination with an active button
      ComponentPreview(
        title: 'Pagination with an active button',
        description:
            'The smart `Join` component automatically applies the `join-item` class to its direct `Button` children.',
        preview: [
          Join([
            Button([text('1')]),
            Button([text('2')], style: [Button.active]),
            Button([text('3')]),
            Button([text('4')]),
          ]),
        ],
        code: '''
// The `Join` component handles adding the `join-item` class automatically.
Join([
  Button([text('1')]),
  Button([text('2')], style: [Button.active]),
  Button([text('3')]),
  Button([text('4')]),
])
''',
      ),

      // ~Sizes
      ComponentPreview(
        title: 'Sizes',
        layoutDirection: PreviewLayoutDirection.vertical,
        preview: [
          Join([
            Button([text('1')], style: [Button.xs]),
            Button([text('2')], style: [Button.xs, Button.active]),
            Button([text('3')], style: [Button.xs]),
            Button([text('4')], style: [Button.xs]),
          ]),
          Join([
            Button([text('1')], style: [Button.sm]),
            Button([text('2')], style: [Button.sm, Button.active]),
            Button([text('3')], style: [Button.sm]),
            Button([text('4')], style: [Button.sm]),
          ]),
          Join([
            Button([text('1')]),
            Button([text('2')], style: [Button.active]),
            Button([text('3')]),
            Button([text('4')]),
          ]),
          Join([
            Button([text('1')], style: [Button.lg]),
            Button([text('2')], style: [Button.lg, Button.active]),
            Button([text('3')], style: [Button.lg]),
            Button([text('4')], style: [Button.lg]),
          ]),
          Join([
            Button([text('1')], style: [Button.xl]),
            Button([text('2')], style: [Button.xl, Button.active]),
            Button([text('3')], style: [Button.xl]),
            Button([text('4')], style: [Button.xl]),
          ]),
        ],
        code: '''
// xs
Join([
  Button([text('1')], style: [Button.xs]),
  Button([text('2')], style: [Button.xs, Button.active]),
  Button([text('3')], style: [Button.xs]),
  Button([text('4')], style: [Button.xs]),
]),
// sm
Join([...]), // etc.
''',
      ),

      // ~With a disabled button
      ComponentPreview(
        title: 'With a disabled button',
        preview: [
          Join([
            Button([text('1')]),
            Button([text('2')]),
            Button([text('...')], style: [Button.disabled]),
            Button([text('99')]),
            Button([text('100')]),
          ]),
        ],
        code: '''
Join([
  Button([text('1')]),
  Button([text('2')]),
  Button([text('...')], style: [Button.disabled]),
  Button([text('99')]),
  Button([text('100')]),
])
''',
      ),

      // ~Next/Prev buttons
      ComponentPreview(
        title: 'Next/Prev buttons',
        preview: [
          Join([
            Button([text('«')]),
            Button([text('Page 22')]),
            Button([text('»')]),
          ]),
        ],
        code: '''
Join([
  Button([text('«')]),
  Button([text('Page 22')]),
  Button([text('»')]),
])
''',
      ),

      // ~Next/Prev outline buttons with equal width
      ComponentPreview(
        title: 'Next/Prev outline buttons with equal width',
        description:
            'Use the `classes` property on the Join container for layout utilities like `grid` that are not yet abstracted in deepyr.',
        preview: [
          Join(
            [
              Button([text('Previous page')], style: [Button.outline]),
              Button([text('Next')], style: [Button.outline]),
            ],
            // This is a valid use of `classes` for layout until a Grid utility is added.
            classes: 'grid grid-cols-2',
          ),
        ],
        code: '''
Join(
  [
    Button([text('Previous page')], style: [Button.outline]),
    Button([text('Next')], style: [Button.outline]),
  ],
  // Apply grid layout classes directly to the Join container.
  classes: 'grid grid-cols-2',
)
''',
      ),

      // ~Using radio inputs
      ComponentPreview(
        title: 'Using radio inputs',
        description:
            'For primitive Jaspr components like `input()`, which do not extend `UiComponent`, the `join-item` class must be added manually.',
        preview: [
          Join([
            input(
              type: InputType.radio,
              name: 'pagination_options',
              classes: 'join-item btn btn-square', // Manual class application
              attributes: {'aria-label': '1', 'checked': ''},
            ),
            input(
              type: InputType.radio,
              name: 'pagination_options',
              classes: 'join-item btn btn-square', // Manual class application
              attributes: {'aria-label': '2'},
            ),
            input(
              type: InputType.radio,
              name: 'pagination_options',
              classes: 'join-item btn btn-square', // Manual class application
              attributes: {'aria-label': '3'},
            ),
            input(
              type: InputType.radio,
              name: 'pagination_options',
              classes: 'join-item btn btn-square', // Manual class application
              attributes: {'aria-label': '4'},
            ),
          ]),
        ],
        code: '''
// For primitive components, `join-item` must be added manually.
Join([
  input(
    type: InputType.radio,
    name: 'pagination_options',
    classes: 'join-item btn btn-square',
    attributes: {'aria-label': '1', 'checked': ''},
  ),
  input(
    type: InputType.radio,
    name: 'pagination_options',
    classes: 'join-item btn btn-square',
    attributes: {'aria-label': '2'},
  ),
  // ... more radio inputs
])
''',
      ),
    ]);
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/pagination_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/progress_preview.dart -->
// This file provides interactive examples for the `deepyr` Progress component.
//
// It demonstrates how to create both determinate and indeterminate progress bars,
// and showcases all available color variations.

import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart';

import '../../components/component_preview.dart';

/// Renders a collection of [ComponentPreview] widgets to showcase the
/// functionality and styling of the `deepyr` [Progress] component.
class ProgressPreview extends StatelessComponent {
  const ProgressPreview({super.key});

  @override
  Component build(BuildContext context) {
    return div(classes: 'max-w-5xl mx-auto px-4 space-y-12', [
      // ~Progress
      const ComponentPreview(
        title: 'Progress',
        preview: [
          Container(
            [
              Progress(value: 0, style: [Size.w56]),
              Progress(value: 10, style: [Size.w56]),
              Progress(value: 40, style: [Size.w56]),
              Progress(value: 70, style: [Size.w56]),
              Progress(value: 100, style: [Size.w56]),
            ],
            style: [Layout.flex, Layout.flexCol, Layout.gap2, Alignment.itemsCenter],
          ),
        ],
        code: '''
Progress(value: 0, style: [Size.w56]),
Progress(value: 10, style: [Size.w56]),
Progress(value: 40, style: [Size.w56]),
Progress(value: 70, style: [Size.w56]),
Progress(value: 100, style: [Size.w56]),
''',
      ),

      // ~Generate previews for each color
      ..._buildColorPreviews(),

      // ~Indeterminate (without value)
      const ComponentPreview(
        title: 'Indeterminate (without value)',
        description: 'An indeterminate progress bar is created by not providing a `value`.',
        preview: [
          Progress(style: [Size.w56]),
        ],
        code: '''
// Omit the `value` property for an indeterminate state.
Progress(style: [Size.w56])
''',
      ),
    ]);
  }

  /// Helper function to generate all the color previews to avoid repetition.
  Iterable<Component> _buildColorPreviews() {
    final colors = {
      'Primary': Progress.primary,
      'Secondary': Progress.secondary,
      'Accent': Progress.accent,
      'Neutral': Progress.neutral,
      'Info': Progress.info,
      'Success': Progress.success,
      'Warning': Progress.warning,
      'Error': Progress.error,
    };

    return colors.entries.map((entry) {
      final title = '${entry.key} color';
      final style = entry.value;

      return ComponentPreview(
        title: title,
        preview: [
          Container(
            [
              Progress(value: 0, style: [style, Size.w56]),
              Progress(value: 10, style: [style, Size.w56]),
              Progress(value: 40, style: [style, Size.w56]),
              Progress(value: 70, style: [style, Size.w56]),
              Progress(value: 100, style: [style, Size.w56]),
            ],
            style: [Layout.flex, Layout.flexCol, Layout.gap2, Alignment.itemsCenter],
          ),
        ],
        code: '''
Progress(value: 0, style: [Progress.${entry.key.toLowerCase()}, Size.w56]),
Progress(value: 10, style: [Progress.${entry.key.toLowerCase()}, Size.w56]),
Progress(value: 40, style: [Progress.${entry.key.toLowerCase()}, Size.w56]),
Progress(value: 70, style: [Progress.${entry.key.toLowerCase()}, Size.w56]),
Progress(value: 100, style: [Progress.${entry.key.toLowerCase()}, Size.w56]),
''',
      );
    });
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/progress_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/project_teaser_preview.dart -->
import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart';

import '../../components/component_preview.dart';

/// A dedicated preview component to showcase responsive and styled Button examples
/// for the project teaser.
class ProjectTeaserPreview extends StatelessComponent {
  const ProjectTeaserPreview({super.key});

  @override
  Component build(BuildContext context) {
    return div(classes: 'max-w-5xl mx-auto px-4 py-8', [

      Button([Icon('login'), text('Login')], style: [Button.primary]),
      Button([Icon('person'), text('Register')], style: [Button.secondary]),
      Button([Icon('settings'), text('Settings')], style: [Button.accent]),
      Button([Icon('help'), text('Help')], style: [Button.info]),
      Button([Icon('logout'), text('Logout')], style: [Button.outline]),

      // --- Added: Button Colors ---
      ComponentPreview(
        title: 'Button Colors',
        description: 'Easily apply various color themes using type-safe modifiers.',
        preview: [
          Button([text('Primary')], style: [Button.primary]),
          Button([text('Secondary')], style: [Button.secondary]),
          Button([text('Accent')], style: [Button.accent]),
          Button([text('Neutral')], style: [Button.neutral]),
          Button([text('Info')], style: [Button.info]),
          Button([text('Success')], style: [Button.success]),
          Button([text('Warning')], style: [Button.warning]),
          Button([text('Error')], style: [Button.error]),
        ],
        code: '''
Button([text('Primary')], style: [Button.primary]),
Button([text('Secondary')], style: [Button.secondary]),
Button([text('Accent')], style: [Button.accent]),
Button([text('Neutral')], style: [Button.neutral]),
Button([text('Info')], style: [Button.info]),
Button([text('Success')], style: [Button.success]),
Button([text('Warning')], style: [Button.warning]),
Button([text('Error')], style: [Button.error]),
''',
      ),

      // --- Added: Outline Buttons ---
//       ComponentPreview(
//         title: 'Outline Buttons',
//         description:
//             'Create outline styles by combining the `.outline` modifier with color modifiers.',
//         preview: [
//           Button([text('Default')], style: [Button.outline]),
//           Button([text('Primary')], style: [Button.primary, Button.outline]),
//           Button([text('Secondary')], style: [Button.secondary, Button.outline]),
//           Button([text('Accent')], style: [Button.accent, Button.outline]),
//           Button([text('Info')], style: [Button.info, Button.outline]),
//           Button([text('Success')], style: [Button.success, Button.outline]),
//           Button([text('Warning')], style: [Button.warning, Button.outline]),
//           Button([text('Error')], style: [Button.error, Button.outline]),
//         ],
//         code: '''
// Button([text('Default')], style: [Button.outline]),
// Button([text('Primary')], style: [Button.primary, Button.outline]),
// Button([text('Secondary')], style: [Button.secondary, Button.outline]),
// Button([text('Accent')], style: [Button.accent, Button.outline]),
// Button([text('Info')], style: [Button.info, Button.outline]),
// Button([text('Success')], style: [Button.success, Button.outline]),
// Button([text('Warning')], style: [Button.warning, Button.outline]),
// Button([text('Error')], style: [Button.error, Button.outline]),
// ''',
//       ),

      // Responsive Button Teaser (as before)
      ComponentPreview(
        title: 'Responsive Button Teaser',
        description:
            "This button's size changes based on the screen width. Try resizing your browser! This is all controlled by a single, readable chain of type-safe Dart modifiers.",
        preview: [
          Button(
            [text('Responsive')],
            style: [
              Button.primary,
              Button.xs,
              Button.sm.at(Breakpoint.sm),
              Button.md.at(Breakpoint.md),
              Button.lg.at(Breakpoint.lg),
              Button.xl.at(Breakpoint.xl),
            ],
          ),
        ],
        code: '''
Button(
  [text('Responsive')],
  style: [
    Button.primary, // Base style

    // A fluent, type-safe chain for responsive sizes!
    Button.xs,                      // xs by default
    Button.sm.at(Breakpoint.sm),    // sm on small screens and up
    Button.md.at(Breakpoint.md),    // md on medium screens and up
    Button.lg.at(Breakpoint.lg),    // lg on large screens and up
    Button.xl.at(Breakpoint.xl),    // xl on extra-large screens and up
  ],
)
''',
      ),
    ]);
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/project_teaser_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/radio_preview.dart -->
// This file provides interactive examples for the `deepyr` Radio component.
//
// It demonstrates the core functionality, various styles, sizes, colors,
// and the correct state management pattern for a controlled, type-safe component,
// mirroring the official DaisyUI documentation.

import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart';

import '../../components/component_preview.dart';

/// An enum is a perfect candidate for defining the values in a radio group,
/// ensuring type safety throughout the implementation.
enum _Flavor { vanilla, chocolate, strawberry }

/// A stateful component to demonstrate the core controlled component pattern for Radio.
class _StatefulRadioExample extends StatefulComponent {
  const _StatefulRadioExample();

  @override
  State<_StatefulRadioExample> createState() => _StatefulRadioExampleState();
}

class _StatefulRadioExampleState extends State<_StatefulRadioExample> {
  // The parent component holds the currently selected value in its state.
  _Flavor _selectedFlavor = _Flavor.vanilla;

  @override
  Component build(BuildContext context) {
    return div(classes: 'flex flex-col gap-2 min-w-40', [
      // Iterate through the available options to render a Radio for each.
      for (final flavor in _Flavor.values)
        label(
          classes: 'label cursor-pointer justify-start gap-2',
          [
            // The Radio component itself is controlled by the parent's state.
            Radio<_Flavor>(
              // The unique value this radio button represents.
              value: flavor,
              // The currently selected value for the entire group.
              groupValue: _selectedFlavor,
              // The name must be the same for all radios in the group.
              name: 'flavor-group-main',
              // The callback updates the parent's state, triggering a rebuild.
              onSelect: (newValue) {
                setState(() => _selectedFlavor = newValue);
              },
              style: [Radio.primary],
            ),
            span([text(flavor.name)], classes: 'label-text'),
          ],
        ),
      p([text('Selected: ${_selectedFlavor.name}')], classes: 'mt-2 text-sm'),
    ]);
  }
}

/// A stateful component to manage the selection for a simple two-option radio group.
class _BasicRadioPreview extends StatefulComponent {
  const _BasicRadioPreview();

  @override
  State<_BasicRadioPreview> createState() => _BasicRadioPreviewState();
}

class _BasicRadioPreviewState extends State<_BasicRadioPreview> {
  int _selectedValue = 1;

  @override
  Component build(BuildContext context) {
    return Component.fragment([
      Radio(
        value: 1,
        groupValue: _selectedValue,
        name: 'radio-1',
        onSelect: (val) => setState(() => _selectedValue = val),
      ),
      Radio(
        value: 2,
        groupValue: _selectedValue,
        name: 'radio-1',
        onSelect: (val) => setState(() => _selectedValue = val),
      ),
    ]);
  }
}

/// A stateful component to manage selection for a single color preview.
class _ColorRadioPreview extends StatefulComponent {
  const _ColorRadioPreview({
    required this.colorStyle,
    required this.radioName,
  });

  final RadioStyling colorStyle;
  final String radioName;

  @override
  State<_ColorRadioPreview> createState() => _ColorRadioPreviewState();
}

class _ColorRadioPreviewState extends State<_ColorRadioPreview> {
  int _selectedValue = 1;

  @override
  Component build(BuildContext context) {
    return Component.fragment([
      Radio(
        value: 1,
        groupValue: _selectedValue,
        name: component.radioName,
        onSelect: (val) => setState(() => _selectedValue = val),
        style: [component.colorStyle],
      ),
      Radio(
        value: 2,
        groupValue: _selectedValue,
        name: component.radioName,
        onSelect: (val) => setState(() => _selectedValue = val),
        style: [component.colorStyle],
      ),
    ]);
  }
}

/// A stateful component to manage the selection for the custom-colored radio buttons.
class _CustomColorRadioPreview extends StatefulComponent {
  const _CustomColorRadioPreview();

  @override
  State<_CustomColorRadioPreview> createState() => _CustomColorRadioPreviewState();
}

class _CustomColorRadioPreviewState extends State<_CustomColorRadioPreview> {
  // Use a string to identify the selected option.
  String _selectedValue = 'red';

  @override
  Component build(BuildContext context) {
    return Component.fragment([
      Radio<String>(
        value: 'red',
        groupValue: _selectedValue,
        name: 'radio-custom-color', // Shared name for the group
        onSelect: (val) => setState(() => _selectedValue = val),
        classes:
            'bg-red-100 border-red-300 checked:bg-red-200 checked:text-red-600 checked:border-red-600',
      ),
      Radio<String>(
        value: 'blue',
        groupValue: _selectedValue,
        name: 'radio-custom-color', // Shared name for the group
        onSelect: (val) => setState(() => _selectedValue = val),
        classes:
            'bg-blue-100 border-blue-300 checked:bg-blue-200 checked:text-blue-600 checked:border-blue-600',
      ),
    ]);
  }
}

/// Renders a collection of [ComponentPreview] widgets to showcase the
/// functionality and styling of the `deepyr` [Radio] component.
class RadioPreview extends StatelessComponent {
  const RadioPreview({super.key});

  @override
  Component build(BuildContext context) {
    return div(classes: 'max-w-5xl mx-auto px-4 space-y-12', [
      // ~Radio
      const ComponentPreview(
        title: 'Radio',
        preview: [
          _BasicRadioPreview(),
        ],
        code: '''
Radio(value: 1, groupValue: 1, name: 'radio-1', onSelect: (val) => setState(() => _selectedValue = val)),
Radio(value: 2, groupValue: 1, name: 'radio-1', onSelect: (val) => setState(() => _selectedValue = val)),
''',
      ),

      // ~Radio sizes
      // In the DaisyUI example, these are all checked but are not a functional group.
      // They use different names to allow this. We will replicate that for visual accuracy.
      const ComponentPreview(
        title: 'Radio sizes',
        preview: [
          Radio(value: 1, groupValue: 1, name: 'radio-2', style: [Radio.xs]),
          Radio(value: 1, groupValue: 1, name: 'radio-2.1', style: [Radio.sm]),
          Radio(value: 1, groupValue: 1, name: 'radio-2.2', style: [Radio.md]),
          Radio(value: 1, groupValue: 1, name: 'radio-2.3', style: [Radio.lg]),
          Radio(value: 1, groupValue: 1, name: 'radio-2.4', style: [Radio.xl]),
        ],
        code: '''
Radio(value: 1, groupValue: 1, name: 'radio-2', onSelect: null, style: [Radio.xs]),
Radio(value: 1, groupValue: 1, name: 'radio-2.1', onSelect: null, style: [Radio.sm]),
Radio(value: 1, groupValue: 1, name: 'radio-2.2', onSelect: null, style: [Radio.md]),
Radio(value: 1, groupValue: 1, name: 'radio-2.3', onSelect: null, style: [Radio.lg]),
Radio(value: 1, groupValue: 1, name: 'radio-2.4', onSelect: null, style: [Radio.xl]),
''',
      ),

      // ~Neutral color
      const ComponentPreview(
        title: 'Neutral color',
        preview: [
          _ColorRadioPreview(colorStyle: Radio.neutral, radioName: 'radio-3'),
        ],
        code: '''
// This requires a stateful parent to manage the selected value.
Radio(value: 1, groupValue: 1, name: 'radio-3', onSelect: (val){}, style: [Radio.neutral]),
Radio(value: 2, groupValue: 1, name: 'radio-3', onSelect: (val){}, style: [Radio.neutral]),
''',
      ),

      // ~Primary color
      const ComponentPreview(
        title: 'Primary color',
        preview: [
          _ColorRadioPreview(colorStyle: Radio.primary, radioName: 'radio-4'),
        ],
        code: '''
// This requires a stateful parent to manage the selected value.
Radio(value: 1, groupValue: 1, name: 'radio-4', onSelect: (val){}, style: [Radio.primary]),
Radio(value: 2, groupValue: 1, name: 'radio-4', onSelect: (val){}, style: [Radio.primary]),
''',
      ),

      // ~Secondary color
      const ComponentPreview(
        title: 'Secondary color',
        preview: [
          _ColorRadioPreview(colorStyle: Radio.secondary, radioName: 'radio-5'),
        ],
        code: '''
// This requires a stateful parent to manage the selected value.
Radio(value: 1, groupValue: 1, name: 'radio-5', onSelect: (val){}, style: [Radio.secondary]),
Radio(value: 2, groupValue: 1, name: 'radio-5', onSelect: (val){}, style: [Radio.secondary]),
''',
      ),

      // ~Accent color
      const ComponentPreview(
        title: 'Accent color',
        preview: [
          _ColorRadioPreview(colorStyle: Radio.accent, radioName: 'radio-6'),
        ],
        code: '''
// This requires a stateful parent to manage the selected value.
Radio(value: 1, groupValue: 1, name: 'radio-6', onSelect: (val){}, style: [Radio.accent]),
Radio(value: 2, groupValue: 1, name: 'radio-6', onSelect: (val){}, style: [Radio.accent]),
''',
      ),

      // ~Success color
      const ComponentPreview(
        title: 'Success color',
        preview: [
          _ColorRadioPreview(colorStyle: Radio.success, radioName: 'radio-7'),
        ],
        code: '''
// This requires a stateful parent to manage the selected value.
Radio(value: 1, groupValue: 1, name: 'radio-7', onSelect: (val){}, style: [Radio.success]),
Radio(value: 2, groupValue: 1, name: 'radio-7', onSelect: (val){}, style: [Radio.success]),
''',
      ),

      // ~Warning color
      const ComponentPreview(
        title: 'Warning color',
        preview: [
          _ColorRadioPreview(colorStyle: Radio.warning, radioName: 'radio-8'),
        ],
        code: '''
// This requires a stateful parent to manage the selected value.
Radio(value: 1, groupValue: 1, name: 'radio-8', onSelect: (val){}, style: [Radio.warning]),
Radio(value: 2, groupValue: 1, name: 'radio-8', onSelect: (val){}, style: [Radio.warning]),
''',
      ),

      // ~Info color
      const ComponentPreview(
        title: 'Info color',
        preview: [
          _ColorRadioPreview(colorStyle: Radio.info, radioName: 'radio-9'),
        ],
        code: '''
// This requires a stateful parent to manage the selected value.
Radio(value: 1, groupValue: 1, name: 'radio-9', onSelect: (val){}, style: [Radio.info]),
Radio(value: 2, groupValue: 1, name: 'radio-9', onSelect: (val){}, style: [Radio.info]),
''',
      ),

      // ~Error color
      const ComponentPreview(
        title: 'Error color',
        preview: [
          _ColorRadioPreview(colorStyle: Radio.error, radioName: 'radio-10'),
        ],
        code: '''
// This requires a stateful parent to manage the selected value.
Radio(value: 1, groupValue: 1, name: 'radio-10', onSelect: (val){}, style: [Radio.error]),
Radio(value: 2, groupValue: 1, name: 'radio-10', onSelect: (val){}, style: [Radio.error]),
''',
      ),

      // ~Disabled
      const ComponentPreview(
        title: 'Disabled',
        preview: [
          Radio(value: 1, groupValue: 1, name: 'radio-11', disabled: true),
          Radio(value: 2, groupValue: 1, name: 'radio-11', disabled: true),
        ],
        code: '''
Radio(value: 1, groupValue: 1, name: 'radio-11', onSelect: null, disabled: true),
Radio(value: 2, groupValue: 1, name: 'radio-11', onSelect: null, disabled: true),
''',
      ),

      // ~Radio with custom colors
      const ComponentPreview(
        title: 'Radio with custom colors',
        preview: [
          // Use the new stateful widget here
          _CustomColorRadioPreview(),
        ],
        code: '''
Radio<String>(
  value: 'red',
  groupValue: _selectedValue,
  name: 'radio-custom-color',
  onSelect: (val) => setState(() => _selectedValue = val),
  classes: 'bg-red-100 border-red-300 checked:bg-red-200 checked:text-red-600 checked:border-red-600',
),
Radio<String>(
  value: 'blue',
  groupValue: _selectedValue,
  name: 'radio-custom-color',
  onSelect: (val) => setState(() => _selectedValue = val),
  classes: 'bg-blue-100 border-blue-300 checked:bg-blue-200 checked:text-blue-600 checked:border-blue-600',
),
''',
      ),

      // ~Stateful Example (Most Important)
      const ComponentPreview(
        title: 'State Management (Controlled Component)',
        description:
            'A Radio component is controlled. Its state must be managed by a parent using `groupValue` and `onSelect`. Using a generic type like an enum ensures type safety.',
        preview: [
          _StatefulRadioExample(),
        ],
        code: '''
// 1. Define a type for your radio group values (enum is great for this).
enum Flavor { vanilla, chocolate, strawberry }

// 2. Create a stateful parent component to manage the state.
class MyRadioGroup extends StatefulComponent {
  @override
  State<MyRadioGroup> createState() => _MyRadioGroupState();
}

class _MyRadioGroupState extends State<MyRadioGroup> {
  // 3. Hold the currently selected value in the state.
  Flavor _selectedFlavor = Flavor.vanilla;

  @override
  Component build(BuildContext context) {
    // 4. Render a Radio for each option.
    for (final flavor in Flavor.values) {
      return label(classes: 'label cursor-pointer justify-start gap-2', [
        // 5. Provide the value, groupValue, name, and onSelect callback.
        Radio<Flavor>(
          // The unique value this radio button represents.
          value: flavor,
          // The currently selected value for the entire group.
          groupValue: _selectedFlavor,
          // The name must be the same for all radios in the group.
          name: 'flavor-group',
          // The callback updates the parent's state, triggering a rebuild.
          onSelect: (newValue) {
            // 6. Update the state when a new value is selected.
            setState(() => _selectedFlavor = newValue);
          },
          style: [Radio.primary],
        ),
        span([text(flavor.name)], classes: 'label-text'),
      ]);
    }
  }
}
''',
      ),
    ]);
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/radio_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/range_preview.dart -->
// This file provides interactive examples for the `deepyr` Range component.
//
// It demonstrates the core functionality, various styles, sizes, colors,
// and the correct state management pattern for a controlled component.

import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart';

import '../../components/component_preview.dart';

// #region Stateful Helper Components

/// A stateful helper component to demonstrate the interactive nature of the Range slider.
/// It manages the slider's current value and displays it.
class _StatefulRangeExample extends StatefulComponent {
  const _StatefulRangeExample({
    this.initialValue = 40.0,
    this.min = 0,
    this.max = 100,
    this.step,
    this.styles,
    this.css,
    this.classes,
    this.showValue = true,
  });

  final double initialValue;
  final double min;
  final double max;
  final double? step;
  final List<RangeStyling>? styles;
  final Styles? css;
  final String? classes;
  final bool showValue;

  @override
  State<_StatefulRangeExample> createState() => _StatefulRangeExampleState();
}

class _StatefulRangeExampleState extends State<_StatefulRangeExample> {
  late double _currentValue;

  @override
  void initState() {
    super.initState();
    _currentValue = component.initialValue;
  }

  @override
  Component build(BuildContext context) {
    return Component.fragment([
      Range(
        value: _currentValue,
        onValueChanged: (newValue) {
          setState(() => _currentValue = newValue);
        },
        min: component.min,
        max: component.max,
        step: component.step,
        style: component.styles,
        css: component.css,
        classes: component.classes,
      ),
      if (component.showValue)
        p(
          [text('Value: ${_currentValue.toInt()}')],
          classes: 'text-sm mt-2 font-mono',
        ),
    ]);
  }
}

// #endregion

/// Renders a collection of [ComponentPreview] widgets to showcase the
/// functionality and styling of the `deepyr` [Range] component.
class RangePreview extends StatelessComponent {
  const RangePreview({super.key});

  @override
  Component build(BuildContext context) {
    return div(classes: 'max-w-5xl mx-auto px-4 space-y-12', [
      // ~Range
      const ComponentPreview(
        title: 'Range',
        description:
            'The Range slider is a controlled component. Its state must be managed by a parent using `value` and `onValueChanged`.',
        preview: [
          _StatefulRangeExample(),
        ],
        code: r'''
class MySlider extends StatefulComponent {
  @override
  State<MySlider> createState() => _MySliderState();
}

class _MySliderState extends State<MySlider> {
  double _currentValue = 40.0;

  @override
  Component build(BuildContext context) {
    return Range(
      value: _currentValue,
      onValueChanged: (newValue) {
        setState(() => _currentValue = newValue);
      },
      min: 0,
      max: 100,
    );
    return p([text('Value: ${_currentValue.toInt()}')]);
  }
}
''',
      ),

      // ~With steps and measure
      ComponentPreview(
        title: 'With steps and measure',
        preview: [
          Container(
            [
              const _StatefulRangeExample(
                initialValue: 25,
                step: 25,
                showValue: false,
              ),
              // Tick marks
              div(
                classes: 'flex justify-between px-1 mt-2 text-xs',
                [
                  for (var i = 0; i < 5; i++) span([text('|')]),
                ],
              ),
              // Labels
              div(
                classes: 'flex justify-between px-1 mt-2 text-xs',
                [
                  for (var i = 1; i <= 5; i++) span([text(i.toString())]),
                ],
              ),
            ],
            style: [Size.wFull, Size.maxWxs],
          ),
        ],
        code: '''
Container(
  [
    Range(
      value: 25,
      onValueChanged: (val) { /* handle state */ },
      min: 0,
      max: 100,
      step: 25,
    ),
    div(
      classes: 'flex justify-between px-1 mt-2 text-xs',
      [for (var i = 0; i < 5; i++) span([text('|')])],
    ),
    div(
      classes: 'flex justify-between px-1 mt-2 text-xs',
      [for (var i = 1; i <= 5; i++) span([text(i.toString())])],
    ),
  ],
  style: [Size.wFull, Size.maxWxs],
)
''',
      ),

      // ~Colors
      ..._buildColorPreviews(),

      // ~Sizes
      const ComponentPreview(
        title: 'Sizes',
        preview: [
          Container(
            [
              _StatefulRangeExample(initialValue: 30, styles: [Range.xs]),
              _StatefulRangeExample(styles: [Range.sm]),
              _StatefulRangeExample(initialValue: 50, styles: [Range.md]),
              _StatefulRangeExample(initialValue: 60, styles: [Range.lg]),
              _StatefulRangeExample(initialValue: 70, styles: [Range.xl]),
            ],
            style: [Layout.flex, Layout.flexCol, Layout.gap4, Size.wFull, Size.maxWxs],
          ),
        ],
        code: '''
Range(value: 30, style: [Range.xs]),
Range(value: 40, style: [Range.sm]),
Range(value: 50, style: [Range.md]), // Default
Range(value: 60, style: [Range.lg]),
Range(value: 70, style: [Range.xl]),''',
      ),

      // ~Range with custom color and no fill
      const ComponentPreview(
        title: 'Range with custom color and no fill',
        description:
            'Use the `css` property to set CSS variables and `classes` for other utilities.',
        preview: [
          _StatefulRangeExample(
            classes: 'text-blue-300',
            css: Styles(
              raw: {
                '--range-bg': 'orange',
                '--range-thumb': 'blue',
                '--range-fill': '0',
              },
            ),
          ),
        ],
        code: '''
Range(
  value: 40,
  onValueChanged: (val) { /* handle state */ },
  classes: 'text-blue-300',
  css: Styles.raw({
    '--range-bg': 'orange',
    '--range-thumb': 'blue',
    '--range-fill': '0',
  }),
)
''',
      ),
    ]);
  }

  /// Helper function to generate all the color previews to avoid repetition.
  Iterable<Component> _buildColorPreviews() {
    final colors = {
      'Neutral': Range.neutral,
      'Primary': Range.primary,
      'Secondary': Range.secondary,
      'Accent': Range.accent,
      'Success': Range.success,
      'Warning': Range.warning,
      'Info': Range.info,
      'Error': Range.error,
    };

    return colors.entries.map((entry) {
      final title = '${entry.key} color';
      final style = entry.value;
      return ComponentPreview(
        title: title,
        preview: [
          _StatefulRangeExample(styles: [style]),
        ],
        code:
            '''
// This requires a stateful parent to manage the value.
Range(
  value: 40,
  onValueChanged: (val) { /* ... */ },
  style: [Range.${entry.key.toLowerCase()}],
)
''',
      );
    });
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/range_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/select_preview.dart -->
/// This file provides interactive examples for the `deepyr` Select component.
///
/// It demonstrates the core functionality, various styles, sizes, colors,
/// and how to compose the Select component within a Fieldset.
library;

import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart';

import '../../components/component_preview.dart';

/// Renders a collection of [ComponentPreview] widgets to showcase the
/// functionality and styling of the `deepyr` [Select] component.
class SelectPreview extends StatelessComponent {
  const SelectPreview({super.key});

  @override
  Component build(BuildContext context) {
    return div(classes: 'max-w-5xl mx-auto px-4 space-y-12', [
      // ~Select
      ComponentPreview(
        title: 'Select',
        preview: [
          Select(
            style: [Select.bordered],
            [
              option([text('Pick a color')], disabled: true, selected: true),
              option([text('Crimson')]),
              option([text('Amber')]),
              option([text('Velvet')]),
            ],
          ),
        ],
        code: '''
Select(
  style: [Select.bordered],
  [
    option([text('Pick a color')], disabled: true, selected: true),
    option([text('Crimson')]),
    option([text('Amber')]),
    option([text('Velvet')]),
  ],
)''',
      ),

      // ~Ghost (no background)
      ComponentPreview(
        title: 'Ghost (no background)',
        preview: [
          Select(
            style: [Select.ghost, Select.bordered],
            [
              option([text('Pick a font')], disabled: true, selected: true),
              option([text('Inter')]),
              option([text('Poppins')]),
              option([text('Raleway')]),
            ],
          ),
        ],
        code: '''
Select(
  style: [Select.ghost, Select.bordered],
  [
    option([text('Pick a font')], disabled: true, selected: true),
    option([text('Inter')]),
    option([text('Poppins')]),
    option([text('Raleway')]),
  ],
)''',
      ),

      // ~With fieldset and labels
      ComponentPreview(
        title: 'With fieldset and labels',
        preview: [
          Fieldset(
            [
              Legend([text('Browsers')]),
              Select(
                style: [Select.bordered],
                [
                  option([text('Pick a Browser')], disabled: true, selected: true),
                  option([text('Chrome')]),
                  option([text('FireFox')]),
                  option([text('Safari')]),
                ],
              ),
              FormLabel([text('Optional')]),
            ],
            style: [Size.wxs],
          ),
        ],
        code: '''
Fieldset(
  [
    Legend([text('Browsers')]),
    Select(
      style: [Select.bordered],
      [
        option([text('Pick a Browser')], disabled: true, selected: true),
        option([text('Chrome')]),
        option([text('FireFox')]),
        option([text('Safari')]),
      ],
    ),
    FormLabel([text('Optional')]),
  ],
  style: [Size.wxs],
)''',
      ),

      // ~Select Colors
      ComponentPreview(
        title: 'Select Colors',
        preview: [
          Container(
            [
              Select(
                style: [Select.bordered, Select.primary],
                [
                  option([text('Primary')], disabled: true, selected: true),
                  option([text('VScode')]),
                ],
              ),
              Select(
                style: [Select.bordered, Select.secondary],
                [
                  option([text('Secondary')], disabled: true, selected: true),
                  option([text('Zig')]),
                ],
              ),
              Select(
                style: [Select.bordered, Select.accent],
                [
                  option([text('Accent')], disabled: true, selected: true),
                  option([text('Dark mode')]),
                ],
              ),
              Select(
                style: [Select.bordered, Select.neutral],
                [
                  option([text('Neutral')], disabled: true, selected: true),
                  option([text('EU west')]),
                ],
              ),
              Select(
                style: [Select.bordered, Select.info],
                [
                  option([text('Info')], disabled: true, selected: true),
                  option([text('React')]),
                ],
              ),
              Select(
                style: [Select.bordered, Select.success],
                [
                  option([text('Success')], disabled: true, selected: true),
                  option([text('Bun')]),
                ],
              ),
              Select(
                style: [Select.bordered, Select.warning],
                [
                  option([text('Warning')], disabled: true, selected: true),
                  option([text('MacOS')]),
                ],
              ),
              Select(
                style: [Select.bordered, Select.error],
                [
                  option([text('Error')], disabled: true, selected: true),
                  option([text('GPT-4')]),
                ],
              ),
            ],
            style: [Layout.flex, Layout.flexCol, Layout.gap(4), Size.wxs],
          )
        ],
        code: '''
Select(style: [Select.bordered, Select.primary], [/* options */]),
Select(style: [Select.bordered, Select.secondary], [/* options */]),
Select(style: [Select.bordered, Select.accent], [/* options */]),
Select(style: [Select.bordered, Select.neutral], [/* options */]),
Select(style: [Select.bordered, Select.info], [/* options */]),
Select(style: [Select.bordered, Select.success], [/* options */]),
Select(style: [Select.bordered, Select.warning], [/* options */]),
Select(style: [Select.bordered, Select.error], [/* options */]),''',
      ),

      // ~Sizes
      ComponentPreview(
        title: 'Sizes',
        preview: [
          Container(
            [
              Select(
                style: [Select.bordered, Select.xs],
                [
                  option([text('Xsmall')], disabled: true, selected: true),
                  option([text('Xsmall Apple')]),
                ],
              ),
              Select(
                style: [Select.bordered, Select.sm],
                [
                  option([text('Small')], disabled: true, selected: true),
                  option([text('Small Apple')]),
                ],
              ),
              Select(
                style: [Select.bordered, Select.md],
                [
                  option([text('Medium')], disabled: true, selected: true),
                  option([text('Medium Apple')]),
                ],
              ),
              Select(
                style: [Select.bordered, Select.lg],
                [
                  option([text('Large')], disabled: true, selected: true),
                  option([text('Large Apple')]),
                ],
              ),
              Select(
                style: [Select.bordered, Select.xl],
                [
                  option([text('Xlarge')], disabled: true, selected: true),
                  option([text('Xlarge Apple')]),
                ],
              ),
            ],
            style: [Layout.flex, Layout.flexCol, Layout.gap(4), Size.wFull, Alignment.itemsCenter],
          ),
        ],
        code: '''
Select(style: [Select.bordered, Select.xs], [/* options */]),
Select(style: [Select.bordered, Select.sm], [/* options */]),
Select(style: [Select.bordered, Select.md], [/* options */]),
Select(style: [Select.bordered, Select.lg], [/* options */]),
Select(style: [Select.bordered, Select.xl], [/* options */]),''',
      ),

      // ~Disabled
      ComponentPreview(
        title: 'Disabled',
        preview: [
          Select(
            disabled: true,
            style: [Select.bordered],
            [
              option([text("You can't touch this")]),
            ],
          ),
        ],
        code: '''
Select(
  disabled: true,
  style: [Select.bordered],
  [
    option([text("You can't touch this")]),
  ],
)''',
      ),
    ]);
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/select_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/skeleton_preview.dart -->
import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart' hide Flex; // Hide Jaspr's Flex to avoid conflict

import '../../components/component_preview.dart';

/// Renders a collection of [ComponentPreview] widgets to showcase the
/// functionality and styling of the `deepyr` [Skeleton] component.
class SkeletonPreview extends StatelessComponent {
  const SkeletonPreview({super.key});

  @override
  Component build(BuildContext context) {
    return div(classes: 'max-w-5xl mx-auto px-4 space-y-12', [
      // ~Skeleton
      const ComponentPreview(
        title: 'Skeleton',
        preview: [
          Skeleton(style: [Size.w32, Size.h32]),
        ],
        code: '''
Skeleton(style: [Size.w32, Size.h32])
''',
      ),

      // ~Skeleton - circle with content
      ComponentPreview(
        title: 'Skeleton - circle with content',
        preview: [
          Container(
            [
              const Container(
                [
                  Skeleton(style: [Size.w16, Size.h16, Flex.shrink0, Effects.roundedFull]),
                  Container(
                    [
                      Skeleton(style: [Size.h4, Size.w20]),
                      Skeleton(style: [Size.h4, Size.w24]),
                    ],
                    style: [Layout.flex, Layout.flexCol, Layout.gap4],
                  )
                ],
                style: [Layout.flex, Layout.gap4, Alignment.itemsCenter],
              ),
              const Skeleton(style: [Size.h32, Size.wFull]),
            ],
            style: [Layout.flex, Layout.flexCol, Layout.gap4, Size.w(52)],
          ),
        ],
        code: '''
Container(
  [
    const Container(
      [
        Skeleton(style: [Size.w16, Size.h16, Flex.shrink0, Effects.roundedFull]),
        Container(
          [
            Skeleton(style: [Size.h4, Size.w20]),
            Skeleton(style: [Size.h4, Size.w24]),
          ],
          style: [Layout.flex, Layout.flexCol, Layout.gap4],
        )
      ],
      style: [Layout.flex, Layout.gap4, Alignment.itemsCenter],
    ),
    const Skeleton(style: [Size.h32, Size.wFull]),
  ],
  style: [Layout.flex, Layout.flexCol, Layout.gap4, Size.w(52)],
)
''',
      ),

      // ~Skeleton - rectangle with content
      const ComponentPreview(
        title: 'Skeleton - rectangle with content',
        preview: [
          Container(
            [
              Skeleton(style: [Size.h32, Size.wFull]),
              Skeleton(style: [Size.h4, Size.w24]),
              Skeleton(style: [Size.h4, Size.wFull]),
              Skeleton(style: [Size.h4, Size.wFull]),
            ],
            style: [Layout.flex, Layout.flexCol, Layout.gap4, Size.w56],
          ),
        ],
        code: '''
Container(
  [
    Skeleton(style: [Size.h32, Size.wFull]),
    Skeleton(style: [Size.h4, Size.w24]),
    Skeleton(style: [Size.h4, Size.wFull]),
    Skeleton(style: [Size.h4, Size.wFull]),
  ],
  style: [Layout.flex, Layout.flexCol, Layout.gap4, Size.w56],
)
''',
      ),
    ]);
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/skeleton_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/swap_preview.dart -->
import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart';
import 'package:universal_web/web.dart' show Event, HTMLInputElement, document;

import '../../components/component_preview.dart';

// A stateful helper is required to set the `indeterminate` JS property after render.
class _IndeterminateSwapPreview extends StatefulComponent {
  const _IndeterminateSwapPreview();

  @override
  State<_IndeterminateSwapPreview> createState() => _IndeterminateSwapPreviewState();
}

class _IndeterminateSwapPreviewState extends State<_IndeterminateSwapPreview> {
  // A unique ID to target the internal checkbox with JS.
  final String _checkboxId = 'indeterminate-swap-checkbox';

  @override
  void initState() {
    super.initState();
    // The `indeterminate` state is a JavaScript property, not an HTML attribute.
    // It must be set after the component has been rendered into the DOM.
    if (kIsWeb) {
      Future.delayed(Duration.zero, () {
        final element = document.getElementById(_checkboxId) as HTMLInputElement?;
        if (element != null) {
          element.indeterminate = true;
        }
      });
    }
  }

  @override
  Component build(BuildContext context) {
    // To reliably set the `indeterminate` property on the internal checkbox,
    // we manually construct the Swap's HTML structure. This gives us direct
    // control over the input element's ID.
    return label(
      classes: 'swap', // The base class for the container
      [
        // The hidden checkbox that controls the state.
        input(
          id: _checkboxId, // The ID we target with JS.
          type: InputType.checkbox,
          // For the preview, we prevent clicks from changing the state.
          events: {
            'click': (dynamic rawEvent) {
              if (kIsWeb) (rawEvent as Event).preventDefault();
            },
          },
        ),
        // The three visual states.
        div(
          classes: 'swap-on',
          [
            Icon('check_circle', style: [TextUtil.xl2, TextUtil.success]),
          ],
        ),
        div(
          classes: 'swap-off',
          [
            Icon('cancel', style: [TextUtil.xl2, TextUtil.error]),
          ],
        ),
        div(
          classes: 'swap-indeterminate',
          [
            Icon('help', style: [TextUtil.xl2, TextUtil.warning]),
          ],
        ),
      ],
    );
  }
}

class SwapPreview extends StatelessComponent {
  const SwapPreview({super.key});

  @override
  Component build(BuildContext context) {
    return div(classes: 'max-w-5xl mx-auto px-4', [
      // Basic text swap example
      ComponentPreview(
        title: 'Swap text',
        preview: [Swap(onContent: text('ON'), offContent: text('OFF'))],
        code: '''
Swap(
  onContent: text('ON'),
  offContent: text('OFF'),
),''',
      ),

      // Swap with volume icons
      ComponentPreview(
        title: 'Swap volume icons',
        preview: [
          Swap(
            onContent: Icon('volume_up'),
            offContent: Icon('volume_off'),
          ),
        ],
        code: '''
Swap(
  onContent: Icon('volume_up'),
  offContent: Icon('volume_off'),
),''',
      ),

      // Swap with rotate effect
      ComponentPreview(
        title: 'Swap with rotate effect',
        preview: [
          Swap(
            onContent: Icon('light_mode', style: [TextUtil.xl2]),
            offContent: Icon('dark_mode', style: [TextUtil.xl2]),
            style: [Swap.rotate],
          ),
        ],
        code: '''
Swap(
  onContent: Icon('light_mode', style: [TextUtil.xl2]),
  offContent: Icon('dark_mode', style: [TextUtil.xl2]),
  style: [Swap.rotate],
),''',
      ),

      // Hamburger menu swap
      ComponentPreview(
        title: 'Hamburger menu swap',
        preview: [
          Swap(
            onContent: Icon('close', style: [TextUtil.xl]),
            offContent: Icon('menu', style: [TextUtil.xl]),
            style: [Swap.rotate],
            classes: 'btn btn-circle',
          ),
        ],
        code: '''
Swap(
  onContent: Icon('close', style: [TextUtil.xl]),
  offContent: Icon('menu', style: [TextUtil.xl]),
  style: [Swap.rotate],
  classes: 'btn btn-circle',
),''',
      ),

      // Swap with flip effect
      ComponentPreview(
        title: 'Swap with flip effect',
        preview: [
          Swap(
            onContent: text('😈'),
            offContent: text('😇'),
            style: [Swap.flip],
            classes: 'text-8xl',
          ),
        ],
        code: '''
Swap(
  onContent: text('😈'),
  offContent: text('😇'),
  style: [Swap.flip],
  classes: 'text-8xl',
),''',
      ),

      // Swap activated by class
      ComponentPreview(
        title: 'Swap activated by class',
        preview: [
          // Normal swap
          Swap(onContent: text('🥵'), offContent: text('🥶'), classes: 'text-6xl'),
          // Always active swap
          Swap(
            onContent: text('🥳'),
            offContent: text('😭'),
            style: [Swap.active],
            classes: 'text-6xl',
          ),
        ],
        code: '''
// Normal swap
Swap(
  onContent: text('🥵'),
  offContent: text('🥶'),
  classes: 'text-6xl',
),
// Always active swap
Swap(
  onContent: text('🥳'),
  offContent: text('😭'),
  style: [Swap.active],
  classes: 'text-6xl',
),''',
      ),

      // Example with indeterminate state
      // The ComponentPreview widget that will be rendered on the page.
      const ComponentPreview(
        title: 'Swap with indeterminate state',
        description:
            'The indeterminate state is a visual-only state that must be set using JavaScript after the component renders.',
        preview: [
          // Instantiate our stateful helper for the live preview.
          _IndeterminateSwapPreview(),
        ],
        code: '''
// The `indeterminate` state is a JavaScript property, not an HTML attribute.
// It requires a stateful component and a post-render callback to set it.
class IndeterminateSwap extends StatefulComponent {
  @override
  State<IndeterminateSwap> createState() => _IndeterminateSwapState();
}

class _IndeterminateSwapState extends State<IndeterminateSwap> {
  final String _checkboxId = 'my-indeterminate-swap';

  @override
  void initState() {
    super.initState();
    if (kIsWeb) {
      // Find the checkbox by ID after it renders and set the JS property.
      Future.delayed(Duration.zero, () {
        final element = document.getElementById(_checkboxId) as HTMLInputElement?;
        element?.indeterminate = true;
      });
    }
  }

  @override
  Component build(BuildContext context) {
    // To apply the JS property, we manually construct the Swap's HTML.
    // This gives us direct access to the <input> element's ID.
    return label(
      classes: 'swap',
      [
        input(
          id: _checkboxId,
          type: InputType.checkbox,
          // Prevent clicks to keep it indeterminate for the demo.
          events: {'click': [(e) => if (kIsWeb) e.preventDefault()]},
        ),
        div(
          classes: 'swap-on',
          [Icon('check_circle', style: [TextUtil.xl2, TextUtil.success])],
        ),
        div(
          classes: 'swap-off',
          [Icon('cancel', style: [TextUtil.xl2, TextUtil.error])],
        ),
        div(
          classes: 'swap-indeterminate',
          [Icon('help', style: [TextUtil.xl2, TextUtil.warning])],
        ),
      ],
    );
  }
}
''',
      ),

      // Swap with initial checked state
      ComponentPreview(
        title: 'Swap with initial checked state',
        preview: [Swap(onContent: text('ON'), offContent: text('OFF'), checked: true)],
        code: '''
Swap(
  onContent: text('ON'),
  offContent: text('OFF'),
  checked: true,
),''',
      ),
    ]);
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/swap_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/tab_preview.dart -->
import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart' hide Spacing;

import '../../components/component_preview.dart';

class TabsPreview extends StatelessComponent {
  const TabsPreview({super.key});

  // Helper for SVG icons to keep the build method cleaner
  Component _liveIcon() => svg(
        attributes: {
          'xmlns': 'http://www.w3.org/2000/svg',
          'fill': 'none',
          'viewBox': '0 0 24 24',
          'stroke-width': '1.5',
          'stroke': 'currentColor',
        },
        classes: 'size-4 me-2', // Tailwind classes for size and margin
        [
          path(
            attributes: {
              'stroke-linecap': 'round',
              'stroke-linejoin': 'round',
              'd':
                  'M5.25 5.653c0-.856.917-1.398 1.667-.986l11.54 6.347a1.125 1.125 0 0 1 0 1.972l-11.54 6.347a1.125 1.125 0 0 1-1.667-.986V5.653Z',
            },
            [],
          ),
        ],
      );

  Component _laughIcon() => svg(
        attributes: {
          'xmlns': 'http://www.w3.org/2000/svg',
          'fill': 'none',
          'viewBox': '0 0 24 24',
          'stroke-width': '1.5',
          'stroke': 'currentColor',
        },
        classes: 'size-4 me-2',
        [
          path(
            attributes: {
              'stroke-linecap': 'round',
              'stroke-linejoin': 'round',
              'd':
                  'M15.182 15.182a4.5 4.5 0 0 1-6.364 0M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0ZM9.75 9.75c0 .414-.168.75-.375.75S9 10.164 9 9.75 9.168 9 9.375 9s.375.336.375.75Zm-.375 0h.008v.015h-.008V9.75Zm5.625 0c0 .414-.168.75-.375.75s-.375-.336-.375-.75.168-.75.375-.75.375.336.375.75Zm-.375 0h.008v.015h-.008V9.75Z',
            },
            [],
          ),
        ],
      );

  Component _loveIcon() => svg(
        attributes: {
          'xmlns': 'http://www.w3.org/2000/svg',
          'fill': 'none',
          'viewBox': '0 0 24 24',
          'stroke-width': '1.5',
          'stroke': 'currentColor',
        },
        classes: 'size-4 me-2',
        [
          path(
            attributes: {
              'stroke-linecap': 'round',
              'stroke-linejoin': 'round',
              'd':
                  'M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z',
            },
            [],
          ),
        ],
      );

  @override
  Component build(BuildContext context) {
    return div(classes: 'max-w-5xl mx-auto px-4 space-y-12', [
      // Added space-y-12 for spacing between previews
      // ~tabs
      ComponentPreview(
        title: 'Tabs',
        preview: [
          Tabs([
            Tab([text('Tab 1')]),
            Tab([text('Tab 2')], isActive: true),
            Tab([text('Tab 3')]),
          ]),
        ],
        code: '''
Tabs(
  [
    Tab([text('Tab 1')]),
    Tab([text('Tab 2')], isActive: true), // Or style: [Tab.active]
    Tab([text('Tab 3')]),
  ],
)
''',
      ),

      // ~tabs-border
      ComponentPreview(
        title: 'Bordered tabs',
        preview: [
          Tabs(
            [
              Tab([text('Tab 1')]),
              Tab([text('Tab 2')], isActive: true),
              Tab([text('Tab 3')]),
            ],
            style: [Tabs.border],
          ),
        ],
        code: '''
Tabs(
  [
    Tab([text('Tab 1')]),
    Tab([text('Tab 2')], isActive: true),
    Tab([text('Tab 3')]),
  ],
  style: [Tabs.border],
)
''',
      ),

      // ~tabs-lift
      ComponentPreview(
        title: 'Lifted tabs',
        preview: [
          Tabs(
            [
              Tab([text('Tab 1')]),
              Tab([text('Tab 2')], isActive: true),
              Tab([text('Tab 3')]),
            ],
            style: [Tabs.lift],
          ),
        ],
        code: '''
Tabs(
  [
    Tab([text('Tab 1')]),
    Tab([text('Tab 2')], isActive: true),
    Tab([text('Tab 3')]),
  ],
  style: [Tabs.lift],
)
''',
      ),

      // ~tabs-box
      ComponentPreview(
        title: 'Boxed tabs',
        preview: [
          Tabs(
            [
              Tab([text('Tab 1')]),
              Tab([text('Tab 2')], isActive: true),
              Tab([text('Tab 3')]),
            ],
            style: [Tabs.box],
          ),
        ],
        code: '''
Tabs(
  [
    Tab([text('Tab 1')]),
    Tab([text('Tab 2')], isActive: true),
    Tab([text('Tab 3')]),
  ],
  style: [Tabs.box],
)
''',
      ),

      // ~tabs-box using radio inputs
      const ComponentPreview(
        title: 'Boxed tabs using radio inputs',
        preview: [
          Tabs(
            [
              Tab(
                null, // No direct children for input tag, ariaLabel is used
                tag: 'input',
                name: 'my_tabs_1',
                ariaLabel: 'Tab 1',
              ),
              Tab(
                null,
                tag: 'input',
                name: 'my_tabs_1',
                ariaLabel: 'Tab 2',
                isChecked: true,
              ), // isActive for Tab component will add tab-active, isChecked for input
              Tab(null, tag: 'input', name: 'my_tabs_1', ariaLabel: 'Tab 3'),
            ],
            style: [Tabs.box],
          ),
        ],
        code: '''
// name of each tab group should be unique
Tabs(
  [
    Tab(null, tag: 'input', name: 'my_tabs_1', ariaLabel: 'Tab 1'),
    Tab(null, tag: 'input', name: 'my_tabs_1', ariaLabel: 'Tab 2', isChecked: true),
    Tab(null, tag: 'input', name: 'my_tabs_1', ariaLabel: 'Tab 3'),
  ],
  style: [Tabs.box],
)
''',
      ),

      // ~Sizes
      ComponentPreview(
        title: 'Tab sizes',
        layoutDirection: PreviewLayoutDirection.vertical, // To stack them
        preview: [
          Tabs(
            [
              Tab([text('Xsmall')]),
              Tab([text('Xsmall')], isActive: true),
              Tab([text('Xsmall')]),
            ],
            style: [Tabs.lift, Tabs.xs],
          ),
          Tabs(
            [
              Tab([text('Small')]),
              Tab([text('Small')], isActive: true),
              Tab([text('Small')]),
            ],
            style: [Tabs.lift, Tabs.sm],
          ),
          Tabs(
            [
              Tab([text('Medium')]),
              Tab([text('Medium')], isActive: true),
              Tab([text('Medium')]),
            ],
            style: [
              Tabs.lift,
              Tabs.md,
            ], // md is default but explicit for clarity
          ),
          Tabs(
            [
              Tab([text('Large')]),
              Tab([text('Large')], isActive: true),
              Tab([text('Large')]),
            ],
            style: [Tabs.lift, Tabs.lg],
          ),
          Tabs(
            [
              Tab([text('Xlarge')]),
              Tab([text('Xlarge')], isActive: true),
              Tab([text('Xlarge')]),
            ],
            style: [Tabs.lift, Tabs.xl],
          ),
        ],
        code: '''
// Xsmall
Tabs(
  [ /* Tabs */ ],
  style: [Tabs.lift, Tabs.xs],
),
// Small
Tabs(
  [ /* Tabs */ ],
  style: [Tabs.lift, Tabs.sm],
),
// Medium (Default)
Tabs(
  [ /* Tabs */ ],
  style: [Tabs.lift, Tabs.md], // Or just Tabs.lift
),
// Large
Tabs(
  [ /* Tabs */ ],
  style: [Tabs.lift, Tabs.lg],
),
// Xlarge
Tabs(
  [ /* Tabs */ ],
  style: [Tabs.lift, Tabs.xl],
)
''',
      ),

      // ~radio tabs-border + tab content
      ComponentPreview(
        title: 'Radio tabs with border and content',
        preview: [
          Tabs(
            [
              const Tab(null, tag: 'input', name: 'my_tabs_2', ariaLabel: 'Tab 1'),
              TabContent(
                [text('Tab content 1')],
                classes: 'border-base-300 bg-base-100 p-10',
              ),
              const Tab(
                null,
                tag: 'input',
                name: 'my_tabs_2',
                ariaLabel: 'Tab 2',
                isChecked: true,
              ),
              TabContent(
                [text('Tab content 2')],
                classes: 'border-base-300 bg-base-100 p-10',
              ),
              const Tab(null, tag: 'input', name: 'my_tabs_2', ariaLabel: 'Tab 3'),
              TabContent(
                [text('Tab content 3')],
                classes: 'border-base-300 bg-base-100 p-10',
              ),
            ],
            style: [Tabs.border],
            classes: 'w-full my-10 lg:mx-10', // As per DaisyUI example wrapper
          ),
        ],
        code: '''
Tabs(
  [
    Tab(null, tag: 'input', name: 'my_tabs_2', ariaLabel: 'Tab 1'),
    TabContent([text('Tab content 1')], classes: 'border-base-300 bg-base-100 p-10'),

    Tab(null, tag: 'input', name: 'my_tabs_2', ariaLabel: 'Tab 2', isChecked: true),
    TabContent([text('Tab content 2')], classes: 'border-base-300 bg-base-100 p-10'),

    Tab(null, tag: 'input', name: 'my_tabs_2', ariaLabel: 'Tab 3'),
    TabContent([text('Tab content 3')], classes: 'border-base-300 bg-base-100 p-10'),
  ],
  style: [Tabs.border],
  classes: 'w-full', // Example custom class
)
''',
      ),

      // ~radio tabs-lift + tab content
      ComponentPreview(
        title: 'Radio lifted tabs with content',
        preview: [
          Tabs(
            [
              const Tab(null, tag: 'input', name: 'my_tabs_3', ariaLabel: 'Tab 1'),
              TabContent(
                [text('Tab content 1')],
                classes: 'bg-base-100 border-base-300 p-6',
              ),
              const Tab(
                null,
                tag: 'input',
                name: 'my_tabs_3',
                ariaLabel: 'Tab 2',
                isChecked: true,
              ),
              TabContent(
                [text('Tab content 2')],
                classes: 'bg-base-100 border-base-300 p-6',
              ),
              const Tab(null, tag: 'input', name: 'my_tabs_3', ariaLabel: 'Tab 3'),
              TabContent(
                [text('Tab content 3')],
                classes: 'bg-base-100 border-base-300 p-6',
              ),
            ],
            style: [Tabs.lift],
            classes: 'w-full my-10 lg:mx-10',
          ),
        ],
        code: '''
Tabs(
  [
    Tab(null, tag: 'input', name: 'my_tabs_3', ariaLabel: 'Tab 1'),
    TabContent([text('Tab content 1')], classes: 'bg-base-100 border-base-300 p-6'),

    Tab(null, tag: 'input', name: 'my_tabs_3', ariaLabel: 'Tab 2', isChecked: true),
    TabContent([text('Tab content 2')], classes: 'bg-base-100 border-base-300 p-6'),

    Tab(null, tag: 'input', name: 'my_tabs_3', ariaLabel: 'Tab 3'),
    TabContent([text('Tab content 3')], classes: 'bg-base-100 border-base-300 p-6'),
  ],
  style: [Tabs.lift],
  classes: 'w-full',
)
''',
      ),

      // ~radio tabs-lift with icons + tab content
      // For this, since <label class="tab"> wraps the input and visual elements,
      // we will use Jaspr's `label()` component directly with `classes: 'tab'`
      // instead of the `Tab` Deepyr component for the tab items.
      ComponentPreview(
        title: 'Radio lifted tabs with icons and content',
        preview: [
          Tabs(
            [
              label(classes: 'tab', attributes: {
                'role': 'tab',
              }, [
                // Manually add role for label acting as tab
                input(
                  type: InputType.radio,
                  name: 'my_tabs_4',
                  events: {},
                ), // Empty events for static preview
                _liveIcon(),
                text(' Live'),
              ]),
              TabContent(
                [text('Tab content 1')],
                classes: 'bg-base-100 border-base-300 p-6',
              ),
              label(classes: 'tab tab-active', attributes: {
                'role': 'tab',
              }, [
                // Add tab-active for the active one
                input(
                  type: InputType.radio,
                  name: 'my_tabs_4',
                  attributes: {'checked': 'checked'},
                  events: {},
                ),
                _laughIcon(),
                text(' Laugh'),
              ]),
              TabContent(
                [text('Tab content 2')],
                classes: 'bg-base-100 border-base-300 p-6',
              ),
              label(classes: 'tab', attributes: {
                'role': 'tab',
              }, [
                input(type: InputType.radio, name: 'my_tabs_4', events: {}),
                _loveIcon(),
                text(' Love'),
              ]),
              TabContent(
                [text('Tab content 3')],
                classes: 'bg-base-100 border-base-300 p-6',
              ),
            ],
            style: [Tabs.lift],
            classes: 'w-full my-10 lg:mx-10',
          ),
        ],
        code: '''
Tabs(
  [
    label(classes: 'tab', attributes: {'role': 'tab'}, [
      input(type: InputType.radio, name: 'my_tabs_4'),
      _liveIcon(), // Assuming _liveIcon() is a Component
      text(' Live'),
    ]),
    TabContent([text('Tab content 1')], classes: 'bg-base-100 border-base-300 p-6'),

    label(classes: 'tab tab-active', attributes: {'role': 'tab'}, [ // Apply 'tab-active' for active state
      input(type: InputType.radio, name: 'my_tabs_4', attributes: {'checked': 'checked'}),
      _laughIcon(),
      text(' Laugh'),
    ]),
    TabContent([text('Tab content 2')], classes: 'bg-base-100 border-base-300 p-6'),

    label(classes: 'tab', attributes: {'role': 'tab'}, [
      input(type: InputType.radio, name: 'my_tabs_4'),
      _loveIcon(),
      text(' Love'),
    ]),
    TabContent([text('Tab content 3')], classes: 'bg-base-100 border-base-300 p-6'),
  ],
  style: [Tabs.lift],
  classes: 'w-full',
)
''',
      ),

      // ~radio tabs-lift + tab content on bottom
      ComponentPreview(
        title: 'Radio lifted tabs with content on bottom',
        preview: [
          Tabs(
            [
              const Tab(null, tag: 'input', name: 'my_tabs_5', ariaLabel: 'Tab 1'),
              TabContent(
                [text('Tab content 1')],
                classes: 'bg-base-100 border-base-300 p-6',
              ),
              const Tab(
                null,
                tag: 'input',
                name: 'my_tabs_5',
                ariaLabel: 'Tab 2',
                isChecked: true,
              ),
              TabContent(
                [text('Tab content 2')],
                classes: 'bg-base-100 border-base-300 p-6',
              ),
              const Tab(null, tag: 'input', name: 'my_tabs_5', ariaLabel: 'Tab 3'),
              TabContent(
                [text('Tab content 3')],
                classes: 'bg-base-100 border-base-300 p-6',
              ),
            ],
            style: [Tabs.lift, Tabs.bottom],
            classes: 'w-full my-10 lg:mx-10',
          ),
        ],
        code: '''
Tabs(
  [
    Tab(null, tag: 'input', name: 'my_tabs_5', ariaLabel: 'Tab 1'),
    TabContent([text('Tab content 1')], classes: 'bg-base-100 border-base-300 p-6'),
    Tab(null, tag: 'input', name: 'my_tabs_5', ariaLabel: 'Tab 2', isChecked: true),
    TabContent([text('Tab content 2')], classes: 'bg-base-100 border-base-300 p-6'),
    Tab(null, tag: 'input', name: 'my_tabs_5', ariaLabel: 'Tab 3'),
    TabContent([text('Tab content 3')], classes: 'bg-base-100 border-base-300 p-6'),
  ],
  style: [Tabs.lift, Tabs.bottom],
  classes: 'w-full',
)
''',
      ),

      // ~radio tabs-box + tab content
      ComponentPreview(
        title: 'Radio boxed tabs with content',
        preview: [
          Tabs(
            [
              const Tab(null, tag: 'input', name: 'my_tabs_6', ariaLabel: 'Tab 1'),
              TabContent(
                [text('Tab content 1')],
                classes: 'bg-base-100 border-base-300 p-6',
              ),
              const Tab(
                null,
                tag: 'input',
                name: 'my_tabs_6',
                ariaLabel: 'Tab 2',
                isChecked: true,
              ),
              TabContent(
                [text('Tab content 2')],
                classes: 'bg-base-100 border-base-300 p-6',
              ),
              const Tab(null, tag: 'input', name: 'my_tabs_6', ariaLabel: 'Tab 3'),
              TabContent(
                [text('Tab content 3')],
                classes: 'bg-base-100 border-base-300 p-6',
              ),
            ],
            style: [Tabs.box],
            classes: 'w-full my-10 lg:mx-10',
          ),
        ],
        code: '''
Tabs(
  [
    Tab(null, tag: 'input', name: 'my_tabs_6', ariaLabel: 'Tab 1'),
    TabContent([text('Tab content 1')], classes: 'bg-base-100 border-base-300 p-6'),
    Tab(null, tag: 'input', name: 'my_tabs_6', ariaLabel: 'Tab 2', isChecked: true),
    TabContent([text('Tab content 2')], classes: 'bg-base-100 border-base-300 p-6'),
    Tab(null, tag: 'input', name: 'my_tabs_6', ariaLabel: 'Tab 3'),
    TabContent([text('Tab content 3')], classes: 'bg-base-100 border-base-300 p-6'),
  ],
  style: [Tabs.box],
  classes: 'w-full',
)
''',
      ),

      // ~tabs-box with a horizontal scroll when there's no space
      ComponentPreview(
        title: 'Boxed tabs with horizontal scroll',
        preview: [
          div(classes: 'overflow-x-auto max-w-60', [
            // Wrapper for scroll
            Tabs(
              [
                const Tab(
                  null,
                  tag: 'input',
                  name: 'my_tabs_7',
                  ariaLabel: 'Tab title 1',
                  classes: 'z-10',
                ), // z-10 in DaisyUI example
                TabContent(
                  [text('Tab content 1')],
                  classes: 'sticky start-0 max-w-60 border-base-300 bg-base-100 p-6',
                ),
                const Tab(
                  null,
                  tag: 'input',
                  name: 'my_tabs_7',
                  ariaLabel: 'Tab title 2',
                  isChecked: true,
                  classes: 'z-10',
                ),
                TabContent(
                  [text('Tab content 2')],
                  classes: 'sticky start-0 max-w-60 border-base-300 bg-base-100 p-6',
                ),
                const Tab(
                  null,
                  tag: 'input',
                  name: 'my_tabs_7',
                  ariaLabel: 'Tab title 3',
                  classes: 'z-10',
                ),
                TabContent(
                  [text('Tab content 3')],
                  classes: 'sticky start-0 max-w-60 border-base-300 bg-base-100 p-6',
                ),
                const Tab(
                  null,
                  tag: 'input',
                  name: 'my_tabs_7',
                  ariaLabel: 'Tab title 4',
                  classes: 'z-10',
                ),
                TabContent(
                  [text('Tab content 4')],
                  classes: 'sticky start-0 max-w-60 border-base-300 bg-base-100 p-6',
                ),
              ],
              style: [
                Tabs.lift,
              ], // DaisyUI example uses tabs-lift here, not tabs-box for this specific scroll example
              classes: 'min-w-max', // To allow tabs to exceed container width
            ),
          ]),
        ],
        code: '''
div(classes: 'overflow-x-auto max-w-60', [
  Tabs(
    [
      Tab(null, tag: 'input', name: 'my_tabs_7', ariaLabel: 'Tab title 1', classes: 'z-10'),
      TabContent([text('Tab content 1')], classes: 'sticky start-0 max-w-60 border-base-300 bg-base-100 p-6'),
      Tab(null, tag: 'input', name: 'my_tabs_7', ariaLabel: 'Tab title 2', isChecked: true, classes: 'z-10'),
      TabContent([text('Tab content 2')], classes: 'sticky start-0 max-w-60 border-base-300 bg-base-100 p-6'),
      // ... more tabs and content
    ],
    style: [Tabs.lift], // Or Tabs.box depending on desired style
    classes: 'min-w-max',
  ),
])
''',
      ),

      // ~Tabs with custom color
      ComponentPreview(
        title: 'Tabs with custom color',
        description:
            'Use the `customStyles` property with `Styles(raw: {...})` to apply CSS variables.',
        preview: [
          Tabs(
            [
              Tab([text('Tab 1')]),
              Tab(
                [text('Tab 2')],
                isActive: true,
                // Use customStyles for applying raw CSS variables.
                customStyles: const Styles(raw: {
                  '--tab-bg': 'orange',
                  '--tab-border-color': 'red',
                }),
                // The `classes` property is still valid for utility classes.
                classes: 'text-primary-content',
              ),
              Tab([text('Tab 3')]),
            ],
            style: [Tabs.lift],
          ),
        ],
        code: '''
Tabs(
  [
    Tab([text('Tab 1')]),
    Tab(
      [text('Tab 2')],
      isActive: true,
      // Apply CSS variables using the `customStyles` property.
      customStyles: Styles(raw: {
        '--tab-bg': 'orange',
        '--tab-border-color': 'red',
      }),
      // Use `classes` for utility classes like text color.
      classes: 'text-primary-content',
    ),
    Tab([text('Tab 3')]),
  ],
  style: [Tabs.lift],
)
''',
      ),
    ]);
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/tab_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/textarea_preview.dart -->
// This file provides interactive examples for the `deepyr` Textarea component.
//
// It demonstrates the core functionality, various styles, sizes, colors,
// and advanced compositions with other deepyr components like `Fieldset`.

import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart';

import '../../components/component_preview.dart';

/// Renders a collection of [ComponentPreview] widgets to showcase the
/// functionality and styling of the `deepyr` [Textarea] component.
class TextareaPreview extends StatelessComponent {
  const TextareaPreview({super.key});

  @override
  Component build(BuildContext context) {
    return div(classes: 'max-w-5xl mx-auto px-4 space-y-12', [
      // ~Textarea
      ComponentPreview(
        title: 'Textarea',
        preview: [
          Textarea(placeholder: 'Bio'),
        ],
        code: '''
Textarea(placeholder: 'Bio')
''',
      ),

      // ~Ghost (no background)
      ComponentPreview(
        title: 'Ghost (no background)',
        preview: [
          Textarea(
            placeholder: 'Bio',
            style: [Textarea.ghost],
          ),
        ],
        code: '''
Textarea(
  placeholder: 'Bio',
  style: [Textarea.ghost],
)''',
      ),

      // ~With form control and labels
      ComponentPreview(
        title: 'With form control and labels',
        preview: [
          Fieldset(
            [
              Legend([text('Your bio')]),
              Textarea(placeholder: 'Bio', style: [Size.h24]),
              FormLabel([text('Optional')]),
            ],
            style: [Size.wxs],
          ),
        ],
        code: '''
Fieldset(
  [
    Legend([text('Your bio')]),
    Textarea(placeholder: 'Bio'style: [Size.h24]),
    FormLabel([text('Optional')]),
  ],
  style: [Size.wxs],
)''',
      ),

      // ~Textarea colors
      ComponentPreview(
        title: 'Textarea colors',
        preview: [
          Container(
            [
              Textarea(placeholder: 'Primary', style: [Textarea.primary]),
              Textarea(placeholder: 'Secondary', style: [Textarea.secondary]),
              Textarea(placeholder: 'Accent', style: [Textarea.accent]),
              Textarea(placeholder: 'Neutral', style: [Textarea.neutral]),
              Textarea(placeholder: 'Info', style: [Textarea.info]),
              Textarea(placeholder: 'Success', style: [Textarea.success]),
              Textarea(placeholder: 'Warning', style: [Textarea.warning]),
              Textarea(placeholder: 'Error', style: [Textarea.error]),
            ],
            style: [Layout.grid, Layout.gap4, Size.wxs],
          ),
        ],
        code: '''
Textarea(placeholder: 'Primary', style: [Textarea.primary]),
Textarea(placeholder: 'Secondary', style: [Textarea.secondary]),
Textarea(placeholder: 'Accent', style: [Textarea.accent]),
Textarea(placeholder: 'Neutral', style: [Textarea.neutral]),
Textarea(placeholder: 'Info', style: [Textarea.info]),
Textarea(placeholder: 'Success', style: [Textarea.success]),
Textarea(placeholder: 'Warning', style: [Textarea.warning]),
Textarea(placeholder: 'Error', style: [Textarea.error]),''',
      ),

      // ~Sizes
      ComponentPreview(
        title: 'Sizes',
        preview: [
          Container(
            [
              Textarea(placeholder: 'Xsmall', style: [Textarea.xs]),
              Textarea(placeholder: 'Small', style: [Textarea.sm]),
              Textarea(placeholder: 'Medium', style: [Textarea.md]),
              Textarea(placeholder: 'Large', style: [Textarea.lg]),
              Textarea(placeholder: 'Xlarge', style: [Textarea.xl]),
            ],
            style: [Layout.flex, Layout.flexCol, Layout.gap4, Size.wFull, Alignment.itemsCenter],
          ),
        ],
        code: '''
Textarea(placeholder: 'Xsmall', style: [Textarea.xs]),
Textarea(placeholder: 'Small', style: [Textarea.sm]),
Textarea(placeholder: 'Medium', style: [Textarea.md]),
Textarea(placeholder: 'Large', style: [Textarea.lg]),
Textarea(placeholder: 'Xlarge', style: [Textarea.xl]),''',
      ),

      // ~Disabled
      ComponentPreview(
        title: 'Disabled',
        preview: [
          Textarea(placeholder: "You can't touch this", disabled: true),
        ],
        code: '''
Textarea(placeholder: "You can't touch this", disabled: true)''',
      ),
    ]);
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/textarea_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/theme_controller_preview.dart -->
import 'dart:async';

import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart' hide Spacing;

import '../../components/component_preview.dart';

/// Renders a collection of [ComponentPreview] widgets to showcase the
/// functionality and styling of the `deepyr` [ThemeControllerCheckbox] and
/// [ThemeControllerRadio] components.
///
/// This component also ensures that the `theme-change.js` library, which powers
/// the theme switching, is initialized.
class ThemeControllerPreview extends StatefulComponent {
  const ThemeControllerPreview({super.key});

  @override
  State<ThemeControllerPreview> createState() => _ThemeControllerPreviewState();
}

class _ThemeControllerPreviewState extends State<ThemeControllerPreview> {
  @override
  void initState() {
    super.initState();
    // The `theme-change` JavaScript library is required for the theme controller
    // to function. We initialize the service here to ensure the script is loaded.
    if (kIsWeb) unawaited(ThemeService.instance.initialize());
  }

  @override
  Component build(BuildContext context) {
    return div(classes: 'max-w-5xl mx-auto px-4 space-y-12', [
      // ~Theme Controller using a toggle
      const ComponentPreview(
        title: 'Theme Controller using a toggle',
        description: 'A checkbox styled as a toggle to switch between two themes.',
        preview: [
          ThemeControllerCheckbox(
            // The theme to apply when checked.
            value: DaisyTheme.dark,
            // The theme to apply when unchecked.
            toggleTheme: DaisyTheme.light,
            name: 'theme-toggle-1',
            style: [ThemeControllerCheckbox.toggle],
          ),
        ],
        code: '''
// This will toggle the <html> data-theme attribute between 'dark' and 'light'.
ThemeControllerCheckbox(
  value: DaisyTheme.dark,
  toggleTheme: DaisyTheme.light,
  name: 'theme-toggle-1', // A unique name for the controller
  style: [ThemeControllerCheckbox.toggle],
)''',
      ),

      // ~Theme Controller using a checkbox
      const ComponentPreview(
        title: 'Theme Controller using a checkbox',
        description: 'A standard checkbox that toggles a single theme on and off.',
        preview: [
          ThemeControllerCheckbox(
            value: DaisyTheme.retro,
            name: 'theme-checkbox-1',
          ),
        ],
        code: '''
// When `toggleTheme` is not provided, checking this box will set
// data-theme="retro", and unchecking it will remove the attribute.
ThemeControllerCheckbox(
  value: DaisyTheme.retro,
  name: 'theme-checkbox-1',
)''',
      ),

      // ~Theme Controller with label and text
      ComponentPreview(
        title: 'Theme Controller with label and text',
        preview: [
          label(classes: 'flex cursor-pointer gap-2', [
            span(classes: 'label-text', [text('Light')]),
            const ThemeControllerCheckbox(
              value: DaisyTheme.dark,
              toggleTheme: DaisyTheme.light,
              name: 'theme-toggle-2',
              style: [ThemeControllerCheckbox.toggle],
            ),
            span(classes: 'label-text', [text('Dark')]),
          ]),
        ],
        code: '''
// Wrap the controller and text in a Jaspr `label` for better semantics.
label(classes: 'flex cursor-pointer gap-2', [
  span(classes: 'label-text', [text('Light')]),
  ThemeControllerCheckbox(
    value: DaisyTheme.dark,
    toggleTheme: DaisyTheme.light,
    name: 'theme-toggle-2',
    style: [ThemeControllerCheckbox.toggle],
  ),
  span(classes: 'label-text', [text('Dark')]),
])''',
      ),

      // ~Theme Controller with icons
      ComponentPreview(
        title: 'Theme Controller with icons',
        preview: [
          label(classes: 'swap swap-rotate', [
            // This is a more advanced pattern combining Swap and ThemeController.
            const ThemeControllerCheckbox(
              value: DaisyTheme.dark,
              toggleTheme: DaisyTheme.light,
              name: 'theme-toggle-3',
              classes: 'hidden', // Hide the actual checkbox
            ),
            // Sun icon for the "off" state (light theme)
            Icon('light_mode', classes: 'swap-off fill-current w-6 h-6'),
            // Moon icon for the "on" state (dark theme)
            Icon('dark_mode', classes: 'swap-on fill-current w-6 h-6'),
          ]),
        ],
        code: '''
// For an animated icon toggle, combine the ThemeController with a Swap component.
label(classes: 'swap swap-rotate', [
  // The ThemeController handles the logic but is visually hidden.
  ThemeControllerCheckbox(
    value: DaisyTheme.dark,
    toggleTheme: DaisyTheme.light,
    name: 'theme-toggle-3',
    classes: 'hidden',
  ),
  // The icons provide the visual feedback.
  Icon('light_mode', classes: 'swap-off fill-current w-6 h-6'),
  Icon('dark_mode', classes: 'swap-on fill-current w-6 h-6'),
])''',
      ),

      // ~Theme Controller using radio inputs
      const ComponentPreview(
        title: 'Theme Controller using radio inputs',
        description:
            'Use radio buttons to select one theme from a list. All radios in a group must share the same `name`.',
        preview: [
          // The `theme-change.js` library will automatically handle checking the
          // correct radio based on the current `data-theme`, so no state management is needed here.
          ThemeControllerRadio(value: DaisyTheme.light, name: 'theme-radios', isChecked: true),
          ThemeControllerRadio(value: DaisyTheme.dark, name: 'theme-radios'),
          ThemeControllerRadio(value: DaisyTheme.cyberpunk, name: 'theme-radios'),
          ThemeControllerRadio(value: DaisyTheme.valentine, name: 'theme-radios'),
        ],
        code: '''
// Each radio represents a specific theme.
ThemeControllerRadio(value: DaisyTheme.light, name: 'theme-radios', isChecked: true),
ThemeControllerRadio(value: DaisyTheme.dark, name: 'theme-radios'),
ThemeControllerRadio(value: DaisyTheme.cyberpunk, name: 'theme-radios'),
ThemeControllerRadio(value: DaisyTheme.valentine, name: 'theme-radios'),
''',
      ),

      // ~Theme Controller using radio buttons
      const ComponentPreview(
        title: 'Theme Controller using radio buttons',
        description: 'Style the radio inputs as buttons and group them with `Join`.',
        preview: [
          Join([
            ThemeControllerRadio(
              value: DaisyTheme.light,
              name: 'theme-buttons',
              style: [ThemeControllerRadio.button],
              attributes: {'aria-label': 'Light'},
            ),
            ThemeControllerRadio(
              value: DaisyTheme.dark,
              name: 'theme-buttons',
              style: [ThemeControllerRadio.button],
              attributes: {'aria-label': 'Dark'},
            ),
            ThemeControllerRadio(
              value: DaisyTheme.luxury,
              name: 'theme-buttons',
              style: [ThemeControllerRadio.button],
              attributes: {'aria-label': 'Luxury'},
            ),
          ]),
        ],
        code: '''
// The smart `Join` component automatically adds the `join-item` class.
Join([
  ThemeControllerRadio(
    value: DaisyTheme.light,
    name: 'theme-buttons',
    style: [ThemeControllerRadio.button],
    attributes: {'aria-label': 'Light'}, // The aria-label becomes the visible text
  ),
  ThemeControllerRadio(
    value: DaisyTheme.dark,
    name: 'theme-buttons',
    style: [ThemeControllerRadio.button],
    attributes: {'aria-label': 'Dark'},
  ),
  ThemeControllerRadio(
    value: DaisyTheme.luxury,
    name: 'theme-buttons',
    style: [ThemeControllerRadio.button],
    attributes: {'aria-label': 'Luxury'},
  ),
])''',
      ),

      // ~Theme Controller using a dropdown
      ComponentPreview(
        title: 'Theme Controller using a dropdown',
        preview: [
          Dropdown(
            style: [Dropdown.end],
            classes: 'mb-72',
            trigger: Button([
              text('Theme'),
              Icon('expand_more', style: [TextUtil.sm]),
            ]),
            content: DropdownContent(
              [
                // The Menu component provides structure for the dropdown items.
                Menu(
                  [
                    // Each MenuItem wraps a ThemeControllerRadio styled as a button.
                    for (final theme in DaisyTheme.predefined)
                      MenuItem([
                        ThemeControllerRadio(
                          value: theme,
                          name: 'theme-dropdown',
                          style: [ThemeControllerRadio.button],
                          // Use classes for additional button styling not covered by modifiers.
                          classes: 'btn-sm btn-block btn-ghost justify-start',
                          attributes: {'aria-label': theme.value.capitalize()},
                        ),
                      ]),
                  ],
                ),
              ],
              tag: 'ul',
              style: [
                DropdownContent.menu,
                Size.w(52),
                Spacing.p(2),
                Spacing.mt(4),
                Size.maxH96,
                Layout.overflowYAuto,
                Effects.shadow,
                BgUtil.base300,
                Effects.roundedBox,
                Layout.z(50),
              ],
            ),
          ),
        ],
        code: '''
Dropdown(
  method: DropdownMethod.details,
  style: [Dropdown.end],
  trigger: Button([
    text('Theme'),
    Icon('expand_more', style: [TextUtil.sm]),
  ]),
  content: DropdownContent(
    [
      Menu([
        for (final theme in DaisyTheme.predefined)
          MenuItem([
            ThemeControllerRadio(
              value: theme,
              name: 'theme-dropdown',
              style: [ThemeControllerRadio.button],
              classes: 'btn-sm btn-block btn-ghost justify-start',
              attributes: {'aria-label': theme.value.capitalize()},
            ),
          ]),
      ]),
    ],
    tag: 'ul',
    style: [ /* ... type-safe styles for the dropdown panel ... */ ],
  ),
)
''',
      ),
    ]);
  }
}

// Helper extension to capitalize theme names for display.
extension on String {
  String capitalize() {
    if (isEmpty) return this;
    return this[0].toUpperCase() + substring(1);
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/theme_controller_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/toggle_preview.dart -->
// This file provides interactive examples for the `deepyr` Toggle component.
//
// It demonstrates the core functionality, various styles, sizes, colors,
// and the correct state management pattern for a controlled component. It also
// covers advanced use cases like the indeterminate state and custom icons.

import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart';
import 'package:universal_web/web.dart' show Event, HTMLInputElement, document;

import '../../components/component_preview.dart';

// #region Stateful Helper Components

/// A simple stateful example to demonstrate the controlled component pattern.
class _StatefulToggleExample extends StatefulComponent {
  const _StatefulToggleExample({this.isChecked = true});
  final bool isChecked;

  @override
  State<_StatefulToggleExample> createState() => _StatefulToggleExampleState();
}

class _StatefulToggleExampleState extends State<_StatefulToggleExample> {
  late bool _isChecked;

  @override
  void initState() {
    super.initState();
    _isChecked = component.isChecked;
  }

  @override
  Component build(BuildContext context) {
    return Toggle(
      isChecked: _isChecked,
      onToggle: (newValue) {
        setState(() => _isChecked = newValue);
      },
    );
  }
}

/// A stateful wrapper to demonstrate the `indeterminate` property of a toggle,
/// which must be set via JavaScript after the element is rendered.
class _IndeterminateTogglePreview extends StatefulComponent {
  const _IndeterminateTogglePreview();

  @override
  State<_IndeterminateTogglePreview> createState() => _IndeterminateTogglePreviewState();
}

class _IndeterminateTogglePreviewState extends State<_IndeterminateTogglePreview> {
  final String _toggleId = 'indeterminate-toggle-example';

  @override
  void initState() {
    super.initState();
    if (kIsWeb) {
      // The `indeterminate` property is not an HTML attribute and must be set
      // on the DOM element's JavaScript object after it has been rendered.
      Future.delayed(Duration.zero, () {
        final element = document.getElementById(_toggleId) as HTMLInputElement?;
        if (element != null) {
          element.indeterminate = true;
        }
      });
    }
  }

  @override
  Component build(BuildContext context) {
    // We prevent default click behavior to keep it in the indeterminate state
    // for this preview, mirroring the DaisyUI documentation's example.
    return Toggle(
      id: _toggleId,
      eventHandlers: {
        'click': [
          (event) {
            if (kIsWeb) event.preventDefault();
          },
        ],
      },
    );
  }
}

/// A stateful wrapper for the toggle that contains custom icons.
class _IconTogglePreview extends StatefulComponent {
  const _IconTogglePreview();

  @override
  State<_IconTogglePreview> createState() => _IconTogglePreviewState();
}

class _IconTogglePreviewState extends State<_IconTogglePreview> {
  bool _isChecked = false;

  // Helper function to create the "check" SVG icon.
  Component _checkIcon() => svg(
    attributes: {
      'aria-label': 'enabled',
      'xmlns': 'http://www.w3.org/2000/svg',
      'viewBox': '0 0 24 24',
    },
    [
      Component.element(
        tag: 'g',
        attributes: {
          'stroke-linejoin': 'round',
          'stroke-linecap': 'round',
          'stroke-width': '4',
          'fill': 'none',
          'stroke': 'currentColor',
        },
        children: [path(d: 'M20 6 9 17l-5-5', [])],
      ),
    ],
  );

  // Helper function to create the "cross" SVG icon.
  Component _crossIcon() => svg(
    attributes: {
      'aria-label': 'disabled',
      'xmlns': 'http://www.w3.org/2000/svg',
      'viewBox': '0 0 24 24',
      'fill': 'none',
      'stroke': 'currentColor',
      'stroke-width': '4',
      'stroke-linecap': 'round',
      'stroke-linejoin': 'round',
    },
    [
      path(d: 'M18 6 6 18', []),
      path(d: 'm6 6 12 12', []),
    ],
  );

  @override
  Component build(BuildContext context) {
    // This pattern uses a <label> with the 'toggle' class containing an <input> and the icons.
    return label(
      classes: 'toggle text-base-content',
      [
        input(
          type: InputType.checkbox,
          attributes: {
            if (_isChecked) 'checked': '',
          },
          events: {
            'change': (dynamic rawEvent) {
              if (kIsWeb) {
                final event = rawEvent as Event;
                final target = event.target! as HTMLInputElement;
                setState(() => _isChecked = target.checked);
              }
            },
          },
        ),
        _checkIcon(),
        _crossIcon(),
      ],
    );
  }
}

/// A stateful wrapper for the "With fieldset and label" example.
class _ToggleWithFieldsetExample extends StatefulComponent {
  const _ToggleWithFieldsetExample();

  @override
  State<_ToggleWithFieldsetExample> createState() => _ToggleWithFieldsetExampleState();
}

class _ToggleWithFieldsetExampleState extends State<_ToggleWithFieldsetExample> {
  bool _rememberMe = true;

  @override
  Component build(BuildContext context) {
    return Fieldset(
      [
        Legend([text('Login options')]),
        label(
          [
            Toggle(
              isChecked: _rememberMe,
              onToggle: (val) => setState(() => _rememberMe = val),
            ),
            span([text('Remember me')], classes: 'label-text ml-2'),
          ],
          classes: 'label cursor-pointer justify-start',
        ),
      ],
      style: [Size.w64],
      classes: 'p-4 bg-base-100 border border-base-300 rounded-box',
    );
  }
}

/// A stateful wrapper specifically for the custom color toggle example.
class _CustomColorTogglePreview extends StatefulComponent {
  const _CustomColorTogglePreview();

  @override
  State<_CustomColorTogglePreview> createState() => _CustomColorTogglePreviewState();
}

class _CustomColorTogglePreviewState extends State<_CustomColorTogglePreview> {
  bool _isChecked = true;

  @override
  Component build(BuildContext context) {
    return Toggle(
      isChecked: _isChecked,
      onToggle: (newValue) {
        setState(() => _isChecked = newValue);
      },
      classes:
          'border-indigo-600 bg-indigo-500 checked:bg-orange-400 checked:text-orange-800 checked:border-orange-500',
    );
  }
}

// #endregion

/// Renders a collection of [ComponentPreview] widgets to showcase the
/// functionality and styling of the `deepyr` [Toggle] component.
class TogglePreview extends StatelessComponent {
  const TogglePreview({super.key});

  @override
  Component build(BuildContext context) {
    return div(classes: 'max-w-5xl mx-auto px-4 space-y-12', [
      // ~Toggle
      const ComponentPreview(
        title: 'Toggle',
        description: 'A toggle is a controlled component. Its state must be managed by a parent.',
        preview: [
          _StatefulToggleExample(),
        ],
        code: '''
// The toggle component
Toggle(isChecked: true);


// A simple stateful wrapper to manage the toggle's state
class MyToggle extends StatefulComponent {
  bool _isChecked = true;

  @override
  State<MyToggle> createState() => _MyToggleState();
}

class _MyToggleState extends State<MyToggle> {
  @override
  Component build(BuildContext context) {
    return Toggle(
      isChecked: _isChecked,
      onToggle: (newValue) {
        setState(() => _isChecked = newValue);
      },
    );
  }
}
''',
      ),

      // ~With fieldset and label
      const ComponentPreview(
        title: 'With fieldset and label',
        preview: [
          _ToggleWithFieldsetExample(),
        ],
        code: '''
class ToggleWithFieldset extends StatefulComponent {
  bool _rememberMe = true;

  @override
  State<ToggleWithFieldset> createState() => _ToggleWithFieldsetState();
}

class _ToggleWithFieldsetState extends State<ToggleWithFieldset> {
  @override
  Component build(BuildContext context) {
    return Fieldset(
      [
        Legend([text('Login options')]),
        // For labels with interactive elements, use Jaspr's primitive `label()`.
        label(
          [
            Toggle(
              isChecked: _rememberMe,
              onToggle: (val) => setState(() => _rememberMe = val),
            ),
            span([text('Remember me')], classes: 'label-text ml-2'),
          ],
          classes: 'label cursor-pointer justify-start',
        ),
      ],
      style: [Size.w64],
      classes: 'p-4 bg-base-100 border border-base-300 rounded-box',
    );
  }
}
''',
      ),

      // ~Sizes
      const ComponentPreview(
        title: 'Sizes',
        preview: [
          Toggle(isChecked: true, style: [Toggle.xs]),
          Toggle(isChecked: true, style: [Toggle.sm]),
          Toggle(isChecked: true, style: [Toggle.md]),
          Toggle(isChecked: true, style: [Toggle.lg]),
          Toggle(isChecked: true, style: [Toggle.xl]),
        ],
        code: '''
Toggle(isChecked: true, style: [Toggle.xs]),
Toggle(isChecked: true, style: [Toggle.sm]),
Toggle(isChecked: true, style: [Toggle.md]), // Default
Toggle(isChecked: true, style: [Toggle.lg]),
Toggle(isChecked: true, style: [Toggle.xl]),''',
      ),

      // ~Colors
      const ComponentPreview(
        title: 'Colors',
        preview: [
          Toggle(isChecked: true, style: [Toggle.primary]),
          Toggle(isChecked: true, style: [Toggle.secondary]),
          Toggle(isChecked: true, style: [Toggle.accent]),
          Toggle(isChecked: true, style: [Toggle.neutral]),
          Toggle(isChecked: true, style: [Toggle.info]),
          Toggle(isChecked: true, style: [Toggle.success]),
          Toggle(isChecked: true, style: [Toggle.warning]),
          Toggle(isChecked: true, style: [Toggle.error]),
        ],
        code: '''
Toggle(isChecked: true, style: [Toggle.primary]),
Toggle(isChecked: true, style: [Toggle.secondary]),
Toggle(isChecked: true, style: [Toggle.accent]),
Toggle(isChecked: true, style: [Toggle.neutral]),
Toggle(isChecked: true, style: [Toggle.info]),
Toggle(isChecked: true, style: [Toggle.success]),
Toggle(isChecked: true, style: [Toggle.warning]),
Toggle(isChecked: true, style: [Toggle.error]),''',
      ),

      // ~Disabled
      const ComponentPreview(
        title: 'Disabled',
        preview: [
          Toggle(disabled: true),
          Toggle(isChecked: true, disabled: true),
        ],
        code: '''
Toggle(disabled: true),
Toggle(isChecked: true, disabled: true),''',
      ),

      // ~Indeterminate
      const ComponentPreview(
        title: 'Indeterminate',
        description:
            'The indeterminate state can only be set using JavaScript after the element has rendered.',
        preview: [
          _IndeterminateTogglePreview(),
        ],
        code: '''
// The `indeterminate` property must be set on the DOM element after it renders.
// This requires a stateful component and a way to reference the element, like an ID.

class MyIndeterminateToggle extends StatefulComponent {
  final String _toggleId = 'my-unique-id';

  @override
  State<MyIndeterminateToggle> createState() => _MyIndeterminateToggleState();
}

class _MyIndeterminateToggleState extends State<MyIndeterminateToggle> {
  @override
  void initState() {
    super.initState();
    if (kIsWeb) {
      // Set the property after the component has been added to the DOM.
      Future.delayed(Duration.zero, () {
        final element = document.getElementById(widget._toggleId) as HTMLInputElement?;
        if (element != null) {
          element.indeterminate = true;
        }
      });
    }
  }

  @override
  Component build(BuildContext context) {
    return Toggle(id: widget._toggleId);
  }
}
''',
      ),

      // ~Toggle with icons inside
      const ComponentPreview(
        // TODO: Replace label (jaspr) with Label (Deepyr) component.
        title: 'Toggle with icons inside',
        description:
            'Use a label with the `toggle` class, and place the checkbox and icons inside.',
        preview: [
          _IconTogglePreview(),
        ],
        code: '''
// This example requires a stateful component to manage the checked state.
class IconToggle extends StatefulComponent {
  @override
  State<IconToggle> createState() => _IconToggleState();
}

class _IconToggleState extends State<IconToggle> {
  bool _isChecked = false;

  @override
  Component build(BuildContext context) {
    return label(
      classes: 'toggle text-base-content',
      [
        input(
          type: InputType.checkbox,
          // Conditionally add the 'checked' attribute
          attributes: { if (_isChecked) 'checked': '' },
          events: {
            'change': (dynamic rawEvent) {
              // Handle the raw DOM event to get the new state
              if (kIsWeb) {
                final event = rawEvent as Event;
                final target = event.target as HTMLInputElement;
                setState(() => _isChecked = target.checked);
              }
            }
          },
        ),
        // Your SVG icon components here
        _checkIcon(),
        _crossIcon(),
      ],
    );
  }
}
''',
      ),

      // ~Toggle with custom colors
      const ComponentPreview(
        title: 'Toggle with custom colors',
        description: 'Use the `classes` property for custom Tailwind utilities.',
        preview: [
          _CustomColorTogglePreview(),
        ],
        code: '''
Toggle(
  isChecked: _isChecked,
  onToggle: (newValue) => setState(() => _isChecked = newValue),
  classes: 'border-indigo-600 bg-indigo-500 checked:bg-orange-400 checked:text-orange-800 checked:border-orange-500',
);
''',
      ),
    ]);
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/toggle_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/tooltip_preview.dart -->
import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart' hide Spacing;

import '../../components/component_preview.dart';

/// Renders a collection of [ComponentPreview] widgets to showcase the
/// functionality and styling of the `deepyr` [Tooltip] component.
class TooltipPreview extends StatelessComponent {
  const TooltipPreview({super.key});

  @override
  Component build(BuildContext context) {
    return div(classes: 'max-w-5xl mx-auto px-4 space-y-12', [
      // ~Tooltip
      ComponentPreview(
        title: 'Tooltip',
        preview: [
          Tooltip(
            [
              Button([text('Hover me')]),
            ],
            tip: 'hello',
          ),
        ],
        code: '''
Tooltip(
  [Button([text('Hover me')])],
  tip: 'hello',
)''',
      ),

      // ~Tooltip with tooltip-content
      ComponentPreview(
        title: 'Tooltip with rich HTML content',
        description:
            'Use the `content` property with a `TooltipContent` component for rich content instead of the `tip` property.',
        preview: [
          Container(
            [
              Tooltip(
                [
                  Button([text('Hover me')]),
                ],
                content: TooltipContent([
                  div(
                    [text('Wow!')],
                    classes: 'animate-bounce text-orange-400 -rotate-10 text-2xl font-black',
                  ),
                ]),
              ),
            ],
            style: [Spacing.mt(12)], // Add margin for visibility
          ),
        ],
        code: '''
Tooltip(
  [Button([text('Hover me')])],
  content: TooltipContent([
    div(
      [text('Wow!')],
      // Use `classes` for custom Tailwind utilities.
      classes: 'animate-bounce text-orange-400 -rotate-10 text-2xl font-black',
    ),
  ]),
)''',
      ),

      // ~Force open
      ComponentPreview(
        title: 'Force open',
        preview: [
          Tooltip(
            [
              Button([text('Force open')]),
            ],
            tip: 'hello',
            style: [Tooltip.open],
          ),
        ],
        code: '''
Tooltip(
  [Button([text('Force open')])],
  tip: 'hello',
  style: [Tooltip.open],
)''',
      ),

      // ~Placement
      ComponentPreview(
        title: 'Tooltip Placement',
        preview: [
          Tooltip(
            [
              Button([text('Top')]),
            ],
            tip: 'hello',
            style: [Tooltip.top],
          ),
          Tooltip(
            [
              Button([text('Bottom')]),
            ],
            tip: 'hello',
            style: [Tooltip.bottom],
          ),
          Tooltip(
            [
              Button([text('Left')]),
            ],
            tip: 'hello',
            style: [Tooltip.left],
          ),
          Tooltip(
            [
              Button([text('Right')]),
            ],
            tip: 'hello',
            style: [Tooltip.right],
          ),
        ],
        code: '''
// Default is `top`, but can be set explicitly.
Tooltip([Button([text('Top')])], tip: 'hello', style: [Tooltip.top]),
Tooltip([Button([text('Bottom')])], tip: 'hello', style: [Tooltip.bottom]),
Tooltip([Button([text('Left')])], tip: 'hello', style: [Tooltip.left]),
Tooltip([Button([text('Right')])], tip: 'hello', style: [Tooltip.right]),''',
      ),

      // ~Colors
      ..._buildColorPreviews(),

      // ~Responsive tooltip
      ComponentPreview(
        title: 'Responsive tooltip',
        description: 'This tooltip will only show on large screens and up.',
        preview: [
          Tooltip(
            [
              Button([text('Hover me')]),
            ],
            tip: 'hello',
            // The `tooltip` class itself is made responsive here.
            // Since this is not a style modifier, we use the `classes` property.
            // The base `tooltip` class is still added by the component.
            classes: 'lg:tooltip',
          ),
        ],
        code: '''
Tooltip(
  [Button([text('Hover me')])],
  tip: 'hello',
  // When a component's base class needs a responsive prefix,
  // use the `classes` property as an escape hatch.
  classes: 'lg:tooltip',
)''',
      ),
    ]);
  }

  /// Helper function to generate all the color previews to avoid repetition.
  Iterable<Component> _buildColorPreviews() {
    final colors = {
      'Neutral': {'style': Tooltip.neutral, 'button': Button.neutral},
      'Primary': {'style': Tooltip.primary, 'button': Button.primary},
      'Secondary': {'style': Tooltip.secondary, 'button': Button.secondary},
      'Accent': {'style': Tooltip.accent, 'button': Button.accent},
      'Info': {'style': Tooltip.info, 'button': Button.info},
      'Success': {'style': Tooltip.success, 'button': Button.success},
      'Warning': {'style': Tooltip.warning, 'button': Button.warning},
      'Error': {'style': Tooltip.error, 'button': Button.error},
    };

    return colors.entries.map((entry) {
      final name = entry.key;
      final tooltipStyle = (entry.value['style'] != null)
          ? entry.value['style']! as TooltipStyling
          : Tooltip.primary;
      final buttonStyle = (entry.value['button'] != null)
          ? entry.value['button']! as ButtonStyling
          : Button.primary;

      return ComponentPreview(
        title: '$name color',
        preview: [
          Tooltip(
            [
              Button([text(name.toLowerCase())], style: [buttonStyle]),
            ],
            tip: name.toLowerCase(),
            style: [Tooltip.open, tooltipStyle],
          ),
        ],
        code:
            '''
Tooltip(
  [Button([text('${name.toLowerCase()}')], style: [Button.${name.toLowerCase()}])],
  tip: '${name.toLowerCase()}',
  style: [Tooltip.open, Tooltip.${name.toLowerCase()}],
)''',
      );
    });
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/tooltip_preview.dart -->

<!-- BEGIN FILE: examples/deepyr_example/lib/pages/preview/validator_preview.dart -->
// This file provides interactive examples for the `deepyr` ValidatorHint component.
//
// It demonstrates how the hint automatically appears for various form inputs
// when they have HTML5 validation attributes and are in an invalid state.

import 'package:deepyr/deepyr.dart';
import 'package:jaspr/jaspr.dart' hide Spacing;

import '../../components/component_preview.dart';

// #region Stateful Helper Components

/// A stateful helper to demonstrate the Checkbox with a validator.
class _StatefulCheckboxValidator extends StatefulComponent {
  const _StatefulCheckboxValidator();

  @override
  State<_StatefulCheckboxValidator> createState() => _StatefulCheckboxValidatorState();
}

class _StatefulCheckboxValidatorState extends State<_StatefulCheckboxValidator> {
  bool isChecked = false;

  @override
  Component build(BuildContext context) {
    return Checkbox(
      isChecked: isChecked,
      onToggle: (val) => setState(() => isChecked = val),
      // The `validator` class must be added manually to Checkbox.
      classes: 'validator',
      attributes: {'required': '', 'title': 'Required'},
    );
  }
}

/// A stateful helper to demonstrate the Toggle with a validator.
class _StatefulToggleValidator extends StatefulComponent {
  const _StatefulToggleValidator();

  @override
  State<_StatefulToggleValidator> createState() => _StatefulToggleValidatorState();
}

class _StatefulToggleValidatorState extends State<_StatefulToggleValidator> {
  bool isChecked = false;

  @override
  Component build(BuildContext context) {
    return Toggle(
      isChecked: isChecked,
      onToggle: (val) => setState(() => isChecked = val),
      // The `validator` class must be added manually to Toggle.
      classes: 'validator',
      attributes: {'required': '', 'title': 'Required'},
    );
  }
}

// #endregion

/// Renders a collection of [ComponentPreview] widgets to showcase the
/// functionality and styling of the `deepyr` [ValidatorHint] component.
class ValidatorPreview extends StatelessComponent {
  const ValidatorPreview({super.key});

  @override
  Component build(BuildContext context) {
    return div(classes: 'max-w-5xl mx-auto px-4 space-y-12', [
      // ~Validator and validator-hint
      ComponentPreview(
        title: 'Validator and validator-hint',
        description:
            "The Input component automatically adds the 'validator' class when validation attributes are present. If the value is invalid, the hint text appears.",
        preview: [
          form(classes: 'w-full max-w-xs', [
            const Input(
              type: 'email',
              placeholder: 'mail@site.com',
              required: true,
            ),
            ValidatorHint([text('Enter valid email address')]),
          ]),
        ],
        code: '''
// The `Input` component automatically adds the `validator` class because `required: true` is set.
const Input(
  type: 'email',
  placeholder: 'mail@site.com',
  required: true,
),
ValidatorHint([text('Enter valid email address')]),
''',
      ),

      // ~Password requirement validator
      ComponentPreview(
        title: 'Password requirement validator',
        preview: [
          form(classes: 'w-full max-w-xs', [
            const Input(
              type: 'password',
              placeholder: 'Password',
              required: true,
              minLength: 8,
              pattern: r'(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}',
              title:
                  'Must be more than 8 characters, including number, lowercase letter, uppercase letter',
            ),
            ValidatorHint([
              text('Must be more than 8 characters, including'),
              br(),
              text('At least one number'),
              br(),
              text('At least one lowercase letter'),
              br(),
              text('At least one uppercase letter'),
            ]),
          ]),
        ],
        code: r'''
Input(
  type: 'password',
  placeholder: 'Password',
  required: true,
  minLength: 8,
  pattern: r'(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}',
  title: 'Must be more than 8 characters...',
),
ValidatorHint([
  text('Must be more than 8 characters, including'),
  br(),
  text('At least one number'),
  br(),
  text('At least one lowercase letter'),
  br(),
  text('At least one uppercase letter'),
]),
''',
      ),

      // ~Username requirement validator
      ComponentPreview(
        title: 'Username requirement validator',
        preview: [
          form(classes: 'w-full max-w-xs', [
            const Input(
              placeholder: 'Username',
              required: true,
              pattern: r'[A-Za-z][A-Za-z0-9\-]*',
              minLength: 3,
              maxLength: 30,
              title: 'Only letters, numbers or dash',
            ),
            ValidatorHint([
              text('Must be 3 to 30 characters'),
              br(),
              text('containing only letters, numbers or dash'),
            ]),
          ]),
        ],
        code: r'''
Input(
  type: 'text',
  placeholder: 'Username',
  required: true,
  pattern: r'[A-Za-z][A-Za-z0-9\-]*',
  minLength: 3,
  maxLength: 30,
  title: 'Only letters, numbers or dash',
),
ValidatorHint([
  text('Must be 3 to 30 characters'),
  br(),
  text('containing only letters, numbers or dash'),
]),
''',
      ),

      // ~Phone Number requirement validator
      ComponentPreview(
        title: 'Phone Number requirement validator',
        preview: [
          form(classes: 'w-full max-w-xs', [
            const Input(
              type: 'tel',
              placeholder: 'Phone',
              required: true,
              pattern: '[0-9]*',
              minLength: 10,
              maxLength: 10,
              title: 'Must be 10 digits',
              classes: 'tabular-nums', // Use `classes` for utilities not yet in deepyr
            ),
            ValidatorHint([text('Must be 10 digits')]),
          ]),
        ],
        code: '''
Input(
  type: 'tel',
  placeholder: 'Phone',
  required: true,
  pattern: r'[0-9]*',
  minLength: 10,
  maxLength: 10,
  title: 'Must be 10 digits',
  classes: 'tabular-nums',
),
ValidatorHint([text('Must be 10 digits')]),
''',
      ),

      // ~URL input requirement validator
      ComponentPreview(
        title: 'URL input requirement validator',
        preview: [
          form(classes: 'w-full max-w-xs', [
            const Input(
              type: 'url',
              placeholder: 'https://',
              value: 'https://',
              required: true,
              pattern: r'^(https?://)?([a-zA-Z0-9]([a-zA-Z0-9\-].*[a-zA-Z0-9])?\.)+[a-zA-Z].*$',
              title: 'Must be valid URL',
            ),
            ValidatorHint([text('Must be valid URL')]),
          ]),
        ],
        code: r'''
Input(
  type: 'url',
  placeholder: 'https://',
  value: 'https://',
  required: true,
  pattern: r'^(https?://)?([a-zA-Z0-9]([a-zA-Z0-9\-].*[a-zA-Z0-9])?\.)+[a-zA-Z].*$',
  title: 'Must be valid URL',
),
ValidatorHint([text('Must be valid URL')]),
''',
      ),

      // ~Date input requirement validator
      ComponentPreview(
        title: 'Date input requirement validator',
        preview: [
          form(classes: 'w-full max-w-xs', [
            const Input(
              type: 'date',
              placeholder: 'Pick a date in 2025',
              required: true,
              // For attributes not directly on the component, use the `attributes` map.
              attributes: {'min': '2025-01-01', 'max': '2025-12-31'},
              title: 'Must be in 2025',
            ),
            ValidatorHint([text('Must be in 2025')]),
          ]),
        ],
        code: '''
Input(
  type: 'date',
  placeholder: 'Pick a date in 2025',
  required: true,
  // The `min` and `max` properties on Input are for numbers.
  // For date strings, use the `attributes` map.
  attributes: {'min': '2025-01-01', 'max': '2025-12-31'},
  title: 'Must be in 2025',
),
ValidatorHint([text('Must be in 2025')]),
''',
      ),

      // ~Number input requirement validator
      ComponentPreview(
        title: 'Number input requirement validator',
        preview: [
          form(classes: 'w-full max-w-xs', [
            const Input(
              type: 'number',
              placeholder: 'Type a number between 1 to 10',
              required: true,
              // Use the type-safe `min` and `max` properties for numbers.
              min: 1,
              max: 10,
              title: 'Must be between 1 to 10',
            ),
            ValidatorHint([text('Must be between 1 to 10')]),
          ]),
        ],
        code: '''
Input(
  type: 'number',
  placeholder: 'Type a number between 1 to 10',
  required: true,
  // For number inputs, the `min` and `max` properties can be used directly.
  min: 1,
  max: 10,
  title: 'Must be between 1 to 10',
),
ValidatorHint([text('Must be between 1 to 10')]),
''',
      ),

      // ~Checkbox requirement validator
      ComponentPreview(
        title: 'Checkbox requirement validator',
        preview: [
          form([
            const _StatefulCheckboxValidator(),
            ValidatorHint([text('Required')]),
          ]),
        ],
        code: '''
// Checkbox doesn't automatically add the 'validator' class, so we add it manually.
// A stateful component is needed to manage the checked state.
class StatefulCheckboxValidator extends StatefulComponent {
  bool isChecked = false;

  @override
  Component build(BuildContext context) {
    return Checkbox(
      isChecked: isChecked,
      onToggle: (val) => setState(() => isChecked = val),
      classes: 'validator',
      attributes: {'required': '', 'title': 'Required'},
    );
  }
}

// In your main build:
form([
  StatefulCheckboxValidator(),
  ValidatorHint([text('Required')]),
])
''',
      ),

      // ~Toggle requirement validator
      ComponentPreview(
        title: 'Toggle requirement validator',
        preview: [
          form([
            const _StatefulToggleValidator(),
            ValidatorHint([text('Required')]),
          ]),
        ],
        code: '''
// Like Checkbox, Toggle requires the 'validator' class to be added manually.
// A stateful component is needed to manage the checked state.
class StatefulToggleValidator extends StatefulComponent {
  bool isChecked = false;

  @override
  Component build(BuildContext context) {
    return Toggle(
      isChecked: isChecked,
      onToggle: (val) => setState(() => isChecked = val),
      classes: 'validator',
      attributes: {'required': '', 'title': 'Required'},
    );
  }
}

// In your main build:
form([
  StatefulToggleValidator(),
  ValidatorHint([text('Required')]),
])
''',
      ),

      // ~Select requirement validator
      ComponentPreview(
        title: 'Select requirement validator',
        description: 'Click the button before picking an option to see the error color.',
        preview: [
          form(classes: 'w-full max-w-xs', [
            Select(
              [
                option([text('Choose:')], disabled: true, selected: true, value: ''),
                option([text('Tabs')]),
                option([text('Spaces')]),
              ],
              // Add the 'validator' class manually.
              classes: 'validator',
              attributes: {'required': ''},
            ),
            ValidatorHint([text('Required')]),
            Button([text('Submit form')], htmlType: ButtonHtmlType.submit, style: [Spacing.mt4]),
          ]),
        ],
        code: '''
form([
  Select(
    [
      option([text('Choose:')], disabled: true, selected: true, value: ''),
      option([text('Tabs')]),
      option([text('Spaces')]),
    ],
    // Add the 'validator' class manually to the Select component.
    classes: 'validator',
    attributes: {'required': ''},
  ),
  ValidatorHint([text('Required')]),
  Button([text('Submit form')], type: 'submit', style: [Spacing.mt4]),
])
''',
      ),
    ]);
  }
}

<!-- END FILE: examples/deepyr_example/lib/pages/preview/validator_preview.dart -->

<!-- BEGIN FILE: GEMINI.md -->
# Gemini Development Guide for deepyr

## Project Summary

`deepyr` is a UI component library for the Jaspr framework, providing Dart implementations of DaisyUI components. It uses a type-safe styling system that maps to Tailwind CSS utility classes. Development is driven by creating components in the `packages/deepyr` library and simultaneously documenting them with live examples in the `examples/deepyr_example` application.

## Component Implementation Structure

Implementing a new component in `deepyr` follows a consistent structure. For a new component named `NewComponent`, you will typically create two files inside `packages/deepyr/lib/src/components/new_component/`:

1. **`new_component.dart`**: This file contains the main component class.

    ```dart
    import 'package:jaspr/jaspr.dart';
    import '../../base/ui_component.dart';
    import 'new_component_style.dart';

    class NewComponent extends UiComponent {
      const NewComponent(super.children, {List<NewComponentStyling>? style, ...})
          : super(style: style);

      @override
      String get baseClass => 'new-component'; // The base DaisyUI class

      // Define static const modifiers here
      static const NewComponentStyle modifierName = NewComponentStyle('modifier-class', type: StyleType.style);
    }
    ```

2. **`new_component_style.dart`**: This file defines the styling interface and the concrete style class for the component.

    ```dart
    import '../../base/component_style.dart';
    import '../../base/styling.dart';
    import 'new_component.dart';

    // Marker interface
    abstract class NewComponentStyling implements Styling {}

    // Concrete style class
    class NewComponentStyle extends ComponentStyle<NewComponentStyle> implements NewComponentStyling {
      const NewComponentStyle(super.cssClass, {required super.type, super.modifiers});

      @override
      NewComponentStyle create(List<PrefixModifier> modifiers) {
        return NewComponentStyle(cssClass, type: type, modifiers: modifiers);
      }
    }
    ```

This structure ensures that all components are extensible, stylable, and consistent with the rest of the library.

## Core Development Rules

1. **Component Structure:**
    * All new components must extend `UiComponent`.
    * Each component must define its DaisyUI base class by overriding the `baseClass` getter (e.g., `btn` for Button, `card` for Card). If there is no base class, return an empty string.
    * Component logic should be self-contained. Use the `configureAttributes` method to manage component-specific HTML attributes, especially for accessibility (ARIA roles).

2. **Styling and Modifiers:**
    * Component-specific modifiers (e.g., `btn-primary`, `card-side`) must be defined as `static const` fields within the component class.
    * Each component must have a corresponding `ComponentNameStyle` class (e.g., `ButtonStyle`) that extends `ComponentStyle<T>`. The static fields will be instances of this class.
    * Each component must have a marker interface `ComponentNameStyling` (e.g., `ButtonStyling`) that is implemented by its `ComponentNameStyle` class and any general utilities that can be applied to it.
    * For general-purpose styling (spacing, typography, colors, effects), use the existing utility classes in `lib/src/base/utilities/`. Do not create component-specific modifiers for styles that can be achieved with these general utilities.
    * Responsive and state-based variations (e.g., `md:`, `hover:`) are applied using the `.at()` and `.on()` methods on a style instance (e.g., `Button.primary.at(Breakpoint.md)`).

3. **Exports:**
    * All new public-facing components, their style classes, and their styling interfaces must be exported from `packages/deepyr/lib/deepyr.dart`.

4. **Documentation and Examples:**
    * Every new component or significant feature **must** be demonstrated in the `examples/deepyr_example` project.
    * Create a new `..._preview.dart` file in `examples/deepyr_example/lib/pages/preview/`.
    * Use the `ComponentPreview` widget to show both the live component and its corresponding Dart implementation code.
    * Add the new preview component to `examples/deepyr_example/lib/pages/home.dart` to make it visible in the example app.

5. **Component Usage and Smart Containers:**
    * Always use the highest-level deepyr component abstraction available (Card, Button, etc.).
    * For container components that require a specific class on their children (like Join, Carousel, Steps), do not use a wrapper component or the classes property. These "smart containers" will automatically apply the required classes (join-item, carousel-item, etc.) to their direct UiComponent children.
    **Do not create inline SVG for icons use the Icon Component instead.**

6. Handling Advanced CSS Selectors (peer, group)
  While the style property is the standard for all component self-styling, certain advanced Tailwind/DaisyUI patterns rely on CSS selectors that style an element based on the state of a sibling (peer-checked) or parent (group-hover). These cannot be modeled through the style property.
  In these specific, documented cases, it is permissible to fall back to using Jaspr's primitive components (div, input, etc.) and apply the necessary utility classes directly via the classes property.
  **Clarification**: This exception does not apply to item-based components like Join. The pattern of applying join-item is now handled by the smart Join component itself and is not a valid reason to use the classes property.

7. The copyWith Contract
   * Every concrete class extending UiComponent must implement the copyWith method.
   * This method is essential for the "smart container" pattern and allows components to be programmatically cloned and modified by their parents, ensuring a clean and powerful API.
   * The implementation should return a new instance of the component, preserving all original properties except those explicitly provided as arguments. Use the protected mergeClasses helper when overriding the classes property.

<!-- END FILE: GEMINI.md -->

---
Generated with llmifier v0.2.2
Created by Software Engineering Philipp Gerber
Repository: https://github.com/PhilippHGerber/llmifier
Package: https://pub.dev/packages/llmifier
